<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>个人技术博客</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 23 May 2017 15:04:46 +0800</pubDate>
    <lastBuildDate>Tue, 23 May 2017 15:04:46 +0800</lastBuildDate>
    <generator>Jekyll v3.2.1</generator>
    
      <item>
        <title>JDBC编程简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#jdbc编程简介&quot; id=&quot;markdown-toc-jdbc编程简介&quot;&gt;JDBC编程简介&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#jdbc典型用法&quot; id=&quot;markdown-toc-jdbc典型用法&quot;&gt;JDBC典型用法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java程序使用jdbc连接数据库&quot; id=&quot;markdown-toc-java程序使用jdbc连接数据库&quot;&gt;Java程序使用JDBC连接数据库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#注册数据库驱动&quot; id=&quot;markdown-toc-注册数据库驱动&quot;&gt;注册数据库驱动&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取数据库连接&quot; id=&quot;markdown-toc-获取数据库连接&quot;&gt;获取数据库连接&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#java代码执行sql语句操作数据库&quot; id=&quot;markdown-toc-java代码执行sql语句操作数据库&quot;&gt;Java代码执行SQL语句操作数据库&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#管理connectionstatementresultset&quot; id=&quot;markdown-toc-管理connectionstatementresultset&quot;&gt;管理Connection，Statement，ResultSet&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#分析sql异常&quot; id=&quot;markdown-toc-分析sql异常&quot;&gt;分析SQL异常&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#执行查询操作详述&quot; id=&quot;markdown-toc-执行查询操作详述&quot;&gt;执行查询操作详述&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#预备语句&quot; id=&quot;markdown-toc-预备语句&quot;&gt;预备语句&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#读写lob属性&quot; id=&quot;markdown-toc-读写lob属性&quot;&gt;读写LOB属性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#转义语句&quot; id=&quot;markdown-toc-转义语句&quot;&gt;转义语句&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#多结果集&quot; id=&quot;markdown-toc-多结果集&quot;&gt;多结果集&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取自动生成的键&quot; id=&quot;markdown-toc-获取自动生成的键&quot;&gt;获取自动生成的键&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#可滚动和可更新的结果集&quot; id=&quot;markdown-toc-可滚动和可更新的结果集&quot;&gt;可滚动和可更新的结果集&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#更新一行的某些属性&quot; id=&quot;markdown-toc-更新一行的某些属性&quot;&gt;更新一行的某些属性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#插入新行&quot; id=&quot;markdown-toc-插入新行&quot;&gt;插入新行&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#删除行&quot; id=&quot;markdown-toc-删除行&quot;&gt;删除行&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#行集&quot; id=&quot;markdown-toc-行集&quot;&gt;行集&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#元数据&quot; id=&quot;markdown-toc-元数据&quot;&gt;元数据&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#事务&quot; id=&quot;markdown-toc-事务&quot;&gt;事务&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#保存点&quot; id=&quot;markdown-toc-保存点&quot;&gt;保存点&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#批量更新&quot; id=&quot;markdown-toc-批量更新&quot;&gt;批量更新&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数据库连接管理&quot; id=&quot;markdown-toc-数据库连接管理&quot;&gt;数据库连接管理&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对JDBC编程入门知识的总结，主要参考《Java核心技术》，包括一些JDBC常见用法的示例，代码均来自《Java核心技术》&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;jdbc编程简介&quot;&gt;JDBC编程简介&lt;/h1&gt;

&lt;p&gt;JDBC是Java语言 连接，操作关系型数据库的 API库；通过JDBC的API，Java程序可以连接各种数据库，增删改查数据和获取数据库的元数据&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;可略过&lt;/strong&gt; JDBC和数据库驱动的关系&lt;/em&gt;&lt;br /&gt;
&lt;em&gt;JDBC定义了供数据库客户端连接和操作数据库的API接口，而具体实现是由各个数据库厂商已驱动的方式来提供，所以在运行环境中需要部署驱动才能真正运行&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;可略过&lt;/strong&gt; JDBC的驱动类型&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;JDBC/ODBC桥接：驱动把JDBC调用翻译成ODBC调用，不推荐使用&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;驱动由Java类库和平台相关数据库客户端组成：客户代码使用驱动提供的Java类库来调用数据库客户端从而使用数据库&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;纯Java客户端类库：把数据库调用请求发送给服务器构建，由服务器把请求转换为数据库协议&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;纯Java类库：把JDBC调用直接转换为数据库协议&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;注意，在运行JDBC程序前需要安装数据库并下载和部署数据库驱动(jar包)到classpath中，请参考具体的数据库手册&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;jdbc典型用法&quot;&gt;JDBC典型用法&lt;/h2&gt;

&lt;p&gt;本地客户端程序直接使用JDBC来操作数据库&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/客户端连接数据库.png&quot; alt=&quot;客户端连接数据库&quot; /&gt;&lt;/p&gt;

&lt;p&gt;本地客户端程序连接服务器程序，由服务器程序使用JDBC来操作数据库&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/中间件连接数据库.png&quot; alt=&quot;中间件连接数据库&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;java程序使用jdbc连接数据库&quot;&gt;Java程序使用JDBC连接数据库&lt;/h1&gt;

&lt;p&gt;使用JDBC连接数据库包括两个步骤&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;注册数据库驱动&lt;/li&gt;
  &lt;li&gt;使用数据库服务器URL，user，password获取数据库连接&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注册数据库驱动&quot;&gt;注册数据库驱动&lt;/h2&gt;

&lt;p&gt;如前所述，JDBC只是一些interface，而interface的具体实现是由数据库驱动来实现的，为了在Java代码中使用JDBC API的具体实现就需要注册 数据库驱动&lt;/p&gt;

&lt;p&gt;注册的方法很简单，只需要加载数据库驱动jar包里的驱动类到JVM，然后通过该驱动类来获取JDBC中各个接口的具体实现&lt;/p&gt;

&lt;p&gt;在代码中加载方法有两种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;Class.forName(&quot;org.apache.jdbc.ClientDriver&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;System.setProperty(&quot;jdbc.driver&quot;, &quot;org.apache.jdbc.ClientDriver&quot;)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;获取数据库连接&quot;&gt;获取数据库连接&lt;/h2&gt;

&lt;p&gt;把数据库驱动类加载到JVM以后，就可以通过DriverManager来获取数据库连接&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;涉及的API&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;DriverManager.getConnection&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String url = props.getProperty(&quot;jdbc.url&quot;);
      String username = props.getProperty(&quot;jdbc.username&quot;);
      String password = props.getProperty(&quot;jdbc.password&quot;);

Connection con = DriverManager.getConnection(url, username, password)；

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;java代码执行sql语句操作数据库&quot;&gt;Java代码执行SQL语句操作数据库&lt;/h1&gt;

&lt;p&gt;获取数据库连接Connection以后，通过Connection获取一个Statement，然后使用Statement来执行SQL语句，执行查询SQL语句会返回结果集ResultSet，通过ResultSet可以使用查询数据库的结果&lt;/p&gt;

&lt;p&gt;上述的执行SQL语句流程示例&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Connection con = DriverManager.getConnection(url, username, password)； // 获取一个连接
Statement stat = conn.createStatement(); // 获取一个Statement
ResultSet result = stat.executeQuery(&quot;select * from user&quot;);  // 执行数据库查询
while (result.next()) // 迭代结果集
{
    for (int i = 1; i &amp;lt;= columnCount; i++)
    {
        if (i &amp;gt; 1) System.out.print(&quot;, &quot;);
            System.out.print(result.getString(i));
    }
    System.out.println();
}

// 释放资源
result.close();
stat.close();
con.close()

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Statement是用来执行SQL语句的对象，它包括executeQuery，execute，executeUpdate等几种执行SQL语句的API，每种使用的场景不同，请参考API&lt;/p&gt;

&lt;h2 id=&quot;管理connectionstatementresultset&quot;&gt;管理Connection，Statement，ResultSet&lt;/h2&gt;

&lt;p&gt;Connection可以创建一个或以上的Statement，但有些数据库驱动只允许一个激活(没有close)的Statement，可以用DatabaseMetaData类来获取支持的最大Statement数&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意，很多跟数据库相关的信息，驱动的信息都能通过DatabaseMetaData类来获取&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一个Statement可以拥有多个不相关的命令和查询，但最多只能同时打开一个ResultSet，当需要同时使用多个ResultSet的话可以考虑修改SQL或者用行集RowSet&lt;/p&gt;

&lt;p&gt;通过使用它们的close方法来释放资源&lt;/p&gt;

&lt;h2 id=&quot;分析sql异常&quot;&gt;分析SQL异常&lt;/h2&gt;

&lt;p&gt;SQLException是一个可迭代的对象，通过迭代SQLException来分析问题的根源&lt;/p&gt;

&lt;p&gt;SQLWarning是非致命异常的替代品，可以通过它来获取一些关于执行问题信息&lt;/p&gt;

&lt;p&gt;SQLException和SQLWarning都是多个对象链接而成链，通过迭代它们能获取更能多信息，并且它们都有API来获取error code等信息&lt;/p&gt;

&lt;h1 id=&quot;执行查询操作详述&quot;&gt;执行查询操作详述&lt;/h1&gt;

&lt;h2 id=&quot;预备语句&quot;&gt;预备语句&lt;/h2&gt;

&lt;p&gt;有时候某些SQL语句只是部分参数不同，为了能重用SQL语句，可以使用预备语句PreparedStatement&lt;/p&gt;

&lt;p&gt;例如，’select * from user where name = ？‘里的条件name的值是根据参数来决定的，其他部分能重用，使用可重用的SQL能创建一个PreparedStatement并重用，示例如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;String query = “select * from user where name = ？“;
PreparedStatement pstat = con.prepareStatement(query);

// 设置参数
pstat.setString(1, “name1”);
ResultSet s1 = pstat.executeQuery();
s1.close();

// 设置参数
pstat.setString(1, “name1”);
ResultSet s2 = pstat.executeQuery();
s2.close();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;读写lob属性&quot;&gt;读写LOB属性&lt;/h2&gt;

&lt;p&gt;数据库可以存储二进制大对象Blob和字符型大对象Clob&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Statement stat = conn.createStatement(); 
ResultSet result = stat.executeQuery(&quot;select * from user&quot;); 
if (result.next())
{
	Blob blob = result.getBlob(1);
	InputStream in = blob.getInputStream();
}


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Blob blob = conn.createBlob();
OutputStream out = blob.setBinaryStream();
out.write(..);

PreparedStatement stmt = conn.prepareStatement(&quot;insert into t values(?)&quot;);
stmt.setBlob(1, blob);
stmt.executeUpdate(); 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;转义语句&quot;&gt;转义语句&lt;/h2&gt;

&lt;p&gt;JDBC能把转义语句转换成特定的数据库操作语法&lt;/p&gt;

&lt;p&gt;转义语句主要包括以下分类:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;日期和时间字面量，如{d ‘2008-01-04’}, {ts ‘2008-01-04 23:59:59.999’}&lt;/li&gt;
  &lt;li&gt;函数，如{fn left(?, 20)}&lt;/li&gt;
  &lt;li&gt;调用存储过程，如{call PROC1(?, ?)}&lt;/li&gt;
  &lt;li&gt;like 条件里的转义符号 ,如 … where ? like %!_% * {escape !}&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;多结果集&quot;&gt;多结果集&lt;/h2&gt;

&lt;p&gt;当调用存储过程或在使用允许单个查询中提交多个select语句的数据库时，Statement.execute的执行结果会返回多个结果集，通过Statement.getMoreResults来的移动到其他结果集&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean done = false;
boolean isResult = stmt.execute(command);
while(!done) {
	if(isResult) {
		ResultSet result = stmt.getResultSet();
		// do something
	} else {
		int updateCount = stmt.getUpdateCount();
		if(updateCount &amp;gt;= 0) {
			// do something
		} else {
			done = true;
		}
	}
	stmt.getMoreResults();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取自动生成的键&quot;&gt;获取自动生成的键&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stmt.execute(insertStatement, Statement.RETURN_GENERATED_KEYS);
ResultSet rs = stmt.getGeneratedKeys();
if(rs.next()) {
	int key = rs.getInt(1);
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;可滚动和可更新的结果集&quot;&gt;可滚动和可更新的结果集&lt;/h1&gt;

&lt;p&gt;通过Connection.createStatement(type, concurrency)，Connection.preparedStatement(type, concurrency)可以配置可滚动和可更新的Statement和PreparedStatement&lt;/p&gt;

&lt;p&gt;其中type的取值和意义如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Value&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TYPE_FORWARD_ONLY&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;结果集不可滚动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TYPE_SCROLL_INSENSITIVE&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;结果集可滚动，但对数据库数据的更新不敏感&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;TYPE_SCROLL_SENSITIVE&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;结果集可滚动，对数据库数据的更新敏感&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中concurrency的取值和意义如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Value&lt;/th&gt;
      &lt;th style=&quot;text-align: right&quot;&gt;Meaning&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CONCUR_READ_ONLY&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;结果集不能用于更新&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CONCUR_UPDATABLE&lt;/td&gt;
      &lt;td style=&quot;text-align: right&quot;&gt;结果集可用于更新表&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通过下面的API来判断结果集是否支持可滚动和更新&lt;br /&gt;
ResultSet.getType&lt;br /&gt;
ResultSet.getConcurrency&lt;/p&gt;

&lt;p&gt;通过下面的API来判断数据库驱动是否支持可滚动和更新&lt;br /&gt;
DatabaseMetaData.supportsResultSetType(type)&lt;br /&gt;
DatabaseMetaData.supportsResultSetConcurrency(concurrency)&lt;/p&gt;

&lt;p&gt;可滚动的ResultSet带有一个光标，有一些API可控制其维护的光标&lt;br /&gt;
rs.next()&lt;br /&gt;
rs.previous()&lt;br /&gt;
rs.relative(n) //相对当前位置移动光标&lt;br /&gt;
rs.absolute(n) //移动光标到指定行号&lt;br /&gt;
rs.getRow() //获取光标行号&lt;br /&gt;
first，last，beforeFirst，afterLast等&lt;br /&gt;
isFirst，isLast，isBeforeFirst，isAfterLast等&lt;/p&gt;

&lt;h2 id=&quot;更新一行的某些属性&quot;&gt;更新一行的某些属性&lt;/h2&gt;

&lt;p&gt;可更新的ResultSet中，ResultSet.updateXxx(i, XXX) 是用来更新结果集某一行的一个的属性&lt;br /&gt;
更新完属性以后还得使用ResultSet.updateRow()发送更新到数据库&lt;/p&gt;

&lt;h2 id=&quot;插入新行&quot;&gt;插入新行&lt;/h2&gt;

&lt;p&gt;使用可更新的ResultSet可以插入新行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rs.moveToInsertRow();
rs.updateString(&quot;Title&quot;, title);
rs.updateString(&quot;ISBN&quot;, isbn);
rs.updateString(&quot;Publisher_id&quot;, pubid);
rs.insertRow(); //发送插入请求到数据库
rs.moveToCurrentRow();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;删除行&quot;&gt;删除行&lt;/h2&gt;

&lt;p&gt;rs.deleteRow()&lt;/p&gt;

&lt;h1 id=&quot;行集&quot;&gt;行集&lt;/h1&gt;

&lt;p&gt;数据集的一个弊端是要一直占用一个连接，为了在不同地方处理查询结果的过程中不占用连接，可以使用行集RowSet&lt;/p&gt;

&lt;p&gt;有多重扩展了RowSet接口的子接口：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CachedRowSet：允许断开连接的操作&lt;/li&gt;
  &lt;li&gt;WebRowSet：一个被缓存的行集，该行集能把数据保存到XML文件，需要使用的时候用WebRowSet打开XML文件即可&lt;/li&gt;
  &lt;li&gt;FilterRowSet和JoinRowSet：能在行集上执行相当于select和join的操作&lt;/li&gt;
  &lt;li&gt;JdbcRowSet：简单封装了RowSet提供get，set方法，相当于把RowSet转换为一个bean&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JDBC规范希望由厂商提供以上接口的高效实现，但JDBC同时也提供了参考实现，实现类以Impl结尾&lt;/p&gt;

&lt;p&gt;构造行集的方式有两种&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ResultSet result = ...
CachedRowSet crs = new CachedRowSet();
crs.setTableName(tableName);
crs.populate(result);
conn.close();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CachedRowSet crs = new CachedRowSet();
crs.setUrl(&quot;jdbc:...&quot;);
crs.setUser(&quot;...&quot;);
crs.setPassword(&quot;...&quot;);
crs.setCommand(&quot;select * from user where name = ?&quot;);
crs.setString(1, &quot;..&quot;);
crs.excute(); // 执行查询，自动填充数据，并释放连接

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当数据量过大时，可以通过crs.setPageSize(size)，crs.nextPage()来本批获取数据&lt;/p&gt;

&lt;p&gt;当使用可更新的数据集可以使用crs.acceptChanges()和crs.acceptChanges(conn)来更新数据集&lt;/p&gt;

&lt;h1 id=&quot;元数据&quot;&gt;元数据&lt;/h1&gt;

&lt;p&gt;描述数据库及其组成部分的数据叫做元数据，通过JDBC API可以获取三类元数据：关于数据库的元数据、关于结果集的元数据、关于预备语句参数的元数据&lt;/p&gt;

&lt;p&gt;通过DatabaseMetaData来获取数据库的信息，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;DatabaseMetaData meta = conn.getMetaData();
ResultSet mrs = meta.getTable(null, null, null, new String[]{&quot;TABLE&quot;});
while(mrs.next())
	System.out.println(mrs.getString(3)); // print table names

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;DatabaseMetaData有很多方法来获取数据库的信息&lt;/p&gt;

&lt;p&gt;通过ResultSetMetaData能获取数据集相关信息，例如：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ResultSet mrs = stat.executeQuery(&quot;select * from &quot; + tableName);
ResultSetMetaData meta = mrs.getMetaData();
for(int i = 0; i &amp;lt; meta.getColumnCount(); i++) {
	String columnName = meta.getColumnLabel(i);
	int columnWidth = meta.getColumnDisplaySize(i);
	...
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;事务&quot;&gt;事务&lt;/h1&gt;

&lt;p&gt;多个SQL语句能组成一个事务，事务能提交和回滚；默认情况下，JDBC是自动提交模式，为了启用事务，需要关闭自动提交&lt;/p&gt;

&lt;p&gt;使用事务的过程一般如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conn.setAutoCommit(false);
Statement stmt = conn.createStatement();
stmt.executeUpdate(command1);
stmt.executeUpdate(command2);
stmt.executeUpdate(command3);
...
conn.commit();

// or conn.rollback();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h2 id=&quot;保存点&quot;&gt;保存点&lt;/h2&gt;

&lt;p&gt;可以在事务中使用保存点，回滚的时候可以回滚到保存点，例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;conn.setAutoCommit(false);
Statement stmt = conn.createStatement();
stmt.executeUpdate(command1);
stmt.executeUpdate(command2);
Savepoint svpt = conn.createSavepoint();
if(..) conn.rollback(svpt);
...
conn.commit();
conn.releaseSavepoint(svpt);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;批量更新&quot;&gt;批量更新&lt;/h2&gt;

&lt;p&gt;当需要执行多次insert语句时，可以使用批量更新来提高性能&lt;/p&gt;

&lt;p&gt;&lt;em&gt;通过DatabaseMetaData.supportBatchUpdates来查看驱动是否支持批量更新&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;批量操作中不能包含查询语句&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;一般批量更新是在一个事务之中，以保证批量更新能以原子的方式成功&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;boolean autoCommit = conn.getAutoCommit();
conn.setAutoCommit(false);

Statement stmt = conn.createStatement();
stmt.addBatch(command1);
stmt.addBatch(command2);
stmt.addBatch(command3);
...
int[] counts = stmt.executeBatch();
conn.commit();
conn.setAutoCommit(autoCommit);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;数据库连接管理&quot;&gt;数据库连接管理&lt;/h1&gt;

&lt;p&gt;在企业应用中数据库连接管理主要包括两方面：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数据源连接信息的管理：集中管理一个数据源的连接信息并为客户端提供数据源服务&lt;/li&gt;
  &lt;li&gt;数据库连接的管理：建立数据库连接，并以连接池的方式来管理连接资源&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;连接池服务一般是由Web容器或应用服务器提供，在容器中配置好数据库的连接信息后，客户端通过JNDI来获得&lt;/p&gt;

&lt;p&gt;获取数据源和连接的方法一般如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Context jndiContext = new InitialContext();
DataSource source = (DataSource)jndiContext.lookup(&quot;java:...&quot;);
Connection conn = source.getConnection();

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Java EE5 容器中支持标注获取DataSource&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@Resource(&quot;jdbc/corejava&quot;)
private DataSource source;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;p&gt;《Java核心技术》&lt;br /&gt;
&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/jdbc/index.html&quot;&gt;JDBC(TM) Database Access&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 19 May 2017 10:00:00 +0800</pubDate>
        <link>/2017/05/19/JDBC%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/</link>
        <guid isPermaLink="true">/2017/05/19/JDBC%E7%BC%96%E7%A8%8B%E7%AE%80%E4%BB%8B/</guid>
        
        <category>JDBC</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>MySQL基本知识</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#operate-database&quot; id=&quot;markdown-toc-operate-database&quot;&gt;Operate Database&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例&quot; id=&quot;markdown-toc-常用命令用例&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-update-and-drop-table&quot; id=&quot;markdown-toc-create-update-and-drop-table&quot;&gt;create, update and drop table&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-1&quot; id=&quot;markdown-toc-常用命令用例-1&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#index&quot; id=&quot;markdown-toc-index&quot;&gt;index&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-2&quot; id=&quot;markdown-toc-常用命令用例-2&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#view&quot; id=&quot;markdown-toc-view&quot;&gt;view&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-3&quot; id=&quot;markdown-toc-常用命令用例-3&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#trigger&quot; id=&quot;markdown-toc-trigger&quot;&gt;Trigger&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-4&quot; id=&quot;markdown-toc-常用命令用例-4&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#select&quot; id=&quot;markdown-toc-select&quot;&gt;Select&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-5&quot; id=&quot;markdown-toc-常用命令用例-5&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#insert-update-and-delete&quot; id=&quot;markdown-toc-insert-update-and-delete&quot;&gt;insert, update and delete&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-6&quot; id=&quot;markdown-toc-常用命令用例-6&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#mysql-functions&quot; id=&quot;markdown-toc-mysql-functions&quot;&gt;MySQL functions&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-7&quot; id=&quot;markdown-toc-常用命令用例-7&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#store-procedure--store-function&quot; id=&quot;markdown-toc-store-procedure--store-function&quot;&gt;Store Procedure &amp;amp; Store Function&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-8&quot; id=&quot;markdown-toc-常用命令用例-8&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#user-management&quot; id=&quot;markdown-toc-user-management&quot;&gt;User Management&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-9&quot; id=&quot;markdown-toc-常用命令用例-9&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#backup--recovery&quot; id=&quot;markdown-toc-backup--recovery&quot;&gt;Backup &amp;amp; Recovery&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-10&quot; id=&quot;markdown-toc-常用命令用例-10&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#log&quot; id=&quot;markdown-toc-log&quot;&gt;Log&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-11&quot; id=&quot;markdown-toc-常用命令用例-11&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#performance&quot; id=&quot;markdown-toc-performance&quot;&gt;Performance&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用命令用例-12&quot; id=&quot;markdown-toc-常用命令用例-12&quot;&gt;常用命令用例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对MySQL入门知识的总结，包括一些MySQL常见命令的示例&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;operate-database&quot;&gt;Operate Database&lt;/h1&gt;

&lt;p&gt;各种存储引擎各有特点，相对MyISAM和Memory，InnoDB支持事务，外键，表修复和并发控制，但磁盘和内存占用大，插入速度慢；Memory一般只用于临时表且表的大小受限&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;存储引擎的比较&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;特性&lt;/th&gt;
      &lt;th&gt;InnoDB&lt;/th&gt;
      &lt;th&gt;MyISAM&lt;/th&gt;
      &lt;th&gt;MEMORY&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;事务安全&lt;/td&gt;
      &lt;td&gt;支持&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;存储限制&lt;/td&gt;
      &lt;td&gt;64TB&lt;/td&gt;
      &lt;td&gt;有&lt;/td&gt;
      &lt;td&gt;有&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;空间占用&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;内存占用&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;插入数据速度&lt;/td&gt;
      &lt;td&gt;低&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
      &lt;td&gt;高&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;支持外建&lt;/td&gt;
      &lt;td&gt;支持&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
      &lt;td&gt;无&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;常用命令用例&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-- start mysql server
mysqld_safe --user=root

-- shutdown the server
mysqladmin -u root shutdown

-- connect to mysql server
mysql -h localhost -uroot -p;

create database example;

show databases;

-- show current database
select database();

drop database example;

-- show all engines
show engines \G

-- 

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;create-update-and-drop-table&quot;&gt;create, update and drop table&lt;/h1&gt;

&lt;h2 id=&quot;常用命令用例-1&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;创建表&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create table student (
    num int(10) primary key,
    name varchar(20) not null,
    sex varchar(4),
    birthday datetime,
    address varchar(50)
);

create table grade (
    id int(10) primary key auto_increment,
    course varchar(10) not null,
    s_num int(10) not null,
    grade varchar(4),
    constraint s_sum foreign key(s_num) references student(num)
);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;修改表结构&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
alter table grade modify course varchar(20);

alter table grade modify s_num int(10) after id;

desc grade;

alter table grade change grade score varchar(4);

alter table grade drop foreign key s_sum;

show create table grade \G

alter table grade engine=myisam;

alter table student drop address;

alter table student add phone int(10);

alter table grade rename gradeInfo;

alter table gradeInfo add constraint s_num foreign key(s_num) references student(num);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop table student;&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;index&quot;&gt;index&lt;/h1&gt;

&lt;p&gt;索引有两种实现类型：B树和哈希表，InnoDB和MyISAM支持B树，Memory支持哈希表(默认)和B树；索引能提高条件查询，分组，排序和表连接查询的速度；但在插入数据时需要维护索引增加时长&lt;/p&gt;

&lt;p&gt;索引类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;普通索引&lt;/li&gt;
  &lt;li&gt;唯一性索引：性能比普通索引要高&lt;/li&gt;
  &lt;li&gt;全文索引：针对字符型的表属性&lt;/li&gt;
  &lt;li&gt;单列索引&lt;/li&gt;
  &lt;li&gt;多列索引&lt;/li&gt;
  &lt;li&gt;空间索引&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;索引的使用原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;尽量使用唯一索引&lt;/li&gt;
  &lt;li&gt;为经常需要排序，分组，连接或作为查询条件的属性建立索引&lt;/li&gt;
  &lt;li&gt;限制索引的数目&lt;/li&gt;
  &lt;li&gt;尽量使用属性的前段部分为索引而非全文索引&lt;/li&gt;
  &lt;li&gt;删除不再使用的索引&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Key和Index的不同&lt;/strong&gt;
在关系模型中Key可以理解为一种约束关系，比如主键要求唯一确定一个记录，外键要求记录连接到其他记录；而索引是为了加速查询，并且帮助实现约束，比如唯一索引能帮助实现唯一约束；MySQL中Key同时也是索引&lt;br /&gt;
&lt;a href=&quot;http://discuss.fogcreek.com/joelonsoftware5/default.asp?cmd=show&amp;amp;ixPost=152398&quot;&gt;详情参考&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-2&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create database job;

-- 创建表时创建索引

CREATE TABLE user (
    userid int(10) NOT NULL AUTO_INCREMENT,
    username varchar(20) NOT NULL,
    passwd varchar(20) NOT NULL,
    info text,
    PRIMARY KEY (userid),
    unique index index_uid(userid desc),
    index index_user(username, passwd),
    fulltext index index_info(info)
);

CREATE TABLE information (
    id int(10) NOT NULL AUTO_INCREMENT,
    name varchar(20) NOT NULL,
    sex varchar(4) NOT NULL,
    birthday date DEFAULT NULL,
    address varchar(50) DEFAULT NULL,
    tel varchar(20) DEFAULT NULL,
    pic blob,
    PRIMARY KEY (id)
);

create index index_name on information(name(10));

create index index_bir on information(birthday, address);

-- 查看索引在查询中的使用情况
explain select * from information where birthday='' \G

alter table information add unique index index_id(id asc);

drop index index_user on user;

drop index index_name on information;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;view&quot;&gt;view&lt;/h1&gt;

&lt;p&gt;视图的作用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;简化操作&lt;/li&gt;
  &lt;li&gt;增加数据的安全性&lt;/li&gt;
  &lt;li&gt;提高表的逻辑独立性&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用命令用例-3&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
CREATE TABLE work_info (
  id int(10) NOT NULL,
  name varchar(20) NOT NULL,
  sex varchar(4) NOT NULL,
  age int(5) DEFAULT NULL,
  address varchar(50) DEFAULT NULL,
  tel varchar(20) DEFAULT NULL,
  PRIMARY KEY (id)
);

insert into work_info values
(1, 'zhang san', M, 18, 'beijing haidian'  , 1234567)
(2, 'li si'    , M, 22, 'beijing changping', 2345678)
(3, 'wang wu'  , F, 17, 'hunan yongzhou'   , 3456789)
(4, 'zhao liu' , F, 25, 'liaoning buxin'   , 4567890);

create algorithm=merge view info_view(id, name, sex, address)
as select id, name, sex, address from work_info where age &amp;gt; 20
with local check option;
-- ALGORITHM有三个值：MERGE、TEMPTABLE或UNDEFINCED，默认值是UNDEFINED
-- MERGE：将查询视图的语句与视图的定义语句合并处理
-- TEMPTABLE：视图查询的结果保存到临时表，而后在该临时表基础上执行查询视图的语句，对于视图的查询条件会在临时表上进行，包括传统的WHERE子句，以及像MERGE方式无法支持的DISTINCT、GROUP BY、HAVING等
-- UNDEFINED：由MySQL选择使用哪种算法，一般会首选MERGE，因为MERGE更有效率，而且TEMPTABLE不支持更新
-- with check option 是在通过view来更新表的时候进行约束，当更新表的结果能被视图查询出来则更新表的操作成功，否则失败
-- WITH LOCAL/cascade CHECK OPTION：当视图是根据另一个视图定义的时，LOCAL和CASCADED关键字决定了检查测试的范围。LOCAL关键字对CHECK OPTION进行了限制，使其仅作用在定义的视图上，CASCADED会对将进行评估的基表进行检查

select * from info_view;

create or replace algorithm=merge view info_view(id, name, sex, address)
as select id, name, sex, address from work_info where age &amp;lt; 20
with local check option;

update info_view set sex='M' where id=3;

drop view if exists info_view cascade;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;trigger&quot;&gt;Trigger&lt;/h1&gt;

&lt;p&gt;在表中对update，delete，insert操作进行监听并注册触发器，当监听的操作执行前或后触发触发器&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-4&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create table product (
    id int(10) primary key,
    name varchar(20) not null,
    functiono varchar(50),
    company varchar(20) not null,
    address varchar(50)
);

create table operate (
    op_id int(10) primary key auto_increment,
    op_type varchar(20) not null,
    op_time time not null
);

create trigger product_bf_insert 
before insert on product for each row
insert into operate values(null, 'before insert', current_time());

create trigger product_af_update
after update on product for each row
insert into operate values(null, 'after update', current_time());

create trigger product_af_del
after delete on product for each row
insert into operate values(null, 'after delete', current_time());

delimiter @

create trigger product_bf_del
before delete on product for each row
begin
insert into operate values(null, 'before delete', current_time());
end@

delimiter ;

insert into product
values(1,'p1','f1','c1','a1');

update product set name='p2';

drop trigger product_bf_insert;

drop trigger product_af_update;

drop trigger product_af_del;

show triggers \G

select * from information_schema.triggers \G

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;select&quot;&gt;Select&lt;/h1&gt;

&lt;h2 id=&quot;常用命令用例-5&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create table student (
    id int(10) primary key,
    name varchar(20) not null,
    sex varchar(4),
    birth year,
    department varchar(20) not null,
    address varchar(50)
);

create table score (
    id int(10) primary key auto_increment,
    stu_id int(10) not null,
    c_name varchar(10),
    grade int(10)
);

insert into student values(901, 'zhanglaoda', 'male', 1985, 'computer science', 'beijing haidian');
insert into student values(902, 'zhanglaoer', 'male', 1986, 'chinese', 'beijing haidian');
insert into student values(903, 'zhangsan', 'f', 1990, 'chinese', 'hunan yongzhou');
insert into student values(904, 'lisi', 'male', 1990, 'english', 'liaoning buxin');
insert into student values(905, 'wangwu', 'f', 1991, 'english', 'fujian xiamen');
insert into student values(906, 'wangliu', 'male', 1988, 'computer science', 'hunan hengyang');

insert into score values(1, 901, 'computer', 98);
insert into score values(2, 901, 'english', 80);
insert into score values(3, 902, 'computer', 65);
insert into score values(4, 902, 'chinese', 88);
insert into score values(5, 903, 'chinese', 95);
insert into score values(6, 904, 'computer', 70);
insert into score values(7, 904, 'english', 92);
insert into score values(8, 905, 'english', 94);
insert into score values(9, 906, 'computer', 90);
insert into score values(10, 906, 'english', 85);

select * from student;

-- limit offset, rows 第一个记录的偏移(0开始)和行数
select * from student limit 1, 3;

select id, name, department from student;

select * from student where department in ('computer science', 'english');

select * from student where year(now()) - birth between 18 and 22;

select department, count(department) from student group by department;

select c_name, max(grade) from score group by c_name;

select c_name, grade from score left join student as stu on stu_id = stu.id where name = 'lisi';

select * from student left join score on student.id = score.stu_id;

select stu_id, sum(grade) from score group by stu_id;

select c_name, avg(grade) from score group by c_name;

select * from student where id in (select stu_id from score where c_name = 'computer' and grade &amp;lt; 95);

select * from student where id in (select stu_id from score where c_name = 'computer' and stu_id in (select stu_id from score where c_name = 'english'));

select grade from score where c_name='computer' order by grade desc;

select id from student union select stu_id from score;

-- like语法的通配符包括：%(匹配任意字符串), _(匹配任意字符), [], [^]
select name, department, c_name, grade from student as stu left join score as s on stu.id=s.stu_id where name regexp '^(zhang|wang)';

select name, year(now()) - birth as age, department, c_name, grade from student as stu left join score as s on stu.id=s.stu_id where address regexp '^hunan';

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;insert-update-and-delete&quot;&gt;insert, update and delete&lt;/h1&gt;

&lt;h2 id=&quot;常用命令用例-6&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create table food (
    id int(10) primary key auto_increment,
    name varchar(20) not null,
    company varchar(30) not null,
    price float,
    produce_time year,
    validity_time int(4),
    address varchar(50)
);

insert into food
values(null, 'AA cookie', 'AA factory', 2.5, 2008, 3, 'beijing'),
(null, 'CC Milk', 'CC factory', 3.5, 2009, 1, 'hebei'),
(null, 'EE jelly', 'EE factory', 1.5, 2007, 2, 'beijing'),
(null, 'FF coffee', 'FF factory', 20, 2002, 5, 'tianjin'),
(null, 'GG sugar', 'GG factory', 14, 2003, 3, 'guangdong');

insert into food(name, company, price, produce_time, validity_time, address)
	select name, company, price, produce_time, validity_time, address from food;

update food
set address='neimenggu', price=3.2
where company='CC factory';

delete from food where year(now()) - produce_time &amp;gt; validity_time;

delete from food where address='beijing';

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;mysql-functions&quot;&gt;MySQL functions&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html&quot;&gt;functions手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-7&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;1-100随机整数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select round(rand()*100), floor(rand()*100), ceil(rand()*100);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;圆周率及其正余弦，对数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select pi(), sin(pi()), cos(pi()), log(pi());&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;store-procedure--store-function&quot;&gt;Store Procedure &amp;amp; Store Function&lt;/h1&gt;

&lt;p&gt;在数据库中存储一份可执行代码，直接调用就能得出结果，好处包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不同的客户端能使用一样功能的代码&lt;/li&gt;
  &lt;li&gt;为了保证安全性，保证有足够权限才能访问&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用命令用例-8&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;创建food表并插入数据&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
create table food (
    id int(10) primary key auto_increment,
    name varchar(20) not null,
    company varchar(30) not null,
    price float,
    produce_time year,
    validity_time int(4),
    address varchar(50)
);

insert into food
values(null, 'AA cookie', 'AA factory', 2.5, 2008, 3, 'beijing'),
(null, 'CC Milk', 'CC factory', 3.5, 2009, 1, 'hebei'),
(null, 'EE jelly', 'EE factory', 1.5, 2007, 2, 'beijing'),
(null, 'FF coffee', 'FF factory', 20, 2002, 5, 'tianjin'),
(null, 'GG sugar', 'GG factory', 14, 2003, 3, 'guangdong');

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;创建存储过程&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
delimiter @@

-- be careful the ';' at each statement
create procedure food_price_count(in price_info1 float, in price_info2 float, out count int)
	reads sql data
	begin
		# local variable must be declared first in block
		declare temp float;

		# cursor must be declared after local variable
		declare match_price cursor for select price from food;
		
		# handler must be declared after cursor
		declare exit handler for not found close match_price;
		
		# declare and set a user variable, user variable begin with @
		set @sum=0;

		# select into also can set variable
		select count(*) into count from food where price&amp;gt;price_info1 and price&amp;lt;price_info2;

		open match_price;

		while count&amp;gt;0 do
			fetch match_price into temp;

			if temp&amp;gt;price_info1 and temp&amp;lt;price_info2 then set @sum=@sum+temp;
			end if;
			
			set count = count - 1;
			
		end while;

		close match_price;
		
		select count(*) into count from food where price&amp;gt;price_info1 and price&amp;lt;price_info2;
		
	end;
@@

delimiter ;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;调用存储过程&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;call food_price_count(2,18,@count);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;查看结果&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select @count, @sum;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除存储过程&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop procedure food_price_count;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;查看存储过程&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show create procedure food_price_count \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;创建存储函数&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
delimiter @

create function food_price_count(price_info1 float, price_info2 float)
	returns int
	reads sql data
	begin
		return (select count(*) from food where price&amp;gt;price_info1 and price&amp;lt;price_info2);
	end;
@

delimiter ;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;调用存储函数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;select food_price_count(2,18);&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除存储函数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop function food_price_count;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;查看存储函数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show create function food_price_count \G&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;user-management&quot;&gt;User Management&lt;/h1&gt;

&lt;p&gt;user表包括用户列(Host, User, Password)，权限列，安全列，资源控制列；管理用户的登录和对所有表的权限，ssl，资源使用限制等；&lt;/p&gt;

&lt;p&gt;db和host表包括用户列(host, user)，权限列;管理用户在数据库中的权限；&lt;/p&gt;

&lt;p&gt;table_priv表包括用户列(host, user)，权限列；管理用户在表中的权限；&lt;/p&gt;

&lt;p&gt;columns_priv表包括用户列(host, user)，权限列；管理用户在列中的权限；&lt;/p&gt;

&lt;p&gt;pros_priv表用来管理用户对存储过程和函数的权限；&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html&quot;&gt;privilege手册&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-9&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;登陆test数据库&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -h 59.83.17.100 -u root -p test&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;创建用户&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;create user 'test'@'localhost' identified by 'password';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除用户&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;drop user 'test'@'localhost';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;root修改自己密码&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqladmin -u root -p password 'new_password'&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;root用户修改其他用户密码&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set password for 'test'@'localhost'=PASSWORD('new_password');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;普通用户修改自己密码&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set password=PASSWORD('new_password');&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;授予查询，更新权限，该用户能给其他用户分与权限&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;grant select, update on *.* to 'test'@'localhost' with grant option;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;回收权限&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;revoke select on *.* from 'test'@'localhost';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;revoke all privileges, grant option from 'test'@'localhost';&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;查看权限&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show grants for 'test'@'localhost';&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;backup--recovery&quot;&gt;Backup &amp;amp; Recovery&lt;/h1&gt;

&lt;p&gt;mysqldump命令的原理是根据数据库，表和数据生成一个备份文件，在文件中填入创建数据库，表和insert数据的命令&lt;/p&gt;

&lt;p&gt;可以通过直接复制数据库目录的方式来备份MyISAM的表，但需要停掉MySQL服务&lt;/p&gt;

&lt;p&gt;可以使用mysqlhotcopy工具来热备份MyISAM类型的表&lt;/p&gt;

&lt;p&gt;select into outfile导出表数据到文本文件&lt;/p&gt;

&lt;p&gt;SELECT [column name] FROM table [where ..] INTO OUTFILE ‘file’ [OPTION];&lt;/p&gt;

&lt;p&gt;mysqldump也能导出数据，使用-X可以导出xml文件&lt;/p&gt;

&lt;p&gt;mysqldump -uroot -pPassword -T dirname -X dbname table [option]&lt;/p&gt;

&lt;p&gt;可以使用load data infile导入文本数据&lt;/p&gt;

&lt;p&gt;LOAD DATA [LOCAL] INFILE file INTO TABLE table [OPTION];&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-10&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;备份一个数据库中的表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump -uusername -p dbname table1 table2 &amp;gt; backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;备份多个数据库&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump -uusername -p --databases db1 db2 &amp;gt; backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;备份所有数据库&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqldump -uusername -p --all-databases &amp;gt; backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;数据恢复&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql -uroot -p &amp;lt; backup.sql&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;导出表中的数据，以”、”分隔，”&amp;gt;”开头，字符型数据用双引号括注&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;select * from test.student into outfile '/tmp/data' fields terminated by '\、' optionally enclosed by '\&quot;' lines starting by '\&amp;gt;' terminated by '\r\n';
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;导入表的数据&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;load data infile '/tmp/file' into table student fields terminated by '\、' optionally enclosed by '\&quot;' lines starting by '\&amp;gt;' terminated by '\r\n'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;log&quot;&gt;Log&lt;/h1&gt;

&lt;p&gt;MySQL有四种日志，除二进制日志外其他都是文本日志，默认只启动错误日志，因为日志会降低性能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;二进制日志：把数据库的操作信息(不包括查询)存储在二进制日志文件中&lt;/li&gt;
  &lt;li&gt;错误日志：记录MySQL的启动，关闭和运行错误信息&lt;/li&gt;
  &lt;li&gt;通用查询日志：记录用户登陆，操作和查询数据库的信息&lt;/li&gt;
  &lt;li&gt;慢查询日志：记录执行超过指定时间的操作信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;二进制日志最好单独存放于其他磁盘，可以用来恢复数据库&lt;/p&gt;

&lt;h2 id=&quot;常用命令用例-11&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;在my.cnf或my.ini中启用二进制日志&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
log-bin=/tmp/b_log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;查看二进制日志&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlbinlog /tmp/b_log.000001;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除所有二进制记录&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;reset master;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除某一个二进制日志文件&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;purge master logs to '/tmp/b_log.000001'；&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;删除某个日期前创建的二进制日志&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;purge master logs to '2017-08-01 11:00:00'；&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;用二进制日志恢复数据库&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqlbinlog b_log.000001 | mysql -uroot -p&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;暂停和恢复二进制日志&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set sql_bin_log = 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;set sql_bin_log = 1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在my.cnf或my.ini中启用错误日志&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
log-error=/tmp/err_log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;重新创建错误日志文件，旧的日志文件被改名，可删掉或备份&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqladmin -uroot -p flush-logs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在my.cnf或my.ini中启用通用查询日志&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
log=/tmp/search_log
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;重新创建通用查询日志文件，旧的日志文件被删掉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqladmin -uroot -p flush-logs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;在my.cnf或my.ini中启用慢查询日志&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[mysqld]
log-slow-queries=/tmp/slow_queries_log
long_query_time=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;重新创建慢查询日志文件，旧的日志文件被删掉&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mysqladmin -uroot -p flush-logs&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;performance&quot;&gt;Performance&lt;/h1&gt;

&lt;p&gt;索引经常用来优化条件查询，排序等；使用索引查询记录时，要注意索引的使用情况。like条件的字符串不能以通配符%开头，否则不会启用索引；使用多列索引时，查询条件的要用多列索引中的第一个字段才会启用索引；OR所连接的所有查询条件都要用索引的字段才会启用。&lt;/p&gt;

&lt;p&gt;改变数据库的表结构，通过增加冗余来优化数据库的访问，这种方法适合查询远多于修改的情况：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在字段多的表中，把常用字段和不常用字段分成两个表&lt;/li&gt;
  &lt;li&gt;为经常需要进行连接查询的多个表创建一个中间表减少连接查询&lt;/li&gt;
  &lt;li&gt;为表增加冗余字段减少表连接&lt;/li&gt;
  &lt;li&gt;插入大量数据时可以先禁用索引和唯一性检查，完成以后再重新启用&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;常用命令用例-12&quot;&gt;常用命令用例&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;查看InnoDB表的查询记录数和更新记录数，慢查询数，连接数&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show status like 'Innodb_rows_read' \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show status like 'Innodb_rows_updated' \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show status like 'Slow_queries' \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;show status like 'Connections' \G&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;分析查询语句的性能&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;explain select * from score where stu_id=96;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;分析score表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;analyze table score;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;检查score表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;check table score;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;优化score表&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;optimize table score;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 13 May 2017 10:00:00 +0800</pubDate>
        <link>/2017/05/13/MySQL%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</link>
        <guid isPermaLink="true">/2017/05/13/MySQL%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</guid>
        
        <category>MySQL</category>
        
        
        <category>MySQL</category>
        
      </item>
    
      <item>
        <title>Java反射API简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#类class反射api&quot; id=&quot;markdown-toc-类class反射api&quot;&gt;类(Class)反射API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#获取class对象的api&quot; id=&quot;markdown-toc-获取class对象的api&quot;&gt;获取Class对象的API&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取类的修饰符和类型信息&quot; id=&quot;markdown-toc-获取类的修饰符和类型信息&quot;&gt;获取类的修饰符和类型信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取类成员信息&quot; id=&quot;markdown-toc-获取类成员信息&quot;&gt;获取类成员信息&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#域field反射api&quot; id=&quot;markdown-toc-域field反射api&quot;&gt;域(Field)反射API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#获取域的类型和泛型信息&quot; id=&quot;markdown-toc-获取域的类型和泛型信息&quot;&gt;获取域的类型和泛型信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取域的访问修饰符&quot; id=&quot;markdown-toc-获取域的访问修饰符&quot;&gt;获取域的访问修饰符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取和设置域的值&quot; id=&quot;markdown-toc-获取和设置域的值&quot;&gt;获取和设置域的值&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#方法method反射api&quot; id=&quot;markdown-toc-方法method反射api&quot;&gt;方法(Method)反射API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#获取方法的类型信息&quot; id=&quot;markdown-toc-获取方法的类型信息&quot;&gt;获取方法的类型信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取方法的参数的正式名字&quot; id=&quot;markdown-toc-获取方法的参数的正式名字&quot;&gt;获取方法的参数的正式名字&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取方法的访问修饰符&quot; id=&quot;markdown-toc-获取方法的访问修饰符&quot;&gt;获取方法的访问修饰符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#用method的反射api来调用方法&quot; id=&quot;markdown-toc-用method的反射api来调用方法&quot;&gt;用Method的反射API来调用方法&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#构造器constructors的反射api&quot; id=&quot;markdown-toc-构造器constructors的反射api&quot;&gt;构造器(Constructors)的反射API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#获取构造器声明中的类型信息&quot; id=&quot;markdown-toc-获取构造器声明中的类型信息&quot;&gt;获取构造器声明中的类型信息&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取构造器的访问修饰符&quot; id=&quot;markdown-toc-获取构造器的访问修饰符&quot;&gt;获取构造器的访问修饰符&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#创建对象&quot; id=&quot;markdown-toc-创建对象&quot;&gt;创建对象&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数组array反射api&quot; id=&quot;markdown-toc-数组array反射api&quot;&gt;数组(Array)反射API&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#获取数组和数组元素的类型&quot; id=&quot;markdown-toc-获取数组和数组元素的类型&quot;&gt;获取数组和数组元素的类型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#创建数组&quot; id=&quot;markdown-toc-创建数组&quot;&gt;创建数组&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#获取和设置数组元素&quot; id=&quot;markdown-toc-获取和设置数组元素&quot;&gt;获取和设置数组元素&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#枚举enum反射api&quot; id=&quot;markdown-toc-枚举enum反射api&quot;&gt;枚举(Enum)反射API&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对Java管网上反射API教程的个人总结，代码和测试用例均来自管网&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Java反射 是一种强大的工具，能让开发人员在运行时获取和操作类，接口，域，方法的信息，其应用范围不广，但能跨过静态类型的约束。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;应用范围：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;动态的扩展类的功能：如动态代理&lt;/li&gt;
  &lt;li&gt;类信息浏览器、可视化开发工具&lt;/li&gt;
  &lt;li&gt;调试器、测试工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;虽然反射很强大，但适用场景不多，而且使用是有代价的，所以能不用就不用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;代价&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;性能不足：因缺少编译器的代码优化&lt;/li&gt;
  &lt;li&gt;安全约束情况复杂：动态的代码可能运行在不同的安全管理器中，受到不同的安全约束&lt;/li&gt;
  &lt;li&gt;破坏封装：通过反射能无视修饰符的限制来访问类的成员&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Java反射常用的API主要包括访问和操作类，方法，域，构造器，数组和枚举的API&lt;/p&gt;

&lt;h1 id=&quot;类class反射api&quot;&gt;类(Class)反射API&lt;/h1&gt;

&lt;p&gt;常用的类反射API主要包括：获取Class对象，获取类的访问修饰符和各种类型信息，获取类成员的信息&lt;/p&gt;

&lt;h2 id=&quot;获取class对象的api&quot;&gt;获取Class对象的API&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Object.getClass()&lt;/strong&gt; 通过一个对象来获取它的class的对象，例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class&amp;lt;String&amp;gt; c = &quot;foo&quot;.getClass();

Set&amp;lt;String&amp;gt; s = new HashSet&amp;lt;String&amp;gt;();
Class&amp;lt;Set&amp;lt;String&amp;gt;&amp;gt;&amp;gt; c = s.getClass();

boolean b;
Class c = b.getClass(); // compile-time error

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意，基本类型的变量不能通过getClass获取Class对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.class语法&lt;/strong&gt; 通过“.class”语法来获取Class对象&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class&amp;lt;Boolean&amp;gt; c = boolean.class; // boxing type

Class&amp;lt;PrintStream&amp;gt; c = java.io.PrintStream.class;

Class&amp;lt;int[][][]&amp;gt; c = int[][][].class;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Class.forName()&lt;/strong&gt; 通过Class的静态方法和class的全限定名来获取Class对象&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class c = Class.forName(&quot;com.duke.MyLocaleServiceProvider&quot;);

Class cStringArray = Class.forName(&quot;[[Ljava.lang.String;&quot;);

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;.type语法&lt;/strong&gt; 可以通过.TYPE语法来获取基本类型包装类的Class对象，但其实可以用.class语法代替&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Class的一些其他API&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Class.getSuperclass() 获取父类&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class c = javax.swing.JButton.class.getSuperclass();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Class.getClasses() 获取所有在Class对象中声明的或继承而来的嵌套类，接口，枚举&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;[] c = Character.class.getClasses();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Class.getDeclaredClasses() 获取所有在Class对象中声明的嵌套类，接口，枚举&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Class&amp;lt;?&amp;gt;[] c = Character.class.getDeclaredClasses();&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Class.getDeclaringClass()&lt;br /&gt;
java.lang.reflect.Field.getDeclaringClass()&lt;br /&gt;
java.lang.reflect.Method.getDeclaringClass()&lt;br /&gt;
java.lang.reflect.Constructor.getDeclaringClass()&lt;/p&gt;

&lt;p&gt;嵌套类和成员通过以上API来获取外层的类，但匿名类需要不行，需要使用Class.getEnclosingClass&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;

Field f = System.class.getField(&quot;out&quot;);
Class c = f.getDeclaringClass();
The field out is declared in System.
public class MyClass {
	static Object o = new Object() {
		public void m() {} 
	};
	static Class&amp;lt;c&amp;gt; = o.getClass().getEnclosingClass();
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Class c = Thread.State.class().getEnclosingClass();
The enclosing class of the enum Thread.State is Thread.
public class MyClass {
	static Object o = new Object() { 
		public void m() {} 
	};
	static Class&amp;lt;c&amp;gt; = o.getClass().getEnclosingClass(); //MyClass
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取类的修饰符和类型信息&quot;&gt;获取类的修饰符和类型信息&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Class.getModifiers()&lt;/strong&gt; 通过Class.getModifiers()来获取类的修饰符，另外java.lang.reflect.Modifier 有很多API来查看修饰符信息&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.getTypeParameters&lt;/strong&gt; 通过c.getTypeParameters来获取class声明中的泛型变量&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.getGenericInterfaces()&lt;/strong&gt; 通过c.getGenericInterfaces()获取class所实现的接口&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.getSuperclass()&lt;/strong&gt; 通过c.getSuperclass()获取class的父类&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;c.getAnnotations()&lt;/strong&gt; 通过c.getAnnotations()获取class声明中的注解&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/class/classModifiers.html&quot;&gt;示例代码来源&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.annotation.Annotation;
import java.lang.reflect.Modifier;
import java.lang.reflect.Type;
import java.lang.reflect.TypeVariable;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import static java.lang.System.out;

public class ClassDeclarationSpy {
	public static void main(String... args) {
	try {
		Class&amp;lt;?&amp;gt; c = Class.forName(args[0]);
		out.format(&quot;Class:%n  %s%n%n&quot;, c.getCanonicalName());
		out.format(&quot;Modifiers:%n  %s%n%n&quot;,
			   Modifier.toString(c.getModifiers()));

		out.format(&quot;Type Parameters:%n&quot;);
		TypeVariable[] tv = c.getTypeParameters();
		if (tv.length != 0) {
		out.format(&quot;  &quot;);
		for (TypeVariable t : tv)
			out.format(&quot;%s &quot;, t.getName());
		out.format(&quot;%n%n&quot;);
		} else {
		out.format(&quot;  -- No Type Parameters --%n%n&quot;);
		}

		out.format(&quot;Implemented Interfaces:%n&quot;);
		Type[] intfs = c.getGenericInterfaces();
		if (intfs.length != 0) {
		for (Type intf : intfs)
			out.format(&quot;  %s%n&quot;, intf.toString());
		out.format(&quot;%n&quot;);
		} else {
		out.format(&quot;  -- No Implemented Interfaces --%n%n&quot;);
		}

		out.format(&quot;Inheritance Path:%n&quot;);
		List&amp;lt;Class&amp;gt; l = new ArrayList&amp;lt;Class&amp;gt;();
		printAncestor(c, l);
		if (l.size() != 0) {
		for (Class&amp;lt;?&amp;gt; cl : l)
			out.format(&quot;  %s%n&quot;, cl.getCanonicalName());
		out.format(&quot;%n&quot;);
		} else {
		out.format(&quot;  -- No Super Classes --%n%n&quot;);
		}

		out.format(&quot;Annotations:%n&quot;);
		Annotation[] ann = c.getAnnotations();
		if (ann.length != 0) {
		for (Annotation a : ann)
			out.format(&quot;  %s%n&quot;, a.toString());
		out.format(&quot;%n&quot;);
		} else {
		out.format(&quot;  -- No Annotations --%n%n&quot;);
		}

		// production code should handle this exception more gracefully
	} catch (ClassNotFoundException x) {
		x.printStackTrace();
	}
	}

	private static void printAncestor(Class&amp;lt;?&amp;gt; c, List&amp;lt;Class&amp;gt; l) {
	Class&amp;lt;?&amp;gt; ancestor = c.getSuperclass();
 	if (ancestor != null) {
		l.add(ancestor);
		printAncestor(ancestor, l);
 	}
	}
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/class/classModifiers.html&quot;&gt;一些测试示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ java ClassDeclarationSpy java.util.concurrent.ConcurrentNavigableMap
Class:
  java.util.concurrent.ConcurrentNavigableMap

Modifiers:
  public abstract interface

Type Parameters:
  K V

Implemented Interfaces:
  java.util.concurrent.ConcurrentMap&amp;lt;K, V&amp;gt;
  java.util.NavigableMap&amp;lt;K, V&amp;gt;

Inheritance Path:
  -- No Super Classes --

Annotations:
  -- No Annotations --
  
// 注意，对象数组的类型文本以[L开头
$ java ClassDeclarationSpy &quot;[Ljava.lang.String;&quot;
Class:
  java.lang.String[]

Modifiers:
  public abstract final

Type Parameters:
  -- No Type Parameters --

Implemented Interfaces:
  interface java.lang.Cloneable
  interface java.io.Serializable

Inheritance Path:
  java.lang.Object

Annotations:
  -- No Annotations --
  
$ java ClassDeclarationSpy java.io.InterruptedIOException
Class:
  java.io.InterruptedIOException

Modifiers:
  public

Type Parameters:
  -- No Type Parameters --

Implemented Interfaces:
  -- No Implemented Interfaces --

Inheritance Path:
  java.io.IOException
  java.lang.Exception
  java.lang.Throwable
  java.lang.Object

Annotations:
  -- No Annotations --

// 注意，该类已经废弃，所以能获取到运行时标注Deprecated
$ java ClassDeclarationSpy java.security.Identity
Class:
  java.security.Identity

Modifiers:
  public abstract

Type Parameters:
  -- No Type Parameters --

Implemented Interfaces:
  interface java.security.Principal
  interface java.io.Serializable

Inheritance Path:
  java.lang.Object

Annotations:
  @java.lang.Deprecated()
  
  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取类成员信息&quot;&gt;获取类成员信息&lt;/h2&gt;

&lt;p&gt;常用的API包括获取类的域，方法和构造器对象&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获取域的API&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getDeclaredField()&lt;/li&gt;
  &lt;li&gt;getField()&lt;/li&gt;
  &lt;li&gt;getDeclaredFields()&lt;/li&gt;
  &lt;li&gt;getFields()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;获取方法的API&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getDeclaredMethod()&lt;/li&gt;
  &lt;li&gt;getMethod()&lt;/li&gt;
  &lt;li&gt;getDeclaredMethods()&lt;/li&gt;
  &lt;li&gt;getMethods()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;获取构造器的API&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getDeclaredConstructor()&lt;/li&gt;
  &lt;li&gt;getConstructor()&lt;/li&gt;
  &lt;li&gt;getDeclaredConstructors()&lt;/li&gt;
  &lt;li&gt;getConstructors()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;获取嵌套类的API&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;getDeclaredClasses()&lt;/li&gt;
  &lt;li&gt;getClasses()&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;getDeclared* 的API都是获取类直接声明(包括private)的成员，而get* 的API能获得public的类声明和继承而来的成员&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/class/classMembers.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;void printMembers(Member[] mbrs, String s) {
	for (Member mbr : mbrs) {
		if (mbr instanceof Field)
			System.out.format(&quot;  %s%n&quot;, ((Field)mbr).toGenericString());
	   else if (mbr instanceof Constructor)
			System.out.format(&quot;  %s%n&quot;, ((Constructor)mbr).toGenericString());
	   else if (mbr instanceof Method)
			System.out.format(&quot;  %s%n&quot;, ((Method)mbr).toGenericString());
	}
}

private static void printClasses(Class&amp;lt;?&amp;gt; c) {
	Class&amp;lt;?&amp;gt;[] clss = c.getClasses();
	for (Class&amp;lt;?&amp;gt; cls : clss)
		System.out.format(&quot;  %s%n&quot;, cls.getCanonicalName());
}

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;域field反射api&quot;&gt;域(Field)反射API&lt;/h1&gt;

&lt;p&gt;域的反射API包括获取域的类型，泛型信息，访问修饰符，获取和修改域的值API&lt;/p&gt;

&lt;p&gt;可以通过Class的getFields()和getDeclaredField()来获取域对象&lt;/p&gt;

&lt;h2 id=&quot;获取域的类型和泛型信息&quot;&gt;获取域的类型和泛型信息&lt;/h2&gt;

&lt;p&gt;Field.getType 获取域类型&lt;/p&gt;

&lt;p&gt;Field.getGenericType 获取带泛型声明的域类型&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/fieldTypes.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import java.util.List;

public class FieldSpy&amp;lt;T&amp;gt; {
	public boolean[][] b = {
		{ false, false }, 
		{ true, true } 
	};
	public String name  = &quot;Alice&quot;;
	public List&amp;lt;Integer&amp;gt; list;
	public T val;

	public static void main(String... args) {
		try {
			Class&amp;lt;?&amp;gt; c = Class.forName(args[0]);
			Field f = c.getField(args[1]);
			System.out.format(&quot;Type: %s%n&quot;, f.getType());
			System.out.format(&quot;GenericType: %s%n&quot;, f.getGenericType());
	
			// production code should handle these exceptions more gracefully
		} catch (ClassNotFoundException x) {
			x.printStackTrace();
		} catch (NoSuchFieldException x) {
			x.printStackTrace();
		}
	}
}

$ java FieldSpy FieldSpy b
Type: class [[Z
GenericType: class [[Z
$ java FieldSpy FieldSpy name
Type: class java.lang.String
GenericType: class java.lang.String
$ java FieldSpy FieldSpy list
Type: interface java.util.List
GenericType: java.util.List&amp;lt;java.lang.Integer&amp;gt;
$ java FieldSpy FieldSpy val
Type: class java.lang.Object
GenericType: T

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取域的访问修饰符&quot;&gt;获取域的访问修饰符&lt;/h2&gt;

&lt;p&gt;Field.getModifiers() 获取访问修饰符信息&lt;/p&gt;

&lt;p&gt;Field.isSynthetic() 判断域是否是编译器生成的&lt;/p&gt;

&lt;p&gt;Field.isEnumCostant() 判断域是否是枚举实例&lt;/p&gt;

&lt;h2 id=&quot;获取和设置域的值&quot;&gt;获取和设置域的值&lt;/h2&gt;

&lt;p&gt;主要通过以下API&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Field.get&lt;/li&gt;
  &lt;li&gt;Field.get*&lt;/li&gt;
  &lt;li&gt;Field.set&lt;/li&gt;
  &lt;li&gt;Field.set*&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/fieldValues.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import java.util.Arrays;
import static java.lang.System.out;

enum Tweedle { DEE, DUM }

public class Book {
    public long chapters = 0;
    public String[] characters = { &quot;Alice&quot;, &quot;White Rabbit&quot; };
    public Tweedle twin = Tweedle.DEE;

    public static void main(String... args) {
			Book book = new Book();
			String fmt = &quot;%6S:  %-12s = %s%n&quot;;
		
			try {
			    Class&amp;lt;?&amp;gt; c = book.getClass();
		
			    Field chap = c.getDeclaredField(&quot;chapters&quot;);
			    out.format(fmt, &quot;before&quot;, &quot;chapters&quot;, book.chapters);
		  	    chap.setLong(book, 12);
			    out.format(fmt, &quot;after&quot;, &quot;chapters&quot;, chap.getLong(book));
		
			    Field chars = c.getDeclaredField(&quot;characters&quot;);
			    out.format(fmt, &quot;before&quot;, &quot;characters&quot;,
				       Arrays.asList(book.characters));
			    String[] newChars = { &quot;Queen&quot;, &quot;King&quot; };
			    chars.set(book, newChars);
			    out.format(fmt, &quot;after&quot;, &quot;characters&quot;,
				       Arrays.asList(book.characters));
		
			    Field t = c.getDeclaredField(&quot;twin&quot;);
			    out.format(fmt, &quot;before&quot;, &quot;twin&quot;, book.twin);
			    t.set(book, Tweedle.DUM);
			    out.format(fmt, &quot;after&quot;, &quot;twin&quot;, t.get(book));
		
		        // production code should handle these exceptions more gracefully
			} catch (NoSuchFieldException x) {
			    x.printStackTrace();
			} catch (IllegalAccessException x) {
			    x.printStackTrace();
			}
    }
}

// 结果：
$ java Book
BEFORE:  chapters     = 0
 AFTER:  chapters     = 12
BEFORE:  characters   = [Alice, White Rabbit]
 AFTER:  characters   = [Queen, King]
BEFORE:  twin         = DEE
 AFTER:  twin         = DUM

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;方法method反射api&quot;&gt;方法(Method)反射API&lt;/h1&gt;

&lt;p&gt;常用的方法反射API包括：获取方法声明中的类型信息，参数的正式名字，方法的访问修饰符和方法的执行&lt;/p&gt;

&lt;h2 id=&quot;获取方法的类型信息&quot;&gt;获取方法的类型信息&lt;/h2&gt;

&lt;p&gt;Method.getReturnType 获取返回值的类型&lt;br /&gt;
Method.getGenericReturnType 获取携带泛型参数返回值的类型&lt;/p&gt;

&lt;p&gt;Method.getParameterTypes 获取参数的类型数组&lt;br /&gt;
Method.getGenericParameterTypes&lt;/p&gt;

&lt;p&gt;Method.getExceptionTypes 获取异常声明的类型数组&lt;br /&gt;
Method.getGenericExceptionTypes&lt;/p&gt;

&lt;p&gt;Method.isVarArgs() 判断方法是否是可变参数列表&lt;/p&gt;

&lt;h2 id=&quot;获取方法的参数的正式名字&quot;&gt;获取方法的参数的正式名字&lt;/h2&gt;

&lt;p&gt;类编译为.class文件时，参数的名字都会被短名字替换，为了能够用反射获得参数的名字，需要在编译java代码时加上-parameters参数，&lt;/p&gt;

&lt;p&gt;Method.getParameters 获取参数Parameter 对象数组&lt;/p&gt;

&lt;p&gt;Parameter.getType 获取参数的类型&lt;/p&gt;

&lt;p&gt;Parameter.getName 获取参数的名字&lt;/p&gt;

&lt;p&gt;Parameter.getModifiers 获取参数的访问修饰符&lt;/p&gt;

&lt;p&gt;Parameter.isNamePresent 判断class文件中是否包含参数的正式名字&lt;/p&gt;

&lt;h2 id=&quot;获取方法的访问修饰符&quot;&gt;获取方法的访问修饰符&lt;/h2&gt;

&lt;p&gt;Method.getModifiers 获取方法的访问修饰符&lt;/p&gt;

&lt;h2 id=&quot;用method的反射api来调用方法&quot;&gt;用Method的反射API来调用方法&lt;/h2&gt;

&lt;p&gt;Method.invoke 调用方法，传给invoke的第一个参数是一个对象，例如method.invoke(a)相当于非反射调用a.method()，如果调用的静态方法，则参数为invoke的第一个参数null；另外，method.invoke(a, 1, “er”, new int[1]{})相当于a.method(1, “er”, new int[1]{})&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/methodInvocation.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.util.Locale;
import static java.lang.System.out;
import static java.lang.System.err;

public class Deet&amp;lt;T&amp;gt; {
    private boolean testDeet(Locale l) {
	// getISO3Language() may throw a MissingResourceException
	out.format(&quot;Locale = %s, ISO Language Code = %s%n&quot;, l.getDisplayName(), l.getISO3Language());
	return true;
    }

    private int testFoo(Locale l) { return 0; }
    private boolean testBar() { return true; }

    public static void main(String... args) {
	if (args.length != 4) {
	    err.format(&quot;Usage: java Deet &amp;lt;classname&amp;gt; &amp;lt;langauge&amp;gt; &amp;lt;country&amp;gt; &amp;lt;variant&amp;gt;%n&quot;);
	    return;
	}

	try {
	    Class&amp;lt;?&amp;gt; c = Class.forName(args[0]);
	    Object t = c.newInstance();

	    Method[] allMethods = c.getDeclaredMethods();
	    for (Method m : allMethods) {
		String mname = m.getName();
		if (!mname.startsWith(&quot;test&quot;)
		    || (m.getGenericReturnType() != boolean.class)) {
		    continue;
		}
 		Type[] pType = m.getGenericParameterTypes();
 		if ((pType.length != 1)
		    || Locale.class.isAssignableFrom(pType[0].getClass())) {
 		    continue;
 		}

		out.format(&quot;invoking %s()%n&quot;, mname);
		try {
		    m.setAccessible(true);
		    Object o = m.invoke(t, new Locale(args[1], args[2], args[3]));
		    out.format(&quot;%s() returned %b%n&quot;, mname, (Boolean) o);

		// Handle any exceptions thrown by method to be invoked.
		} catch (InvocationTargetException x) {
		    Throwable cause = x.getCause();
		    err.format(&quot;invocation of %s failed: %s%n&quot;,
			       mname, cause.getMessage());
		}
	    }

        // production code should handle these exceptions more gracefully
	} catch (ClassNotFoundException x) {
	    x.printStackTrace();
	} catch (InstantiationException x) {
	    x.printStackTrace();
	} catch (IllegalAccessException x) {
	    x.printStackTrace();
	}
    }
}

测试实例

$ java Deet Deet ja JP JP
invoking testDeet()
Locale = Japanese (Japan,JP), 
ISO Language Code = jpn
testDeet() returned true
$ java Deet Deet xx XX XX
invoking testDeet()
invocation of testDeet failed: 
Couldn't find 3-letter language code for xx

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意可变参数的方法的调用形式稍微有点不同&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/methodInvocation.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Arrays;

public class InvokeMain {
    public static void main(String... args) {
	try {
	    Class&amp;lt;?&amp;gt; c = Class.forName(args[0]);
	    Class[] argTypes = new Class[] { String[].class };
	    Method main = c.getDeclaredMethod(&quot;main&quot;, argTypes);
  	    String[] mainArgs = Arrays.copyOfRange(args, 1, args.length);
	    System.out.format(&quot;invoking %s.main()%n&quot;, c.getName());
	    main.invoke(null, (Object)mainArgs);

        // production code should handle these exceptions more gracefully
	} catch (ClassNotFoundException x) {
	    x.printStackTrace();
	} catch (NoSuchMethodException x) {
	    x.printStackTrace();
	} catch (IllegalAccessException x) {
	    x.printStackTrace();
	} catch (InvocationTargetException x) {
	    x.printStackTrace();
	}
    }
}

测试示例

$ java InvokeMain Deet Deet ja JP JP
invoking Deet.main()
invoking testDeet()
Locale = Japanese (Japan,JP), 
ISO Language Code = jpn
testDeet() returned true

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;对于签名是参数数目可变的函数，其实只是一种语法糖，最终编译结果只是把参数列表变成一个数组，所以使用Method.invoke的时候要传一个数组Object给invoke&lt;/p&gt;

&lt;p&gt;有一点容易让人产生疑惑的是Method的invoke函数签名有新旧两个版本&lt;br /&gt;
invoke(Object obj,Object[] args)&lt;br /&gt;
invoke(Object obj,Object… args)&lt;br /&gt;
数组签名是1.4版本，而可变参数类型是1.5版本，如果没有新版本，那么给多参数的函数传参数就得构造一个Object数组了，但如果不把一个数组转强制换成Object的话，编译器就会指定数组版本，导致参数个数异常；另外，基本类型数组是一个Object类型，因此不需要强制转换&lt;/p&gt;

&lt;p&gt;另外，可以通过Method.setAccessible来禁止对方法访问的权限检查&lt;/p&gt;

&lt;p&gt;注意方法中的泛型变量都会被擦除到边界例如：void method(T t) 运行时实际上是 void method(Object t)&lt;/p&gt;

&lt;h1 id=&quot;构造器constructors的反射api&quot;&gt;构造器(Constructors)的反射API&lt;/h1&gt;

&lt;p&gt;构造器常用的反射API包括：获取构造器声明中的类型信息，构造器的正式名字，构造器的访问修饰符和使用构造器的创建对象&lt;/p&gt;

&lt;h2 id=&quot;获取构造器声明中的类型信息&quot;&gt;获取构造器声明中的类型信息&lt;/h2&gt;

&lt;p&gt;Constructor.getParameterTypes 获取参数的类型数组&lt;br /&gt;
Constructor.getGenericParameterTypes&lt;/p&gt;

&lt;p&gt;Constructor.getExceptionTypes 获取异常声明的类型数组&lt;br /&gt;
Constructor.getGenericExceptionTypes&lt;/p&gt;

&lt;p&gt;Constructor.isVarArgs() 判断方法是否是可变参数列表&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/ctorLocation.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Constructor;
import java.lang.reflect.Type;
import static java.lang.System.out;

public class ConstructorSift {
    public static void main(String... args) {
	try {
	    Class&amp;lt;?&amp;gt; cArg = Class.forName(args[1]);

	    Class&amp;lt;?&amp;gt; c = Class.forName(args[0]);
	    Constructor[] allConstructors = c.getDeclaredConstructors();
	    for (Constructor ctor : allConstructors) {
		Class&amp;lt;?&amp;gt;[] pType  = ctor.getParameterTypes();
		for (int i = 0; i &amp;lt; pType.length; i++) {
		    if (pType[i].equals(cArg)) {
			out.format(&quot;%s%n&quot;, ctor.toGenericString());

			Type[] gpType = ctor.getGenericParameterTypes();
			for (int j = 0; j &amp;lt; gpType.length; j++) {
			    char ch = (pType[j].equals(cArg) ? '*' : ' ');
			    out.format(&quot;%7c%s[%d]: %s%n&quot;, ch,
				       &quot;GenericParameterType&quot;, j, gpType[j]);
			}
			break;
		    }
		}
	    }

        // production code should handle this exception more gracefully
	} catch (ClassNotFoundException x) {
	    x.printStackTrace();
	}
    }
}

测试示例输出

$ java ConstructorSift java.util.Formatter java.util.Locale
public
java.util.Formatter(java.io.OutputStream,java.lang.String,java.util.Locale)
throws java.io.UnsupportedEncodingException
       GenericParameterType[0]: class java.io.OutputStream
       GenericParameterType[1]: class java.lang.String
      *GenericParameterType[2]: class java.util.Locale
public java.util.Formatter(java.lang.String,java.lang.String,java.util.Locale)
throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
       GenericParameterType[0]: class java.lang.String
       GenericParameterType[1]: class java.lang.String
      *GenericParameterType[2]: class java.util.Locale
public java.util.Formatter(java.lang.Appendable,java.util.Locale)
       GenericParameterType[0]: interface java.lang.Appendable
      *GenericParameterType[1]: class java.util.Locale
public java.util.Formatter(java.util.Locale)
      *GenericParameterType[0]: class java.util.Locale
public java.util.Formatter(java.io.File,java.lang.String,java.util.Locale)
throws java.io.FileNotFoundException,java.io.UnsupportedEncodingException
       GenericParameterType[0]: class java.io.File
       GenericParameterType[1]: class java.lang.String
      *GenericParameterType[2]: class java.util.Locale

$ java ConstructorSift java.lang.String &quot;[C&quot;
java.lang.String(int,int,char[])
       GenericParameterType[0]: int
       GenericParameterType[1]: int
      *GenericParameterType[2]: class [C
public java.lang.String(char[],int,int)
      *GenericParameterType[0]: class [C
       GenericParameterType[1]: int
       GenericParameterType[2]: int
public java.lang.String(char[])
      *GenericParameterType[0]: class [C
      
$ java ConstructorSift java.lang.ProcessBuilder &quot;[Ljava.lang.String;&quot;
public java.lang.ProcessBuilder(java.lang.String[])
      *GenericParameterType[0]: class [Ljava.lang.String;


&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取构造器的访问修饰符&quot;&gt;获取构造器的访问修饰符&lt;/h2&gt;

&lt;p&gt;Constructor.getModifiers&lt;/p&gt;

&lt;h2 id=&quot;创建对象&quot;&gt;创建对象&lt;/h2&gt;

&lt;p&gt;Constructor.newInstance 创建一个对象&lt;/p&gt;

&lt;p&gt;Class.newInstance和Constructor.newInstance反射API都能创建一个对象，但前者只能调用不带参数的构造器，且要满足访问修饰符的约束；通过修改访问权限可以使用Constructor.newInstance访问private的构造函数&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/member/ctorInstance.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import static java.lang.System.out;

class EmailAliases {
    private Set&amp;lt;String&amp;gt; aliases;
    private EmailAliases(HashMap&amp;lt;String, String&amp;gt; h) {
	aliases = h.keySet();
    }

    public void printKeys() {
	out.format(&quot;Mail keys:%n&quot;);
	for (String k : aliases)
	    out.format(&quot;  %s%n&quot;, k);
    }
}

public class RestoreAliases {

    private static Map&amp;lt;String, String&amp;gt; defaultAliases = new HashMap&amp;lt;String, String&amp;gt;();
    static {
	defaultAliases.put(&quot;Duke&quot;, &quot;duke@i-love-java&quot;);
	defaultAliases.put(&quot;Fang&quot;, &quot;fang@evil-jealous-twin&quot;);
    }

    public static void main(String... args) {
	try {
	    Constructor ctor = EmailAliases.class.getDeclaredConstructor(HashMap.class);
	    ctor.setAccessible(true);
	    EmailAliases email = (EmailAliases)ctor.newInstance(defaultAliases);
	    email.printKeys();

        // production code should handle these exceptions more gracefully
	} catch (InstantiationException x) {
	    x.printStackTrace();
	} catch (IllegalAccessException x) {
	    x.printStackTrace();
	} catch (InvocationTargetException x) {
	    x.printStackTrace();
	} catch (NoSuchMethodException x) {
	    x.printStackTrace();
	}
    }
}

测试示例

$ java RestoreAliases
Mail keys:
  Duke
  Fang
  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;数组array反射api&quot;&gt;数组(Array)反射API&lt;/h1&gt;

&lt;p&gt;常用的数组反射API包括：获取数组的类型，数组元素的类型，创建数组，获取和设置数组元素&lt;/p&gt;

&lt;h2 id=&quot;获取数组和数组元素的类型&quot;&gt;获取数组和数组元素的类型&lt;/h2&gt;

&lt;p&gt;Class.isArray 判断一个对象是否为数组&lt;br /&gt;
Class.getComponentType 获取数组的元素的类型&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/special/arrayComponents.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Field;
import java.lang.reflect.Type;
import static java.lang.System.out;

public class ArrayFind {
    public static void main(String... args) {
	boolean found = false;
 	try {
	    Class&amp;lt;?&amp;gt; cls = Class.forName(args[0]);
	    Field[] flds = cls.getDeclaredFields();
	    for (Field f : flds) {
 		Class&amp;lt;?&amp;gt; c = f.getType();
		if (c.isArray()) {
		    found = true;
		    out.format(&quot;%s%n&quot;
                               + &quot;           Field: %s%n&quot;
			       + &quot;            Type: %s%n&quot;
			       + &quot;  Component Type: %s%n&quot;,
			       f, f.getName(), c, c.getComponentType());
		}
	    }
	    if (!found) {
		out.format(&quot;No array fields%n&quot;);
	    }

        // production code should handle this exception more gracefully
 	} catch (ClassNotFoundException x) {
	    x.printStackTrace();
	}
    }
}

测试示例

$ java ArrayFind java.lang.Throwable
private java.lang.StackTraceElement[] java.lang.Throwable.stackTrace
           Field: stackTrace
            Type: class [Ljava.lang.StackTraceElement;
  Component Type: class java.lang.StackTraceElement
  
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;创建数组&quot;&gt;创建数组&lt;/h2&gt;

&lt;p&gt;Array.newInstance 创建多维数组&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/special/arrayInstance.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Array;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.Arrays;
import static java.lang.System.out;

public class ArrayCreator {
    private static String s = &quot;java.math.BigInteger bi[] = { 123, 234, 345 }&quot;;
    private static Pattern p = Pattern.compile(&quot;^\\s*(\\S+)\\s*\\w+\\[\\].*\\{\\s*([^}]+)\\s*\\}&quot;);

    public static void main(String... args) {
        Matcher m = p.matcher(s);

        if (m.find()) {
            String cName = m.group(1);
            String[] cVals = m.group(2).split(&quot;[\\s,]+&quot;);
            int n = cVals.length;

            try {
                Class&amp;lt;?&amp;gt; c = Class.forName(cName);
                Object o = Array.newInstance(c, n);
                for (int i = 0; i &amp;lt; n; i++) {
                    String v = cVals[i];
                    Constructor ctor = c.getConstructor(String.class);
                    Object val = ctor.newInstance(v);
                    Array.set(o, i, val);
                }

                Object[] oo = (Object[])o;
                out.format(&quot;%s[] = %s%n&quot;, cName, Arrays.toString(oo));

            // production code should handle these exceptions more gracefully
            } catch (ClassNotFoundException x) {
                x.printStackTrace();
            } catch (NoSuchMethodException x) {
                x.printStackTrace();
            } catch (IllegalAccessException x) {
                x.printStackTrace();
            } catch (InstantiationException x) {
                x.printStackTrace();
            } catch (InvocationTargetException x) {
                x.printStackTrace();
            }
        }
    }
}
$ java ArrayCreator
java.math.BigInteger [] = [123, 234, 345]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;获取和设置数组元素&quot;&gt;获取和设置数组元素&lt;/h2&gt;

&lt;p&gt;Array.set* 设置基本元素&lt;br /&gt;
Array.get* 获取基本元素&lt;br /&gt;
Array.set 设置引用元素&lt;br /&gt;
Array.get 获取引用元素&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/special/arraySetGet.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.lang.reflect.Array;
import static java.lang.System.out;

public class CreateMatrix {
    public static void main(String... args) {
        Object matrix = Array.newInstance(int.class, 2, 2);
        Object row0 = Array.get(matrix, 0);
        Object row1 = Array.get(matrix, 1);

        Array.setInt(row0, 0, 1);
        Array.setInt(row0, 1, 2);
        Array.setInt(row1, 0, 3);
        Array.setInt(row1, 1, 4);

        for (int i = 0; i &amp;lt; 2; i++)
            for (int j = 0; j &amp;lt; 2; j++)
                out.format(&quot;matrix[%d][%d] = %d%n&quot;, i, j, ((int[][])matrix)[i][j]);
    }
}

$ java CreateMatrix
matrix[0][0] = 1
matrix[0][1] = 2
matrix[1][0] = 3
matrix[1][1] = 4

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;枚举enum反射api&quot;&gt;枚举(Enum)反射API&lt;/h1&gt;

&lt;p&gt;常用枚举反射API包括&lt;/p&gt;

&lt;p&gt;Class.isEnum 判断类型是否为枚举&lt;br /&gt;
Class.getEnumConstants 获取一个枚举类型的所有枚举值&lt;br /&gt;
Field.isEnumConstant 判断一个域是否为枚举常量&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/special/enumMembers.html&quot;&gt;完整代码示例&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import java.util.Arrays;
import static java.lang.System.out;

enum Eon { HADEAN, ARCHAEAN, PROTEROZOIC, PHANEROZOIC }

public class EnumConstants {
    public static void main(String... args) {
	try {
	    Class&amp;lt;?&amp;gt; c = (args.length == 0 ? Eon.class : Class.forName(args[0]));
	    out.format(&quot;Enum name:  %s%nEnum constants:  %s%n&quot;,
		       c.getName(), Arrays.asList(c.getEnumConstants()));
	    if (c == Eon.class)
		out.format(&quot;  Eon.values():  %s%n&quot;,
			   Arrays.asList(Eon.values()));

        // production code should handle this exception more gracefully
	} catch (ClassNotFoundException x) {
	    x.printStackTrace();
	}
    }
}

测试示例

$ java EnumConstants java.lang.annotation.RetentionPolicy
Enum name:  java.lang.annotation.RetentionPolicy
Enum constants:  [SOURCE, CLASS, RUNTIME]
$ java EnumConstants java.util.concurrent.TimeUnit
Enum name:  java.util.concurrent.TimeUnit
Enum constants:  [NANOSECONDS, MICROSECONDS, 
                  MILLISECONDS, SECONDS, 
                  MINUTES, HOURS, DAYS]

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/reflect/index.html&quot;&gt;The Reflection API&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 12 May 2017 10:00:00 +0800</pubDate>
        <link>/2017/05/12/java%E5%8F%8D%E5%B0%84api%E7%AE%80%E4%BB%8B/</link>
        <guid isPermaLink="true">/2017/05/12/java%E5%8F%8D%E5%B0%84api%E7%AE%80%E4%BB%8B/</guid>
        
        <category>Reflection</category>
        
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>《沟通的艺术》读书笔记</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#第一章-人际沟通入门&quot; id=&quot;markdown-toc-第一章-人际沟通入门&quot;&gt;第一章 人际沟通入门&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#11-我们为什么需要沟通&quot; id=&quot;markdown-toc-11-我们为什么需要沟通&quot;&gt;1.1 我们为什么需要沟通&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#12-沟通的历程&quot; id=&quot;markdown-toc-12-沟通的历程&quot;&gt;1.2 沟通的历程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#13-沟通的原则与迷思&quot; id=&quot;markdown-toc-13-沟通的原则与迷思&quot;&gt;1.3 沟通的原则与迷思&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#14-人际沟通的本质&quot; id=&quot;markdown-toc-14-人际沟通的本质&quot;&gt;1.4 人际沟通的本质&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#15-如何成为沟通高手&quot; id=&quot;markdown-toc-15-如何成为沟通高手&quot;&gt;1.5 如何成为沟通高手&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第二章-认同自我的塑造和展现&quot; id=&quot;markdown-toc-第二章-认同自我的塑造和展现&quot;&gt;第二章 认同：自我的塑造和展现&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#21-沟通和自我概念&quot; id=&quot;markdown-toc-21-沟通和自我概念&quot;&gt;2.1 沟通和自我概念&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#22-自我的展现沟通作为认同管理&quot; id=&quot;markdown-toc-22-自我的展现沟通作为认同管理&quot;&gt;2.2 自我的展现：沟通作为认同管理&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三章-知觉看到什么就是什么&quot; id=&quot;markdown-toc-第三章-知觉看到什么就是什么&quot;&gt;第三章 知觉：看到什么就是什么&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#31-知觉历程&quot; id=&quot;markdown-toc-31-知觉历程&quot;&gt;3.1 知觉历程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#32-影响知觉的因素&quot; id=&quot;markdown-toc-32-影响知觉的因素&quot;&gt;3.2 影响知觉的因素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#33-知觉的倾向&quot; id=&quot;markdown-toc-33-知觉的倾向&quot;&gt;3.3 知觉的倾向&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#34-知觉检验&quot; id=&quot;markdown-toc-34-知觉检验&quot;&gt;&lt;em&gt;3.4 知觉检验&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#35-同理心与沟通&quot; id=&quot;markdown-toc-35-同理心与沟通&quot;&gt;3.5 同理心与沟通&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第四章-情绪适时适地的产达感觉&quot; id=&quot;markdown-toc-第四章-情绪适时适地的产达感觉&quot;&gt;第四章 情绪：适时适地的产达感觉&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#41-情绪是什么&quot; id=&quot;markdown-toc-41-情绪是什么&quot;&gt;4.1 情绪是什么？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#42-影响情绪表达的因素&quot; id=&quot;markdown-toc-42-影响情绪表达的因素&quot;&gt;4.2 影响情绪表达的因素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#43-情绪表达的原则&quot; id=&quot;markdown-toc-43-情绪表达的原则&quot;&gt;4.3 情绪表达的原则&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#44-管理困扰的情绪&quot; id=&quot;markdown-toc-44-管理困扰的情绪&quot;&gt;4.4 管理困扰的情绪&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第五章-语言既是障碍又是桥梁&quot; id=&quot;markdown-toc-第五章-语言既是障碍又是桥梁&quot;&gt;第五章 语言：既是障碍又是桥梁&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#51-语言是符号&quot; id=&quot;markdown-toc-51-语言是符号&quot;&gt;5.1 语言是符号&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#52-语言的影响&quot; id=&quot;markdown-toc-52-语言的影响&quot;&gt;5.2 语言的影响&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#53-性别与语言&quot; id=&quot;markdown-toc-53-性别与语言&quot;&gt;5.3 性别与语言&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#54-语言与文化&quot; id=&quot;markdown-toc-54-语言与文化&quot;&gt;5.4 语言与文化&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第六章-非口语沟通超越字词之外的信息&quot; id=&quot;markdown-toc-第六章-非口语沟通超越字词之外的信息&quot;&gt;第六章 非口语沟通：超越字词之外的信息&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#61-非口语沟通的特征&quot; id=&quot;markdown-toc-61-非口语沟通的特征&quot;&gt;6.1 非口语沟通的特征&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#62-影响非口语沟通的元素&quot; id=&quot;markdown-toc-62-影响非口语沟通的元素&quot;&gt;6.2 影响非口语沟通的元素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#63-非口语沟通的类型&quot; id=&quot;markdown-toc-63-非口语沟通的类型&quot;&gt;6.3 非口语沟通的类型&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第七章-倾听不只是听见&quot; id=&quot;markdown-toc-第七章-倾听不只是听见&quot;&gt;第七章 倾听：不只是听见&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#71-倾听的定义&quot; id=&quot;markdown-toc-71-倾听的定义&quot;&gt;7.1 倾听的定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#72-倾听过程的元素&quot; id=&quot;markdown-toc-72-倾听过程的元素&quot;&gt;7.2 倾听过程的元素&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#73-倾听的挑战&quot; id=&quot;markdown-toc-73-倾听的挑战&quot;&gt;7.3 倾听的挑战&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#74-倾听反应的类型&quot; id=&quot;markdown-toc-74-倾听反应的类型&quot;&gt;7.4 倾听反应的类型&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第八章-发展关系动力&quot; id=&quot;markdown-toc-第八章-发展关系动力&quot;&gt;第八章 发展关系动力&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#81-我们为什么要建立关系&quot; id=&quot;markdown-toc-81-我们为什么要建立关系&quot;&gt;8.1 我们为什么要建立关系&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#82-关系发展与维系的模式&quot; id=&quot;markdown-toc-82-关系发展与维系的模式&quot;&gt;8.2 关系发展与维系的模式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#83-对关系做沟通&quot; id=&quot;markdown-toc-83-对关系做沟通&quot;&gt;8.3 对关系做沟通&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第九章-表达亲密感&quot; id=&quot;markdown-toc-第九章-表达亲密感&quot;&gt;第九章 表达亲密感&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#91-关系中的亲密&quot; id=&quot;markdown-toc-91-关系中的亲密&quot;&gt;9.1 关系中的亲密&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#92-关系中的自我袒露&quot; id=&quot;markdown-toc-92-关系中的自我袒露&quot;&gt;9.2 关系中的自我袒露&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#93-自我袒露以外的其他选择&quot; id=&quot;markdown-toc-93-自我袒露以外的其他选择&quot;&gt;9.3 自我袒露以外的其他选择&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第十章-增进沟通气氛&quot; id=&quot;markdown-toc-第十章-增进沟通气氛&quot;&gt;第十章 增进沟通气氛&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#101-沟通气氛正向关系的关键&quot; id=&quot;markdown-toc-101-沟通气氛正向关系的关键&quot;&gt;10.1 沟通气氛：正向关系的关键&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#102-防卫原因与对策&quot; id=&quot;markdown-toc-102-防卫原因与对策&quot;&gt;10.2 防卫：原因与对策&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#103-保留面子清晰信息处方&quot; id=&quot;markdown-toc-103-保留面子清晰信息处方&quot;&gt;10.3 保留面子：清晰信息处方&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#104-对批评以不防卫回应&quot; id=&quot;markdown-toc-104-对批评以不防卫回应&quot;&gt;10.4 对批评以不防卫回应&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第十一章-处理人际冲突&quot; id=&quot;markdown-toc-第十一章-处理人际冲突&quot;&gt;第十一章 处理人际冲突&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#111-冲突的本质&quot; id=&quot;markdown-toc-111-冲突的本质&quot;&gt;11.1 冲突的本质&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#112-冲突的类型&quot; id=&quot;markdown-toc-112-冲突的类型&quot;&gt;11.2 冲突的类型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#113-关系系统中的冲突&quot; id=&quot;markdown-toc-113-关系系统中的冲突&quot;&gt;11.3 关系系统中的冲突&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#114-冲突类型的变项&quot; id=&quot;markdown-toc-114-冲突类型的变项&quot;&gt;11.4 冲突类型的变项&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#115-建设性处理冲突的技巧&quot; id=&quot;markdown-toc-115-建设性处理冲突的技巧&quot;&gt;11.5 建设性处理冲突的技巧&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#116-建设性处理冲突的技巧提问和释义&quot; id=&quot;markdown-toc-116-建设性处理冲突的技巧提问和释义&quot;&gt;11.6 建设性处理冲突的技巧：提问和释义&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;《沟通的艺术》读书笔记&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;第一章-人际沟通入门&quot;&gt;第一章 人际沟通入门&lt;/h1&gt;

&lt;h2 id=&quot;11-我们为什么需要沟通&quot;&gt;1.1 我们为什么需要沟通&lt;/h2&gt;
&lt;p&gt;生理需求：人不能离开其他人&lt;br /&gt;
认同需求：人通过沟通和互动来确定对自己的认知&lt;br /&gt;
社交需求：沟通能有效解决很多社交上的问题&lt;br /&gt;
实际目标：沟通是实现人生中各种目标(生理，安全，社交，工作，人生)的有效手段&lt;/p&gt;

&lt;h2 id=&quot;12-沟通的历程&quot;&gt;1.2 沟通的历程&lt;/h2&gt;
&lt;p&gt;沟通包括哪些步骤或过程，学术上通过使用各种模型来描述&lt;br /&gt;
线性观&lt;br /&gt;
交流观&lt;br /&gt;
沟通的定义：沟通是一种交流的过程，其参与者处于不同但是有所重叠的背景下，经由交换信息而建立关系，关系品质会受到外在的、生理的和心理的噪音所干扰。&lt;/p&gt;

&lt;h2 id=&quot;13-沟通的原则与迷思&quot;&gt;1.3 沟通的原则与迷思&lt;/h2&gt;

&lt;p&gt;沟通的原则&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;沟通可以是有目的或无目的的行为&lt;/li&gt;
  &lt;li&gt;沟通是不可理转的&lt;/li&gt;
  &lt;li&gt;人不可能不沟通&lt;/li&gt;
  &lt;li&gt;沟通是不可复制的&lt;/li&gt;
  &lt;li&gt;沟通同时具有内容和关系两个向度&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沟通的迷思&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;沟通的越多不见得沟通的越好，例如负面沟通越多越不好&lt;/li&gt;
  &lt;li&gt;意思不在字眼里，例如沟通不一定就是要把话说出来&lt;/li&gt;
  &lt;li&gt;成功的沟通并不表示彼此了解&lt;/li&gt;
  &lt;li&gt;人的反应并非针对单一事件或特定的对象&lt;/li&gt;
  &lt;li&gt;沟通不会解决所有问题&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;14-人际沟通的本质&quot;&gt;1.4 人际沟通的本质&lt;/h2&gt;

&lt;p&gt;两周人际沟通的观点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数量&lt;/li&gt;
  &lt;li&gt;质量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;科技与人际沟通&lt;/p&gt;

&lt;p&gt;个人化与非个人化的沟通：平衡之道&lt;/p&gt;

&lt;h2 id=&quot;15-如何成为沟通高手&quot;&gt;1.5 如何成为沟通高手&lt;/h2&gt;

&lt;p&gt;沟通能力：某种程度上能达到个人的目标，并且理想上要能维持和增进关系&lt;/p&gt;

&lt;p&gt;沟通高手的特质：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拥有多样性的行为反应&lt;/li&gt;
  &lt;li&gt;挑选恰当行为的能力&lt;/li&gt;
  &lt;li&gt;表现行为的技巧&lt;/li&gt;
  &lt;li&gt;认知的复杂度&lt;/li&gt;
  &lt;li&gt;自我监控&lt;/li&gt;
  &lt;li&gt;承诺&lt;/li&gt;
  &lt;li&gt;跨文化的沟通能力
    &lt;ul&gt;
      &lt;li&gt;动机&lt;/li&gt;
      &lt;li&gt;容忍模糊性&lt;/li&gt;
      &lt;li&gt;开放心胸&lt;/li&gt;
      &lt;li&gt;知识和技巧&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第二章-认同自我的塑造和展现&quot;&gt;第二章 认同：自我的塑造和展现&lt;/h1&gt;

&lt;h2 id=&quot;21-沟通和自我概念&quot;&gt;2.1 沟通和自我概念&lt;/h2&gt;

&lt;p&gt;自我概念：对自己持有的相当稳定可靠的直觉，包括身体特征、状态、情感等&lt;br /&gt;
自尊是自我概念的一部分，是对自我价值的评估&lt;br /&gt;
高自尊会对沟通有较正向的预期，这些预期增加沟通的成功率，因此对正面预期会强化沟通，低自尊反之&lt;br /&gt;
生物性决定了一个人的性格，而性格会对自我概念产生重大影响，也会对沟通产生重要影响&lt;br /&gt;
社会中对个人的评价也是影响自我概念的重要因素&lt;/p&gt;

&lt;p&gt;自我概念的特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自我概念是主观的，有可能不能客观的反应真实的状态：以往的经历、他人错误的回应、过于期待完美 都会影响自我评价，自尊的高低会对沟通行为产生正向和反向的影响&lt;/li&gt;
  &lt;li&gt;自我概念会抗拒改变，更倾向接受符合现存自我概念的信息，抗拒修正不正确的自我概念&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;文化，性别都会影响自我概念的塑造&lt;/p&gt;

&lt;p&gt;自我应验预言会影响自我概念从而沟通&lt;br /&gt;
自我应验预言的步骤：期待某事某结果，表现出与期望一致的行为，某事发生，强化期待&lt;br /&gt;
自我应验预言包括自我强加语言和别人强加语言，分别对应着自己期待某事和别人期待&lt;/p&gt;

&lt;p&gt;改变自我概念的一些&lt;strong&gt;方法&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拥有真实的自我感：罗列出自己的优缺点，不要过于苛刻，可以找别人帮忙确认&lt;/li&gt;
  &lt;li&gt;拥有切合实际的期待：不要对沟通表现期待过高，要符合现有的沟通能力&lt;/li&gt;
  &lt;li&gt;拥有改变的意愿：要切实的行动去改变&lt;/li&gt;
  &lt;li&gt;拥有改变的技巧：通过阅读和其他人的指导学习技巧，通过仔细观察别人来取长补短&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-自我的展现沟通作为认同管理&quot;&gt;2.2 自我的展现：沟通作为认同管理&lt;/h2&gt;

&lt;p&gt;自我有隐私的自我和公开的自我&lt;/p&gt;

&lt;p&gt;认同管理是用来影响别人对自己观感的策略性沟通，特征包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;人致力于构建多元认同，就是让别人对自己有不同方面的好印象，例如幽默、稳重等等&lt;/li&gt;
  &lt;li&gt;认同管理是一个双向的过程，双方都会进行着认同管理&lt;/li&gt;
  &lt;li&gt;认同管理可以深谋远虑或不知不觉&lt;/li&gt;
  &lt;li&gt;认同管理会因为情境不同而不同，通过自我管理来达到认同认同管理的目的&lt;/li&gt;
  &lt;li&gt;自我管理的程度因人不同，高度自我管理的人在沟通中能更好的进行认同管理&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;为什么需要认同管理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开始经营关系&lt;/li&gt;
  &lt;li&gt;获得别人的顺从&lt;/li&gt;
  &lt;li&gt;保证别人的颜面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何进行认同管理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;面对面印象管理：举止、外貌和物品；举止包括语言和非语言，外貌包括着装、打扮等，物品包括车、表等&lt;/li&gt;
  &lt;li&gt;非面对面：通过文字表达等&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第三章-知觉看到什么就是什么&quot;&gt;第三章 知觉：看到什么就是什么&lt;/h1&gt;

&lt;h2 id=&quot;31-知觉历程&quot;&gt;3.1 知觉历程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;选择：选择引起注意的主题，例如强烈的刺激，重复的刺激，个人动机&lt;/li&gt;
  &lt;li&gt;组织：根据自己的经验和想法来理解别人和沟通
    &lt;ul&gt;
      &lt;li&gt;过程中存在的问题有偏见，断句；解决方法去除偏见、认出双发不同观点考虑有益的方法&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;诠释：理解话中的特定意义&lt;/li&gt;
  &lt;li&gt;协商：互相交流，包括意见相阻或共同理解达成一致&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-影响知觉的因素&quot;&gt;3.2 影响知觉的因素&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;生理因素&lt;/li&gt;
  &lt;li&gt;文化差异&lt;/li&gt;
  &lt;li&gt;社会角色&lt;/li&gt;
  &lt;li&gt;自我概念&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-知觉的倾向&quot;&gt;3.3 知觉的倾向&lt;/h2&gt;

&lt;p&gt;除了影响知觉的因素以外，人在诠释他人的行为还会有倾向&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对人严厉，对己仁慈&lt;/li&gt;
  &lt;li&gt;强调别人的缺点&lt;/li&gt;
  &lt;li&gt;最明显的最有力，问题在于最重要的因素不一定最明显&lt;/li&gt;
  &lt;li&gt;先入为主&lt;/li&gt;
  &lt;li&gt;以己之心度人之腹&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-知觉检验&quot;&gt;&lt;em&gt;3.4 知觉检验&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;知觉检验是一种帮助理解别人的好方法，完整的程序包括3部分：描述你注意到的行为，列出来关于此行为至少两种可能的诠释，请求对方对行为诠释作澄清&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;知觉检验的考量&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;完整性：某些情况下，知觉检验不需囊括所有程序&lt;/li&gt;
  &lt;li&gt;非口语的一致性：你的表情语调应该是真诚的，开放的&lt;/li&gt;
  &lt;li&gt;文化支配：在高语境敏感文化(亚拉)里会把知觉检验这种直白的方式视为潜在的窘境，需要用间接的方式来了解暧昧信息&lt;/li&gt;
  &lt;li&gt;保留颜面：知觉检验的多种诠释有时能保留别人的脸面&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;35-同理心与沟通&quot;&gt;3.5 同理心与沟通&lt;/h2&gt;

&lt;p&gt;知觉检验能澄清暧昧的信息，但不一定能了解背后的原因，需要设身处地&lt;/p&gt;

&lt;p&gt;&lt;em&gt;同理心&lt;/em&gt;是从某人的角度来体验世界，重新创造个人观点的能力&lt;/p&gt;

&lt;p&gt;同理心有三个面向：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;同理心包含获得知觉，一种采用别人观点的尝试，这需要中止你的论断，将自己的意见放在一边，同时试着去了解对方&lt;/li&gt;
  &lt;li&gt;同理心的情感面向，使我们更贴近的去体验别人的感受&lt;/li&gt;
  &lt;li&gt;同理心第三面向是真诚的关心对方的福祉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有同理心不一定需要同意别人的观点，也不可能完全同理&lt;/p&gt;

&lt;p&gt;&lt;em&gt;帮助建立同理心的&lt;strong&gt;方法&lt;/strong&gt;：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;枕头法：站在“我对你错”、“你对我错”、“双方都对，双方都错”、“议题不重要”、“四个立场都具有真理”&lt;br /&gt;
这个方法让人全面的考虑到所有立场的优点，并发现真正重要的东西，并且在最终确定立场的时候可以不影响到更重要的东西&lt;/p&gt;

&lt;h1 id=&quot;第四章-情绪适时适地的产达感觉&quot;&gt;第四章 情绪：适时适地的产达感觉&lt;/h1&gt;

&lt;h2 id=&quot;41-情绪是什么&quot;&gt;4.1 情绪是什么？&lt;/h2&gt;

&lt;p&gt;情绪通常包括几个因素&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生理因素：血压、心跳等&lt;/li&gt;
  &lt;li&gt;非口语因素：表情，手势等&lt;/li&gt;
  &lt;li&gt;认知的解释：对认知的不同解释体现不同的情绪会影响&lt;/li&gt;
  &lt;li&gt;口语表达：不同的口语表达代表不同的情绪强度&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-影响情绪表达的因素&quot;&gt;4.2 影响情绪表达的因素&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;性格：外向内向&lt;/li&gt;
  &lt;li&gt;文化：集体主义和个人主义&lt;/li&gt;
  &lt;li&gt;性别：男女&lt;/li&gt;
  &lt;li&gt;社会习俗：&lt;/li&gt;
  &lt;li&gt;自我坦露的不安：&lt;/li&gt;
  &lt;li&gt;情绪感染力：情绪是能传染的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;43-情绪表达的原则&quot;&gt;4.3 情绪表达的原则&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;一些帮助决定何时和如何表达情绪的建议&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;辨认感觉：尝试辨认自己的情绪，能有助于自已意识到自己会不合理发泄情绪&lt;/li&gt;
  &lt;li&gt;辨识感觉，说话和行动之间的不同：了解感觉和发泄情绪之间的差异有助于在失序的情景中建设性的表达自己&lt;/li&gt;
  &lt;li&gt;以口语阐明情绪：想表达情绪是要用能清楚表达情绪的词汇，而婉转表达可能会让别人不理解你的情绪&lt;/li&gt;
  &lt;li&gt;分享多样的情绪：人总是只会表达出最负面的情绪而不是全盘的情绪，这导致对方没法全面了解你的情绪&lt;/li&gt;
  &lt;li&gt;评估何时与何处表达情绪：一阵强烈的情绪涌上的瞬间并不是说出口的最佳时机；处理情绪需要花很多时间和精力，应该要专心的进行处理，并保证对方也一样；有些时候最好还是不要表达情绪&lt;/li&gt;
  &lt;li&gt;对自己的情绪负责：你。。。我觉得。。。&lt;/li&gt;
  &lt;li&gt;选择合适的渠道&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;44-管理困扰的情绪&quot;&gt;4.4 管理困扰的情绪&lt;/h2&gt;

&lt;p&gt;有助益情绪有利于沟通，而无助益情绪则会影响沟通，它们之间的区别是一种情绪的强度和持续性&lt;br /&gt;
无助益的情绪对于 缓解难受 和 增进关系 都没好处&lt;/p&gt;

&lt;p&gt;无助益情绪的来源：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生理因素&lt;/li&gt;
  &lt;li&gt;情绪记忆&lt;/li&gt;
  &lt;li&gt;自我内言：事件 认知 感觉&lt;/li&gt;
  &lt;li&gt;非理性的认知导致不良的自我内言
    &lt;ul&gt;
      &lt;li&gt;完美主义，甚至弄虚作假伤害自尊&lt;/li&gt;
      &lt;li&gt;过于追求别人的认同，甚至放弃自己的原则和需求&lt;/li&gt;
      &lt;li&gt;理所当然，把一切不合意的事情看得理所当然，可以不合意但应该付诸行动而不应该觉得理所当然&lt;/li&gt;
      &lt;li&gt;过度推论：夸大缺点，过于聚焦处理结果的不足而忽视了问题的复杂性&lt;/li&gt;
      &lt;li&gt;因果论的谬误：认为情绪是由他人引起的而非一个人的非理性的自我内言&lt;/li&gt;
      &lt;li&gt;无助的谬误：麻木的认为“不能”，其实是不愿意改变&lt;/li&gt;
      &lt;li&gt;灾难性预期的谬误：&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;减少无助益情绪的方法&lt;/strong&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;监控你的情绪反应&lt;/li&gt;
  &lt;li&gt;注意情绪是由什么事件引起的：这些事件有时不是那么显而易见，或不是单一事件引起的&lt;/li&gt;
  &lt;li&gt;记录你的自我内言：这是一个一开始困难需要不停锻炼的&lt;/li&gt;
  &lt;li&gt;驳斥你的非理性观念&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第五章-语言既是障碍又是桥梁&quot;&gt;第五章 语言：既是障碍又是桥梁&lt;/h1&gt;

&lt;h2 id=&quot;51-语言是符号&quot;&gt;5.1 语言是符号&lt;/h2&gt;

&lt;p&gt;语言只是符号，但每个人对不同的符号有不同的理解&lt;/p&gt;

&lt;h2 id=&quot;52-语言的影响&quot;&gt;5.2 语言的影响&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;命名与认同：大家对名字有一些共同的理解&lt;/li&gt;
  &lt;li&gt;联盟关系：大家趋向使用相同的交流方式来构建关系，而用俚语来与其他人区分&lt;/li&gt;
  &lt;li&gt;权力：用低权力的语言避免损害人际关系，但用权威性的语言可能会最快的达到效果&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;打岔性语言：一些语言上的不良会增加冲突&lt;/em&gt;
    &lt;ul&gt;
      &lt;li&gt;事实与意见的混淆：事实是无可争辩的，意见则是主观的，当表达意见时把它当事实来表达会引发不必要的争论，可以加上“我觉得”，“在我看来”会减少敌对性&lt;/li&gt;
      &lt;li&gt;事实与推论的混淆：推论性陈述是指在一切都没定的情况下就做出结论，当我们当推论作为事实是会引起争议&lt;/li&gt;
      &lt;li&gt;情绪性的语言：情绪性语言表面上在陈述事实，但实际上表明了说话者的态度和意见，更容易引发争议，可以用中性字眼来更精确的表达，也更容易被接受&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;语言的责任性：
    &lt;ul&gt;
      &lt;li&gt;“这…”有托词的意味，而“我”则为表达的感觉负责&lt;/li&gt;
      &lt;li&gt;“但是”是一种保留颜面的策略，要清楚的表达是最好不要用&lt;/li&gt;
      &lt;li&gt;“疑问句”一些是请求，而一些是避免成为我的宣告的语言手段&lt;/li&gt;
      &lt;li&gt;“我”和“你”，使用“你”的时候很容易表达出对别人下诊断，会激起别人的戒心，也会造成地位不对等的错觉；使用“我”提供比较精确，不那么挑拨的方式来表达不满，表明说话者愿意为不满负责，“我”陈述一般包含四部分：他人的行为，你的诠释，你的感受，他人行为对你的后续影响；但即使在用“我”表达时，你的情绪，手势等非语言全都在表达出“你”时，也会成为“你”的效果；但即使使用“我”来表达不满也不见的好，因为没有人喜欢自己不对，并且“我”还会被认为以自我为中心，所以最好节制使用“我”&lt;/li&gt;
      &lt;li&gt;“我们”	：使用“我们”时含有表达的议题是双方共同关心并负责的&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/人称代名词的使用和效果.png&quot; alt=&quot;人称代名词的使用和效果&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;53-性别与语言&quot;&gt;5.3 性别与语言&lt;/h2&gt;

&lt;p&gt;构成男女沟通差异的一些因素&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;内容
    &lt;ul&gt;
      &lt;li&gt;共同：工作、电视、电影、人的外貌、八卦&lt;/li&gt;
      &lt;li&gt;女性：个人、家事、关系、家庭、健康、实物、穿着&lt;/li&gt;
      &lt;li&gt;男性：音乐、时事、运动、事业&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;沟通的理由
    &lt;ul&gt;
      &lt;li&gt;女性：获得支持、维持关系&lt;/li&gt;
      &lt;li&gt;男性：解决问题、叙述喜欢的事情&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;对话的形式
    &lt;ul&gt;
      &lt;li&gt;男性：直接、任务取向的&lt;/li&gt;
      &lt;li&gt;女性：间接的、详述的、关系去向&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;非性别因素&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;54-语言与文化&quot;&gt;5.4 语言与文化&lt;/h2&gt;

&lt;p&gt;构成不同文化的语言沟通差异的一些因素&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;口语沟通的形式
    &lt;ul&gt;
      &lt;li&gt;低语境敏感文化和高语境敏感文化&lt;/li&gt;
      &lt;li&gt;清楚和模糊&lt;/li&gt;
      &lt;li&gt;正式和非正式用语&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;语言和世界观&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第六章-非口语沟通超越字词之外的信息&quot;&gt;第六章 非口语沟通：超越字词之外的信息&lt;/h1&gt;

&lt;p&gt;非口语沟通的定义是“通过非语言途径所呈现的信息”&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/沟通的形式.png&quot; alt=&quot;沟通的形式&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;61-非口语沟通的特征&quot;&gt;6.1 非口语沟通的特征&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;非口语沟通比口语沟通传达的信息量更多&lt;/li&gt;
  &lt;li&gt;所有的行为都包含信息&lt;/li&gt;
  &lt;li&gt;非口语沟通可以作为认同管理的手段&lt;/li&gt;
  &lt;li&gt;非口语沟通和口语沟通相结合表达出更丰富的意思&lt;/li&gt;
  &lt;li&gt;非口语沟通表达的意思较不明确&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;62-影响非口语沟通的元素&quot;&gt;6.2 影响非口语沟通的元素&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;性别&lt;/li&gt;
  &lt;li&gt;文化&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;63-非口语沟通的类型&quot;&gt;6.3 非口语沟通的类型&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;身体动作&lt;/li&gt;
  &lt;li&gt;声音&lt;/li&gt;
  &lt;li&gt;触碰&lt;/li&gt;
  &lt;li&gt;外貌：穿着在建立关系的第一阶段很重要&lt;/li&gt;
  &lt;li&gt;物理空间&lt;/li&gt;
  &lt;li&gt;物理环境&lt;/li&gt;
  &lt;li&gt;时间&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第七章-倾听不只是听见&quot;&gt;第七章 倾听：不只是听见&lt;/h1&gt;

&lt;h2 id=&quot;71-倾听的定义&quot;&gt;7.1 倾听的定义&lt;/h2&gt;

&lt;h2 id=&quot;72-倾听过程的元素&quot;&gt;7.2 倾听过程的元素&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;听到：注意音量，速度，清晰度&lt;/li&gt;
  &lt;li&gt;专注&lt;/li&gt;
  &lt;li&gt;了解&lt;/li&gt;
  &lt;li&gt;回应：好的沟通者会使用非语言行为来表达他们的专心&lt;/li&gt;
  &lt;li&gt;记忆&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;73-倾听的挑战&quot;&gt;7.3 倾听的挑战&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;无效倾听的类型&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;虚拟的倾听&lt;/li&gt;
  &lt;li&gt;自恋的倾听：尝试将沟通的主题转移到自己感兴趣的事物上&lt;/li&gt;
  &lt;li&gt;选择性的倾听&lt;/li&gt;
  &lt;li&gt;隔绝性的倾听：表现出避免沟通&lt;/li&gt;
  &lt;li&gt;防卫性的倾听：这种倾听者对模糊不清的信息没有安全感&lt;/li&gt;
  &lt;li&gt;埋伏性的倾听：容易导致别人产生防卫&lt;/li&gt;
  &lt;li&gt;鲁钝的倾听&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;无法有效倾听的原因&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;超负荷的信息&lt;/li&gt;
  &lt;li&gt;心不在焉&lt;/li&gt;
  &lt;li&gt;飞快的思想&lt;/li&gt;
  &lt;li&gt;费力&lt;/li&gt;
  &lt;li&gt;外在的噪音&lt;/li&gt;
  &lt;li&gt;错误的假定：认为自己听过，认为别人想法太浅显或者太复杂或者没有价值&lt;/li&gt;
  &lt;li&gt;缺乏明显的益处：这种自我中心非常致命&lt;/li&gt;
  &lt;li&gt;缺乏训练&lt;/li&gt;
  &lt;li&gt;听力的问题&lt;/li&gt;
  &lt;li&gt;媒体的影响&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;提高倾听的技巧&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;少说话：是指需要倾听别人的时候仍然说了太多话&lt;/li&gt;
  &lt;li&gt;摆脱注意力分散：尤其是心理&lt;/li&gt;
  &lt;li&gt;不要过早评断：尤其是那些忠告和对自己的评论&lt;/li&gt;
  &lt;li&gt;寻找关键意思：尝试把思考推得比说话者还快来摘录关键信息&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;74-倾听反应的类型&quot;&gt;7.4 倾听反应的类型&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;借力使力：用非语言行为或简短的言论来鼓舞对方多说一点话，表现要真诚；适合无法帮别人做决定时&lt;/li&gt;
  &lt;li&gt;问话：鼓励性的发现远胜过布施性的忠告&lt;/li&gt;
  &lt;li&gt;释义：倾听者将所解读的信息再重新说一次的做法，释义个人性信息能反映说话者的想法和感受而不是去评断或分析等：培训技巧
    &lt;ul&gt;
      &lt;li&gt;改变说话者的措辞&lt;/li&gt;
      &lt;li&gt;从所接受的信息中抓取一个具体例子来说明自己了解的程度&lt;/li&gt;
      &lt;li&gt;反映说话者的潜在寓意&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;支持：同情心，同意，提供协助，赞美，恢复信心；
    &lt;ul&gt;
      &lt;li&gt;需要避免的冷安慰
        &lt;ul&gt;
          &lt;li&gt;否认别人拥有感觉的权利：如“不用担心”，”这又没什么“&lt;/li&gt;
          &lt;li&gt;看轻事情的重要性：例如”那不过…而已“，”没事“&lt;/li&gt;
          &lt;li&gt;聚焦在”彼时彼地“而非”此时此刻“&lt;/li&gt;
          &lt;li&gt;火上加油的评断&lt;/li&gt;
          &lt;li&gt;自我防卫：”不要怪我…“&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;有效的支持的原则
        &lt;ul&gt;
          &lt;li&gt;对他人内心的挣扎提供支持，但不表达自己赞同或否定的思想&lt;/li&gt;
          &lt;li&gt;观察对方对你的支持性回应，有必要时换一个适合对方继续探索问题的回应方式&lt;/li&gt;
          &lt;li&gt;要了解到支持也不是永远收到欢迎&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分析：对说话者的内容加以解释，但是这种带评价性质的反应容易引起别人的防卫
    &lt;ul&gt;
      &lt;li&gt;有效的分析的原则
        &lt;ul&gt;
          &lt;li&gt;提出解释时使用试探性的口气会比绝对性的口吻更好&lt;/li&gt;
          &lt;li&gt;提供的分析应该要合逻辑、接近事实&lt;/li&gt;
          &lt;li&gt;确定对方的准备度足够，适合接受你的分析&lt;/li&gt;
          &lt;li&gt;确认自己提供分析的动机是基于协助而非借此凸显自己的聪明或对方的差劲&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;忠告：协助他人解决问题时，但有可能不适合另外一个人，让接收者产生不需要负责任的错觉
    &lt;ul&gt;
      &lt;li&gt;提出忠告需要确认的状况：
        &lt;ul&gt;
          &lt;li&gt;一定要确认所根据的信息是正确的，即使百分百确定也不能表现出权威专家一样&lt;/li&gt;
          &lt;li&gt;问自己询问你的人是否诚心愿意接受，最佳方式是等待别人提出需要忠告&lt;/li&gt;
          &lt;li&gt;当你提出建议行不通时确定接收者不会怪罪于你&lt;/li&gt;
          &lt;li&gt;用顾全面子的态度来传达忠告，要尊重对方并以强化关系为基础&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;评断：容易引起别人的防卫心态
    &lt;ul&gt;
      &lt;li&gt;评断容易被接受的两种状况
        &lt;ul&gt;
          &lt;li&gt;当别人寻求评断时才提出自己的评价&lt;/li&gt;
          &lt;li&gt;当提出评断时，动机应该是真诚、建设性的，莪不是奚落对方，例如“我告诉你这是为你好”这类话通常不是真心的而且也没有帮助&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;选择最佳的倾听反应：各人接受的反应不同，因素包括：
    &lt;ul&gt;
      &lt;li&gt;性别：女人更喜欢接受和提供支持性的反应，男人倾向提供忠告和转移话题&lt;/li&gt;
      &lt;li&gt;情境：首要原则是多进一步了解而少给予建议，使用借力使力、问话、释义、支持是一个聪明的开始，当搜集到足够的事实并显示出你的兴趣和关切时，接收者会对你的分析、忠告等评价式的反应准备的比较充分&lt;/li&gt;
      &lt;li&gt;对象：有些人只是想吐苦水，有些人能搞深入思考忠告的价值，有些人只是利用忠告来逃避责任&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;你的个人风格：反省一下自己的有点和缺点，取长补短予以调整&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第八章-发展关系动力&quot;&gt;第八章 发展关系动力&lt;/h1&gt;

&lt;h2 id=&quot;81-我们为什么要建立关系&quot;&gt;8.1 我们为什么要建立关系&lt;/h2&gt;

&lt;p&gt;影响选择关系伙伴的因素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;外貌：在关系的初期阶段尤其重要，但随着关系增进重要性下降&lt;/li&gt;
  &lt;li&gt;相似性&lt;/li&gt;
  &lt;li&gt;互补性&lt;/li&gt;
  &lt;li&gt;相互吸引力&lt;/li&gt;
  &lt;li&gt;能力：原则就是在所做的事上尽力而为，而且愿意承认自己的错误&lt;/li&gt;
  &lt;li&gt;袒露：袒露在关系发展的初期扮演十分重要的角色，关键有两：
    &lt;ul&gt;
      &lt;li&gt;揭露的咨询量与质跟对方要取得平衡&lt;/li&gt;
      &lt;li&gt;时机&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;接近：近水楼台先得月&lt;/li&gt;
  &lt;li&gt;报酬&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;82-关系发展与维系的模式&quot;&gt;8.2 关系发展与维系的模式&lt;/h2&gt;

&lt;p&gt;一种关系发展的理论，不是所有学者都认同：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;初始阶段：目标在于你愿意与人接触，并表示你是一个值得谈话的对象&lt;/li&gt;
  &lt;li&gt;试验阶段：这一阶段是考虑是否进一步建立关系，“闲谈”是这一阶段最佳保证&lt;/li&gt;
  &lt;li&gt;强化阶段：真正的人际关系才开始&lt;/li&gt;
  &lt;li&gt;整合阶段&lt;/li&gt;
  &lt;li&gt;结合阶段&lt;/li&gt;
  &lt;li&gt;分化阶段：保持关系的同时，保持自我的认同，关键在于当创造一些空间去成为个体时还能维持在关系当中的承诺&lt;/li&gt;
  &lt;li&gt;各自阶段：成员们选择退缩，而非讨论一个不认同的话题&lt;/li&gt;
  &lt;li&gt;停滞阶段：成员彼此用老方法相待，熟悉的方法没什么感觉，关系就是空壳&lt;/li&gt;
  &lt;li&gt;逃避阶段：关系陷入困境&lt;/li&gt;
  &lt;li&gt;结束阶段&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;辩证的观点: 沟通者想要追求重要但内在相互矛盾的目标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;联系和自主：寻求联系的同时不失去全部的自我，每个人都在重复表现3个阶段“抱紧我”，“放开我”，”让我一个人“&lt;/li&gt;
  &lt;li&gt;公开和隐私：&lt;/li&gt;
  &lt;li&gt;巡礼和新奇：&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关系的特性&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;关系是经常变动的&lt;/li&gt;
  &lt;li&gt;文化会影响关系&lt;/li&gt;
  &lt;li&gt;关系需要维持，沟通占80%，&lt;strong&gt;五种维持沟通满意的方法&lt;/strong&gt;：
    &lt;ul&gt;
      &lt;li&gt;正向：保持关系气氛礼貌而乐观，避免批评&lt;/li&gt;
      &lt;li&gt;开放：直接说出对于关系的看法，袒露自己的需要和看重的事&lt;/li&gt;
      &lt;li&gt;确信：让别人知道他人对你的重要性，你重视并投入到关系中&lt;/li&gt;
      &lt;li&gt;社会网络：利用社会网络的支持和安慰，减少关系中的压力&lt;/li&gt;
      &lt;li&gt;分工：彼此协助度过低潮，携手完成人生义务&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;修复损坏的关系&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/关系越界类型.png&quot; alt=&quot;关系越界类型&quot; /&gt;&lt;/p&gt;

&lt;p&gt;关系修复策略：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;明确地承认自己的越界行为是不当的&lt;/li&gt;
  &lt;li&gt;很诚恳地道歉&lt;/li&gt;
  &lt;li&gt;某种补偿形式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;83-对关系做沟通&quot;&gt;8.3 对关系做沟通&lt;/h2&gt;

&lt;p&gt;内容与关系性信息&lt;/p&gt;

&lt;p&gt;关系型信息的类型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;亲切感：人们欣赏和喜欢对方的程度&lt;/li&gt;
  &lt;li&gt;即时性：立即转向别人并与之沟通的这种对别人感兴趣和专注的程度&lt;/li&gt;
  &lt;li&gt;尊重感&lt;/li&gt;
  &lt;li&gt;控制性：在关系中一方是否有权可以影响另一方，包括“发言权”和“决策权”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后设沟通是指人们相互讨论他们之间的关系，可以协助人们以建设性的态度解决问题，可以提高关系的满意程度，但需要被小心地使用&lt;/p&gt;

&lt;h1 id=&quot;第九章-表达亲密感&quot;&gt;第九章 表达亲密感&lt;/h1&gt;

&lt;h2 id=&quot;91-关系中的亲密&quot;&gt;9.1 关系中的亲密&lt;/h2&gt;

&lt;p&gt;亲密关系有多个向度&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;生理向度&lt;/li&gt;
  &lt;li&gt;来自理性的分享&lt;/li&gt;
  &lt;li&gt;交互重要的感受，分享个人信息，可帮助反映和创造亲近的感觉&lt;/li&gt;
  &lt;li&gt;共同活动&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;男性和女性的亲密形态：男性通过共同活动来培养亲密，女性通过交流分享感受和个人信息培养亲密&lt;/p&gt;

&lt;p&gt;文化对亲密的影响&lt;/p&gt;

&lt;p&gt;电子媒介沟通的亲密&lt;/p&gt;

&lt;p&gt;亲密感的限制：由于时间和精力的限制，不可能和每个人都有亲密关系，有时礼貌的沟通足矣&lt;/p&gt;

&lt;h2 id=&quot;92-关系中的自我袒露&quot;&gt;9.2 关系中的自我袒露&lt;/h2&gt;

&lt;p&gt;自我袒露是&lt;em&gt;郑重其事&lt;/em&gt;地透露与自己有关的、&lt;em&gt;有意义的&lt;/em&gt;、&lt;em&gt;不经常为人所知&lt;/em&gt;的信息的过程&lt;/p&gt;

&lt;p&gt;自我袒露的程度：宽度和深度&lt;br /&gt;
宽度是指讨论的主题的范围&lt;br /&gt;
深度是指自愿开放的个人信息&lt;/p&gt;

&lt;p&gt;有一些分享的信息的类别来衡量自我袒露的深度：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;陈腔滥调：公式化且陈腐的回应，一点都不深入，但能使社交转轮保持润滑&lt;/li&gt;
  &lt;li&gt;事实：有意义的、特殊的且不是大家都知道的&lt;/li&gt;
  &lt;li&gt;意见：意见通常比事实透露更多信息&lt;/li&gt;
  &lt;li&gt;感受：最深的层次&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自我坦露的模式&lt;/p&gt;

&lt;p&gt;自我袒露的好处和风险&lt;/p&gt;

&lt;p&gt;好处：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;宣泄&lt;/li&gt;
  &lt;li&gt;互惠：袒露个人信息也会促使别人那样做&lt;/li&gt;
  &lt;li&gt;自我澄清：&lt;/li&gt;
  &lt;li&gt;自我确认：假如你期待聆听者对你袒露的信息表达认同就是在寻求认同和确认&lt;/li&gt;
  &lt;li&gt;认同管理：通过袒露个人信息来使自己更有吸引力&lt;/li&gt;
  &lt;li&gt;关系的维持和增强&lt;/li&gt;
  &lt;li&gt;社会控制：袒露个人信息会增加你对他人的控制&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自我袒露的风险：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;拒绝：袒露可能会受到拒绝&lt;/li&gt;
  &lt;li&gt;负面影响&lt;/li&gt;
  &lt;li&gt;降低关系满意度：尤其是在吐露对关系的不好感受时&lt;/li&gt;
  &lt;li&gt;丧失影响力&lt;/li&gt;
  &lt;li&gt;伤害别人&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;自我袒露的原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在道德上有义务袒露则需要袒露，例如HIV&lt;/li&gt;
  &lt;li&gt;对方对你来说重要么&lt;/li&gt;
  &lt;li&gt;袒露的量和方式合适么：渐进式，正面和负面信息兼具，袒露的时间和场合&lt;/li&gt;
  &lt;li&gt;袒露的风险合理么&lt;/li&gt;
  &lt;li&gt;袒露对于现状有重大意义么&lt;/li&gt;
  &lt;li&gt;有建设性的影响么：小心踏到了雷区&lt;/li&gt;
  &lt;li&gt;自我袒露够清楚和可理解么&lt;/li&gt;
  &lt;li&gt;自我袒露是互惠的么&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;93-自我袒露以外的其他选择&quot;&gt;9.3 自我袒露以外的其他选择&lt;/h2&gt;

&lt;p&gt;当人处在一个诚实但不舒服的情况中时，会使用四个袒露的替代：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;沉默&lt;/li&gt;
  &lt;li&gt;说谎，理由包括，但说谎别识别会有影响
    &lt;ul&gt;
      &lt;li&gt;保住面子&lt;/li&gt;
      &lt;li&gt;避免紧张和冲突&lt;/li&gt;
      &lt;li&gt;掌控社交反应&lt;/li&gt;
      &lt;li&gt;增进或减少关系&lt;/li&gt;
      &lt;li&gt;得到权力&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;模棱两可，理由包括
    &lt;ul&gt;
      &lt;li&gt;使接受者免于尴尬的伤害&lt;/li&gt;
      &lt;li&gt;为发送和接受信息的双方保留面子&lt;/li&gt;
      &lt;li&gt;为说谎提供一个替代方式&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;暗示&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;第十章-增进沟通气氛&quot;&gt;第十章 增进沟通气氛&lt;/h1&gt;

&lt;h2 id=&quot;101-沟通气氛正向关系的关键&quot;&gt;10.1 沟通气氛：正向关系的关键&lt;/h2&gt;

&lt;p&gt;沟通气氛是指关系当中的情绪氛围，存在于人与人之间共同活动的那股气氛远比活动本身来的重要多&lt;/p&gt;

&lt;p&gt;肯定和不肯定沟通&lt;br /&gt;
肯定的沟通方式能引导正向的沟通气氛，而不肯定则相反&lt;/p&gt;

&lt;p&gt;有3中增加肯定信息的方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;表达重视&lt;/li&gt;
  &lt;li&gt;承认&lt;/li&gt;
  &lt;li&gt;赞同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;不肯定信息的类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;视若无睹：被忽视比误解或攻击更不被肯定&lt;/li&gt;
  &lt;li&gt;口头辱骂&lt;/li&gt;
  &lt;li&gt;概括抱怨：特定的抱怨可以使问题明朗化，但概括性的抱怨经常是不肯定信息，隐含对别人个性的挑剔&lt;/li&gt;
  &lt;li&gt;插嘴：偶尔未必被认为是负面的&lt;/li&gt;
  &lt;li&gt;各说各话&lt;/li&gt;
  &lt;li&gt;岔题&lt;/li&gt;
  &lt;li&gt;无人情味&lt;/li&gt;
  &lt;li&gt;含糊其辞&lt;/li&gt;
  &lt;li&gt;表里不一：信息包含两个冲突的信息，通常至少有一个是非口语的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;沟通气氛如何发展：一些导致正向或负向的沟通模型&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/负向和正向对应的沟通模式.png&quot; alt=&quot;负向和正向对应的沟通模式&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;102-防卫原因与对策&quot;&gt;10.2 防卫：原因与对策&lt;/h2&gt;

&lt;p&gt;防卫是保护自我表象、顾全自己面子的一个过程，尤其是别人的批评命中要害时&lt;br /&gt;
当人某部分自我被攻击时，会产生认知失调，为了维持正向的自我形象就会防卫&lt;/p&gt;

&lt;p&gt;防卫反应的类型：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;反击
    &lt;ul&gt;
      &lt;li&gt;口头侵犯&lt;/li&gt;
      &lt;li&gt;讽刺：讽刺的回应会因为机智和快速的思考而有较高的效果，但具有敌意、不肯定的本质，可能导致反击&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;扭曲批评信息
    &lt;ul&gt;
      &lt;li&gt;合理化：为自己不能接受的行为找出一种不正确的解释来让它看起来合理、&lt;/li&gt;
      &lt;li&gt;补偿：借由自己较强的一面来掩盖软弱的那一面&lt;/li&gt;
      &lt;li&gt;退化：表现出无助，声称不能做一些事情而事实上那些是不想做的事情&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;躲避刺耳的信息：全然地躲开那些威胁到自我形象的信息
    &lt;ul&gt;
      &lt;li&gt;身体的躲避&lt;/li&gt;
      &lt;li&gt;压抑：心理上压抑住那些刺耳的信息，压抑住脑海里的问题&lt;/li&gt;
      &lt;li&gt;漠不关心：承认那些不愉快的信息，却装出无动于衷、一点也不在意的样子&lt;/li&gt;
      &lt;li&gt;替代：对看似较不具有威胁感的人或事物发泄出侵略或不友善的情感&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;防止对他人防卫&lt;/p&gt;

&lt;p&gt;解决问题的方法时：在内容层面表达出不满，在关系层面表现出-不管是口头还是非口头-你对别人的重视；主要包括6种方式&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/防卫性和支持性行为分类.png&quot; alt=&quot;防卫性和支持性行为分类&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;评价与描述：评价式沟通主要用“你”，容易唤起防卫；描述式沟通着重描述说话者的想法和感受而非重在价值的判断&lt;/li&gt;
  &lt;li&gt;支配和问题导向：支配式沟通的信息传达者不顾接受者的需要和兴趣自顾决定一些事情，容易唤起防卫；而问题导向会将焦点放在满足自己和他人需求的办法上，让大家觉得自己是赢家&lt;/li&gt;
  &lt;li&gt;策略和自发：策略式的沟通容易唤起防卫，这种沟通模式中传达者会把真正的动机隐藏起来，表现的很有心机，即使动机是正确的也会让接受者感觉被蒙蔽；自发性是指诚实的表达出内心的想法，即使坦言会失去一点小目标但长期下来会对关系有正向影响；注意，自发性不要与正向气氛建立法则相违背&lt;/li&gt;
  &lt;li&gt;中立与同理：中立应该是指“冷淡”，表达出了不肯定，莫不关心，容易唤起防卫；而同理是把自己置身于对方的经历中，但不一定认同别人的观点&lt;/li&gt;
  &lt;li&gt;优越和平等：自以为是的信息为容易引起防卫状态&lt;/li&gt;
  &lt;li&gt;确定和协商：确定的沟通者会将注意力放在自己所坚持的观点上，因此会漠视别人的观点；而协商则不全然认为自己没错，倘若其他观点更合理也也会改变自己观点&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些方法不一定就能建立出正向的沟通气氛，对方可能不接受你这一套，但沟通是由这些积极因子构成时则有可能创造积极的关系&lt;/p&gt;

&lt;h2 id=&quot;103-保留面子清晰信息处方&quot;&gt;10.3 保留面子：清晰信息处方&lt;/h2&gt;

&lt;p&gt;这个技巧能清晰、直接但又不具有威胁性的表达出心意，让人不觉得被评断和命令；这个技巧借由以下几种信息来运作：你的希望、问题、抱怨和珍视；肯定信息以“我”的语言做表述，包含3个元素，完整的肯定信息有5个部分&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;行为：行为描述应该是客观的，描述一件事情而不带情绪，这样抱怨行为不会攻击到别人的自我&lt;/li&gt;
  &lt;li&gt;诠释：诠释是主观的，诠释也必须把推论过程说得非常清楚，注意，非常清楚不是指确定而应该是协商&lt;/li&gt;
  &lt;li&gt;感受：分享诠释很重要，但分享感受则更上一个层次&lt;/li&gt;
  &lt;li&gt;结果：陈述行为导致的结果有助于别人了解你的信息，弄清楚结果&lt;/li&gt;
  &lt;li&gt;意图：就是沟通的意图&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;清晰的表达：以上的元素可以乱序传达，信息的表达要符合个人风格，有时可以把两个因素糅合在一个句子里，以自己的速度来传达、有时甚至会重复陈述同一个因素多次&lt;/p&gt;

&lt;h2 id=&quot;104-对批评以不防卫回应&quot;&gt;10.4 对批评以不防卫回应&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;寻找更多的信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当别人攻击背后其实是有话要说时，一味防卫其实是蠢事，寻找更多信息才是明智之举，因为对方的华中常常包含少许甚至许多事实，首先学会倾听别人的批评能更清楚自己的立场，了解批评的内容&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;询问详情&lt;br /&gt;
当批评是抽象的评判时，可以通过询问详情来获取信息，但要真诚，真心想从别人那了解信息，注意自己的口语和非口语的情绪，否则会引起进一步的反击&lt;/li&gt;
  &lt;li&gt;推测详情&lt;br /&gt;
有时候对方不愿详说批评的背后的想法，那么可以进行善意真诚的猜测，但必须要让批评者知道你是真心想要知道究竟发生什么&lt;/li&gt;
  &lt;li&gt;对说话者的想法予以释义&lt;br /&gt;
释义有两好处：批评者领悟到有人倾听抱怨会减少自己强硬的态度；批评者会在它的需要没得到满足时增长挫败&lt;/li&gt;
  &lt;li&gt;询问批评者要的是什么&lt;br /&gt;
必须要表现出真诚的想知道才行&lt;/li&gt;
  &lt;li&gt;询问行为的后果&lt;/li&gt;
  &lt;li&gt;询问还有哪里出错&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;同意批评者的看法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同意有两种类型，在不同的情况中都可以用得到&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;同意事实&lt;br /&gt;
如果事实如此的话，对事实表示同意会产生真诚而不防卫的反应&lt;/li&gt;
  &lt;li&gt;同意批评者的观感
当仔细的倾听以后并询问足够的信息以后，觉得别人的结论言过其实时，一种表示同意的方法是，尝试着站在对方的角度看待事情，而并不去认同批评者的结论&lt;br /&gt;
认同批评者的言论却不会让自己感到不舒服的关键是，同意那些评判不会迫使你道歉，可以用解释替代，并且即使道歉也不会让自己显得卑躬屈膝&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;第十一章-处理人际冲突&quot;&gt;第十一章 处理人际冲突&lt;/h1&gt;

&lt;h2 id=&quot;111-冲突的本质&quot;&gt;11.1 冲突的本质&lt;/h2&gt;

&lt;p&gt;冲突的定义：在至少两个相互依赖的个体之间，感觉到不相容的目标、不足的资源和达成目标时来自另一个个体的阻挠时，一种表达出来的挣扎&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;表达出来的挣扎：当两个个体察觉到意见不合时冲突便成立了&lt;/li&gt;
  &lt;li&gt;感觉到不相容的目标：其实不一定不存在双赢的方法，只是大家只关注各自不同的目标找不到双赢的方法&lt;/li&gt;
  &lt;li&gt;知觉到资源不足&lt;/li&gt;
  &lt;li&gt;相互依赖&lt;/li&gt;
  &lt;li&gt;其他个体的阻挠：只有行动阻挠才会有冲突&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;冲突是自然的，无论如何肯定存在的&lt;/p&gt;

&lt;p&gt;冲突可以是有益的&lt;/p&gt;

&lt;h2 id=&quot;112-冲突的类型&quot;&gt;11.2 冲突的类型&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/冲突的类型.png&quot; alt=&quot;冲突的类型&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/解决冲突方法的选择.png&quot; alt=&quot;解决冲突方法的选择&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;113-关系系统中的冲突&quot;&gt;11.3 关系系统中的冲突&lt;/h2&gt;

&lt;p&gt;冲突并不是全部靠个人的选择而来的，而是依靠个体之间的互动方式而来的，两人在长时间的关系中会发展出来一个管理不一致的模式-关系冲突系统&lt;/p&gt;

&lt;p&gt;有多种分类来看待冲突的管理方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;互补的、对称的、平行的&lt;/li&gt;
  &lt;li&gt;亲密和攻击方式&lt;/li&gt;
  &lt;li&gt;冲突仪式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;114-冲突类型的变项&quot;&gt;11.4 冲突类型的变项&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;性别：存在一些差异，但关系的本质比性别更加重要&lt;/li&gt;
  &lt;li&gt;文化：&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;115-建设性处理冲突的技巧&quot;&gt;11.5 建设性处理冲突的技巧&lt;/h2&gt;

&lt;p&gt;有些时候用合作模式来解决冲突是最好的策略，这时候可以用过一些技巧来提升使用合作模式解决冲突的概率&lt;/p&gt;

&lt;p&gt;步骤包括：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;确认你的问题和未满足的条件&lt;br /&gt;
首先要意识到感觉不爽是你提出来的一个问题，意识到这是你个人问题后会以描述的方式来沟通，并减少情绪和评价性的方式来行动，减少防卫&lt;br /&gt;
接着是定义清楚自己的未被满足的需求，有时候这个需求是隐藏的很深的，这对应这意图；在陈述问题前必须要清楚自己的需求&lt;/li&gt;
  &lt;li&gt;订立约会&lt;br /&gt;
破坏性的争吵经常开始于在起始者当面对抗时他的伙伴还没准备好，所以应试着要求你的伙伴和你一起解决它&lt;/li&gt;
  &lt;li&gt;描述你的问题和需求&lt;br /&gt;
通过“清晰信息处方”来描述清楚问题和意图，再进一步讨论之前，有必要确定你的伙伴清楚的接收了你的描述，你可以通过确认的方式来确认一下&lt;/li&gt;
  &lt;li&gt;思考对方的观点
在描述完自己的需求以后可以询问对方的需求，这时候可以使用倾听的技巧来获取对方的需求&lt;/li&gt;
  &lt;li&gt;商议解决之道
当双方都了解清楚对方的需求以后，就可以合作相处解决方案，关键是尽可能多的发现潜在的解决方案，可以记录下这些方案，即使天方夜谭的方案也可能引出合理的方案&lt;/li&gt;
  &lt;li&gt;追踪解决方案的效果&lt;br /&gt;
效果不好时可以做适当的改变&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;要意识到在执行这些步骤的过程中不会一直都顺畅的，要多练习才行&lt;br /&gt;
有时候双赢并不永远有效，即使用心良苦也找不到双赢的办法，可能需要妥协，但也会建立一种良善的氛围&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/双赢协商流程.png&quot; alt=&quot;双赢协商流程&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;116-建设性处理冲突的技巧提问和释义&quot;&gt;11.6 建设性处理冲突的技巧：提问和释义&lt;/h2&gt;
</description>
        <pubDate>Mon, 06 Feb 2017 10:00:00 +0800</pubDate>
        <link>/2017/02/06/%E6%B2%9F%E9%80%9A%E7%9A%84%E8%89%BA%E6%9C%AF/</link>
        <guid isPermaLink="true">/2017/02/06/%E6%B2%9F%E9%80%9A%E7%9A%84%E8%89%BA%E6%9C%AF/</guid>
        
        <category>沟通</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>《从读心到攻心》读书笔记</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#序言01秒获得肯定的第一步&quot; id=&quot;markdown-toc-序言01秒获得肯定的第一步&quot;&gt;序言：0.1秒获得肯定的第一步&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第一章-你知道的和你不知道的语言&quot; id=&quot;markdown-toc-第一章-你知道的和你不知道的语言&quot;&gt;第一章 你知道的和你不知道的语言&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第一节-那些泄露天机的肢体语言信号&quot; id=&quot;markdown-toc-第一节-那些泄露天机的肢体语言信号&quot;&gt;第一节 那些泄露天机的肢体语言信号&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#细节会告诉你ta的特性&quot; id=&quot;markdown-toc-细节会告诉你ta的特性&quot;&gt;细节会告诉你TA的特性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样延续你的好形象&quot; id=&quot;markdown-toc-怎样延续你的好形象&quot;&gt;怎样延续你的好形象&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#最初4分钟ta会给你定性&quot; id=&quot;markdown-toc-最初4分钟ta会给你定性&quot;&gt;最初4分钟，TA会给你定性&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第二节-各种情绪究竟源自哪里&quot; id=&quot;markdown-toc-第二节-各种情绪究竟源自哪里&quot;&gt;第二节 各种情绪究竟源自哪里&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第三节-绝对不会被拒绝的问话策略&quot; id=&quot;markdown-toc-第三节-绝对不会被拒绝的问话策略&quot;&gt;第三节 绝对不会被拒绝的问话策略&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#为何催眠师的柠檬更酸&quot; id=&quot;markdown-toc-为何催眠师的柠檬更酸&quot;&gt;为何催眠师的柠檬更酸&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#你的独特卖点就是你的品牌&quot; id=&quot;markdown-toc-你的独特卖点就是你的品牌&quot;&gt;你的独特卖点就是你的品牌&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第二章-用金口玉言打动人心&quot; id=&quot;markdown-toc-第二章-用金口玉言打动人心&quot;&gt;第二章 用金口玉言打动人心&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第一节-语言是情绪的种子&quot; id=&quot;markdown-toc-第一节-语言是情绪的种子&quot;&gt;第一节 语言是情绪的种子&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#让你的语言更有说服力&quot; id=&quot;markdown-toc-让你的语言更有说服力&quot;&gt;让你的语言更有说服力&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#永远奏效的皮格马利翁效应&quot; id=&quot;markdown-toc-永远奏效的皮格马利翁效应&quot;&gt;永远奏效的皮格马利翁效应&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#政治家的花招&quot; id=&quot;markdown-toc-政治家的花招&quot;&gt;政治家的花招&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第二节-走进ta的潜意识&quot; id=&quot;markdown-toc-第二节-走进ta的潜意识&quot;&gt;第二节 走进TA的潜意识&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#对方的沟通方式是什么&quot; id=&quot;markdown-toc-对方的沟通方式是什么&quot;&gt;对方的沟通方式是什么&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#你的沟通方式是什么&quot; id=&quot;markdown-toc-你的沟通方式是什么&quot;&gt;你的沟通方式是什么&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#视觉传达者我看见&quot; id=&quot;markdown-toc-视觉传达者我看见&quot;&gt;视觉传达者：我看见&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#听觉传达者我听见&quot; id=&quot;markdown-toc-听觉传达者我听见&quot;&gt;听觉传达者：我听见&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#感觉传达者我感到&quot; id=&quot;markdown-toc-感觉传达者我感到&quot;&gt;感觉传达者：我感到&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#嗅觉传达者和味觉传达者&quot; id=&quot;markdown-toc-嗅觉传达者和味觉传达者&quot;&gt;嗅觉传达者和味觉传达者&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#给你们的交流加点佐料&quot; id=&quot;markdown-toc-给你们的交流加点佐料&quot;&gt;给你们的交流加点佐料&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#引导ta顺着你的思路谈话&quot; id=&quot;markdown-toc-引导ta顺着你的思路谈话&quot;&gt;引导TA顺着你的思路谈话&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第三节-埋下积极的语言种子&quot; id=&quot;markdown-toc-第三节-埋下积极的语言种子&quot;&gt;第三节 埋下积极的语言种子&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#能改变人的态度的次启动效应&quot; id=&quot;markdown-toc-能改变人的态度的次启动效应&quot;&gt;能改变人的态度的“次启动效应”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#为自己做个交际启动准备&quot; id=&quot;markdown-toc-为自己做个交际启动准备&quot;&gt;为自己做个交际启动准备&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#情景启动效应&quot; id=&quot;markdown-toc-情景启动效应&quot;&gt;情景启动效应&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#虚拟记忆&quot; id=&quot;markdown-toc-虚拟记忆&quot;&gt;虚拟记忆&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#做标记&quot; id=&quot;markdown-toc-做标记&quot;&gt;做标记&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#美感的启动效应&quot; id=&quot;markdown-toc-美感的启动效应&quot;&gt;美感的启动效应&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#针对未来医生的启动效应&quot; id=&quot;markdown-toc-针对未来医生的启动效应&quot;&gt;针对未来医生的启动效应&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第四节-神奇的镜像效应&quot; id=&quot;markdown-toc-第四节-神奇的镜像效应&quot;&gt;第四节 神奇的“镜像效应”&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#为什么我们会做一样的动作&quot; id=&quot;markdown-toc-为什么我们会做一样的动作&quot;&gt;为什么我们会做一样的动作&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#默契的身体语言&quot; id=&quot;markdown-toc-默契的身体语言&quot;&gt;默契的身体语言&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#有些话能让你们更亲密&quot; id=&quot;markdown-toc-有些话能让你们更亲密&quot;&gt;有些话能让你们更亲密&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#应对不同的说话风格&quot; id=&quot;markdown-toc-应对不同的说话风格&quot;&gt;应对不同的说话风格&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第五节-拉起ta记忆之海的船锚&quot; id=&quot;markdown-toc-第五节-拉起ta记忆之海的船锚&quot;&gt;第五节 拉起TA记忆之海的船锚&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样唤起他们的美好记忆&quot; id=&quot;markdown-toc-怎样唤起他们的美好记忆&quot;&gt;怎样唤起他们的美好记忆&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#别再散发负面情绪&quot; id=&quot;markdown-toc-别再散发负面情绪&quot;&gt;别再散发负面情绪&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#给自己也来个沉锚效应&quot; id=&quot;markdown-toc-给自己也来个沉锚效应&quot;&gt;给自己也来个“沉锚效应”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#生意场上必备的分层沉锚&quot; id=&quot;markdown-toc-生意场上必备的分层沉锚&quot;&gt;生意场上必备的“分层沉锚”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#展现你的激情而不是弱点&quot; id=&quot;markdown-toc-展现你的激情而不是弱点&quot;&gt;展现你的激情而不是弱点&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第三章-在举手投足间征服人心&quot; id=&quot;markdown-toc-第三章-在举手投足间征服人心&quot;&gt;第三章 在举手投足间征服人心&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第一节-身体语言的密码&quot; id=&quot;markdown-toc-第一节-身体语言的密码&quot;&gt;第一节 身体语言的密码&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第二节-不安分的手和脚&quot; id=&quot;markdown-toc-第二节-不安分的手和脚&quot;&gt;第二节 不安分的手和脚&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#第一次握手让我们有所联系&quot; id=&quot;markdown-toc-第一次握手让我们有所联系&quot;&gt;第一次握手：让我们有所联系&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#竖起大拇指好样的&quot; id=&quot;markdown-toc-竖起大拇指好样的&quot;&gt;竖起大拇指：好样的&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#自己紧握双手就这样做吧&quot; id=&quot;markdown-toc-自己紧握双手就这样做吧&quot;&gt;自己紧握双手：就这样做吧&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#掌心朝上我没有什么好遮掩的&quot; id=&quot;markdown-toc-掌心朝上我没有什么好遮掩的&quot;&gt;掌心朝上：我没有什么好遮掩的&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#男人间的拥抱嘿哥们&quot; id=&quot;markdown-toc-男人间的拥抱嘿哥们&quot;&gt;男人间的拥抱：嘿，哥们&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#拳头互撞与你同在&quot; id=&quot;markdown-toc-拳头互撞与你同在&quot;&gt;拳头互撞：与你同在&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#击掌相庆我们太牛了&quot; id=&quot;markdown-toc-击掌相庆我们太牛了&quot;&gt;击掌相庆：我们太牛了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#双臂交抱离我远点&quot; id=&quot;markdown-toc-双臂交抱离我远点&quot;&gt;双臂交抱：离我远点&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#指指点点打住看那边&quot; id=&quot;markdown-toc-指指点点打住看那边&quot;&gt;指指点点：打住，看那边&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#定向反应下意识靠近&quot; id=&quot;markdown-toc-定向反应下意识靠近&quot;&gt;定向反应：下意识靠近&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#耸肩我不知道&quot; id=&quot;markdown-toc-耸肩我不知道&quot;&gt;耸肩：我不知道&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#砍劈手势这就是我的方式&quot; id=&quot;markdown-toc-砍劈手势这就是我的方式&quot;&gt;砍劈手势：这就是我的方式&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#屈指计算同意我的观点吧&quot; id=&quot;markdown-toc-屈指计算同意我的观点吧&quot;&gt;屈指计算：同意我的观点吧&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#两手互搓我要提出想法了&quot; id=&quot;markdown-toc-两手互搓我要提出想法了&quot;&gt;两手互搓：我要提出想法了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#掌心朝下这件事应该这样做&quot; id=&quot;markdown-toc-掌心朝下这件事应该这样做&quot;&gt;掌心朝下：这件事应该这样做&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#两手叉腰别来惹我&quot; id=&quot;markdown-toc-两手叉腰别来惹我&quot;&gt;两手叉腰：别来惹我&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#十指相抵这儿我说了算&quot; id=&quot;markdown-toc-十指相抵这儿我说了算&quot;&gt;十指相抵：这儿我说了算&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#双手放在背后你威胁不到我&quot; id=&quot;markdown-toc-双手放在背后你威胁不到我&quot;&gt;双手放在背后：你威胁不到我&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#咬手指我没有安全感&quot; id=&quot;markdown-toc-咬手指我没有安全感&quot;&gt;咬手指：我没有安全感&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#卷起脚趾千万别注意到我&quot; id=&quot;markdown-toc-卷起脚趾千万别注意到我&quot;&gt;卷起脚趾：千万别注意到我&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#扭着手我需要安慰&quot; id=&quot;markdown-toc-扭着手我需要安慰&quot;&gt;扭着手：我需要安慰&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#抓耳挠腮啊我也不知道&quot; id=&quot;markdown-toc-抓耳挠腮啊我也不知道&quot;&gt;抓耳挠腮：啊？我也不知道&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#抚摸脖子压力真大啊&quot; id=&quot;markdown-toc-抚摸脖子压力真大啊&quot;&gt;抚摸脖子：压力真大啊&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#双手插袋我不是一个开朗的人&quot; id=&quot;markdown-toc-双手插袋我不是一个开朗的人&quot;&gt;双手插袋：我不是一个开朗的人&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#拇指朝外我浑身是劲&quot; id=&quot;markdown-toc-拇指朝外我浑身是劲&quot;&gt;拇指朝外：我浑身是劲&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#脚打拍子我很兴奋&quot; id=&quot;markdown-toc-脚打拍子我很兴奋&quot;&gt;脚打拍子：我很兴奋&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#焦躁不安的双脚我控制不了我的情绪&quot; id=&quot;markdown-toc-焦躁不安的双脚我控制不了我的情绪&quot;&gt;焦躁不安的双脚：我控制不了我的情绪&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#双脚交叉我不赞同&quot; id=&quot;markdown-toc-双脚交叉我不赞同&quot;&gt;双脚交叉：我不赞同&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#僵硬的动作我可不想露馅&quot; id=&quot;markdown-toc-僵硬的动作我可不想露馅&quot;&gt;僵硬的动作：我可不想露馅&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#遮羞动作我很脆弱&quot; id=&quot;markdown-toc-遮羞动作我很脆弱&quot;&gt;遮羞动作：我很脆弱&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#测量动作尺寸有这么大&quot; id=&quot;markdown-toc-测量动作尺寸有这么大&quot;&gt;测量动作：尺寸有这么大&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#侧身动作谈话到此结束&quot; id=&quot;markdown-toc-侧身动作谈话到此结束&quot;&gt;侧身动作，谈话到此结束&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#自我激励或抚慰一切都会好起来&quot; id=&quot;markdown-toc-自我激励或抚慰一切都会好起来&quot;&gt;自我激励或抚慰：一切都会好起来&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#克制着不去做任何手势我正在撒谎&quot; id=&quot;markdown-toc-克制着不去做任何手势我正在撒谎&quot;&gt;克制着不去做任何手势：我正在撒谎&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#用运动员起跑姿势坐着我想离开&quot; id=&quot;markdown-toc-用运动员起跑姿势坐着我想离开&quot;&gt;用运动员起跑姿势坐着：我想离开&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第三节-脸部微表情泄漏的秘密&quot; id=&quot;markdown-toc-第三节-脸部微表情泄漏的秘密&quot;&gt;第三节 脸部微表情泄漏的秘密&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#点头我同意&quot; id=&quot;markdown-toc-点头我同意&quot;&gt;点头：我同意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#见面或告别时的亲吻我喜欢你&quot; id=&quot;markdown-toc-见面或告别时的亲吻我喜欢你&quot;&gt;见面或告别时的亲吻：我喜欢你&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#摇头动作不不不&quot; id=&quot;markdown-toc-摇头动作不不不&quot;&gt;摇头动作：不、不、不&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#摸摸鼻子这场谈话让我不舒服&quot; id=&quot;markdown-toc-摸摸鼻子这场谈话让我不舒服&quot;&gt;摸摸鼻子：这场谈话让我不舒服&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#转动眼球&quot; id=&quot;markdown-toc-转动眼球&quot;&gt;转动眼球&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#低头俯首我被打败了&quot; id=&quot;markdown-toc-低头俯首我被打败了&quot;&gt;低头俯首：我被打败了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#目光朝下我不敢直视你&quot; id=&quot;markdown-toc-目光朝下我不敢直视你&quot;&gt;目光朝下：我不敢直视你&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#噘嘴&quot; id=&quot;markdown-toc-噘嘴&quot;&gt;噘嘴&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#眨眼hi亲爱的&quot; id=&quot;markdown-toc-眨眼hi亲爱的&quot;&gt;眨眼：Hi，亲爱的&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#收缩下巴怒了&quot; id=&quot;markdown-toc-收缩下巴怒了&quot;&gt;收缩下巴：怒了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#扬起下巴我赢了&quot; id=&quot;markdown-toc-扬起下巴我赢了&quot;&gt;扬起下巴：我赢了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#从眼睛上方看人您拿我寻开心啊&quot; id=&quot;markdown-toc-从眼睛上方看人您拿我寻开心啊&quot;&gt;从眼睛上方看人：您拿我寻开心啊&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#禁闭嘴唇我正在努力不让自己说出来&quot; id=&quot;markdown-toc-禁闭嘴唇我正在努力不让自己说出来&quot;&gt;禁闭嘴唇：我正在努力不让自己说出来&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#嘴巴向内抿我收回我的话&quot; id=&quot;markdown-toc-嘴巴向内抿我收回我的话&quot;&gt;嘴巴向内抿：我收回我的话&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#匆匆一瞥你吸引了我&quot; id=&quot;markdown-toc-匆匆一瞥你吸引了我&quot;&gt;匆匆一瞥：你吸引了我&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#延长眨眼闭眼时长我不想听这些&quot; id=&quot;markdown-toc-延长眨眼闭眼时长我不想听这些&quot;&gt;延长眨眼闭眼时长：我不想听这些&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#斜眼看别让我看这些&quot; id=&quot;markdown-toc-斜眼看别让我看这些&quot;&gt;斜眼看：别让我看这些&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#嘟着嘴你竟然指望我相信那些&quot; id=&quot;markdown-toc-嘟着嘴你竟然指望我相信那些&quot;&gt;嘟着嘴：你竟然指望我相信那些&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#歪着头我听到&quot; id=&quot;markdown-toc-歪着头我听到&quot;&gt;歪着头：我听到&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#咬嘴唇我可应付不了&quot; id=&quot;markdown-toc-咬嘴唇我可应付不了&quot;&gt;咬嘴唇：我可应付不了&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#用舌头舔牙齿或嘴唇压力太大&quot; id=&quot;markdown-toc-用舌头舔牙齿或嘴唇压力太大&quot;&gt;用舌头舔牙齿或嘴唇：压力太大&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#触摸嘴唇我正在思考&quot; id=&quot;markdown-toc-触摸嘴唇我正在思考&quot;&gt;触摸嘴唇：我正在思考&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#突出下巴我看到你了只是放不下姿态跟你说话&quot; id=&quot;markdown-toc-突出下巴我看到你了只是放不下姿态跟你说话&quot;&gt;突出下巴：我看到你了，只是放不下姿态跟你说话&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#瞳孔放大这个我感兴趣&quot; id=&quot;markdown-toc-瞳孔放大这个我感兴趣&quot;&gt;瞳孔放大，这个我感兴趣&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#摸下巴决策决策&quot; id=&quot;markdown-toc-摸下巴决策决策&quot;&gt;摸下巴：决策，决策&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#女性突然探出手腕你可以靠近我&quot; id=&quot;markdown-toc-女性突然探出手腕你可以靠近我&quot;&gt;女性突然探出手腕：你可以靠近我&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#男士卷起袖子我很有魅力&quot; id=&quot;markdown-toc-男士卷起袖子我很有魅力&quot;&gt;男士卷起袖子，我很有魅力&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#呼出一口气我感到很挫折&quot; id=&quot;markdown-toc-呼出一口气我感到很挫折&quot;&gt;呼出一口气：我感到很挫折&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#用手托腮我感到很无聊&quot; id=&quot;markdown-toc-用手托腮我感到很无聊&quot;&gt;用手托腮：我感到很无聊&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第四节-别靠的太近但也别离得太远&quot; id=&quot;markdown-toc-第四节-别靠的太近但也别离得太远&quot;&gt;第四节 别靠的太近，但也别离得太远&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第五节-影响人们感受的座次安排&quot; id=&quot;markdown-toc-第五节-影响人们感受的座次安排&quot;&gt;第五节 影响人们感受的座次安排&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#具有权威的座位&quot; id=&quot;markdown-toc-具有权威的座位&quot;&gt;具有权威的座位&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#具有影响力的座位&quot; id=&quot;markdown-toc-具有影响力的座位&quot;&gt;具有影响力的座位&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#中立座位&quot; id=&quot;markdown-toc-中立座位&quot;&gt;中立座位&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#具有次影响力的座位&quot; id=&quot;markdown-toc-具有次影响力的座位&quot;&gt;具有次影响力的座位&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#看不见的座位&quot; id=&quot;markdown-toc-看不见的座位&quot;&gt;看不见的座位&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第六节-声音会泄漏你的秘密&quot; id=&quot;markdown-toc-第六节-声音会泄漏你的秘密&quot;&gt;第六节 声音会泄漏你的秘密&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#声音的化学反应&quot; id=&quot;markdown-toc-声音的化学反应&quot;&gt;声音的化学反应&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第七节-自然体香vs昂贵香水&quot; id=&quot;markdown-toc-第七节-自然体香vs昂贵香水&quot;&gt;第七节 自然体香VS昂贵香水&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#第四章-读心攻心&quot; id=&quot;markdown-toc-第四章-读心攻心&quot;&gt;第四章 读心攻心&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#第一节-共同的目标和敌人会让我们心连心&quot; id=&quot;markdown-toc-第一节-共同的目标和敌人会让我们心连心&quot;&gt;第一节 共同的目标和敌人会让我们心连心&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#共同的目标让我们高歌一曲&quot; id=&quot;markdown-toc-共同的目标让我们高歌一曲&quot;&gt;共同的目标：让我们高歌一曲&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#共同的敌人让我们一起讨厌他&quot; id=&quot;markdown-toc-共同的敌人让我们一起讨厌他&quot;&gt;共同的敌人：让我们一起讨厌他&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#提升信赖感的魔法&quot; id=&quot;markdown-toc-提升信赖感的魔法&quot;&gt;提升信赖感的魔法&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#可以哭但别在那都哭&quot; id=&quot;markdown-toc-可以哭但别在那都哭&quot;&gt;可以哭，但别在那都哭&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#失格台词我也许不感兴趣&quot; id=&quot;markdown-toc-失格台词我也许不感兴趣&quot;&gt;失格台词：我也许不感兴趣&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#情景分析这个场合是否合适&quot; id=&quot;markdown-toc-情景分析这个场合是否合适&quot;&gt;情景分析：这个场合是否合适&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#声音在说谎唏唏嘘嘘的谎言&quot; id=&quot;markdown-toc-声音在说谎唏唏嘘嘘的谎言&quot;&gt;声音在说谎：唏唏嘘嘘的谎言&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#线性谎言&quot; id=&quot;markdown-toc-线性谎言&quot;&gt;线性谎言&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#谎言的面目&quot; id=&quot;markdown-toc-谎言的面目&quot;&gt;谎言的面目&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#瞳孔散大眼神交流行为改变&quot; id=&quot;markdown-toc-瞳孔散大眼神交流行为改变&quot;&gt;瞳孔散大，眼神交流行为改变&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#不断吞咽口水&quot; id=&quot;markdown-toc-不断吞咽口水&quot;&gt;不断吞咽口水&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第二节-向外界展示你的最优个人形象&quot; id=&quot;markdown-toc-第二节-向外界展示你的最优个人形象&quot;&gt;第二节 向外界展示你的最优个人形象&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#矮个子要怎么表现自己的强势&quot; id=&quot;markdown-toc-矮个子要怎么表现自己的强势&quot;&gt;矮个子要怎么表现自己的强势&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#你在别人的眼里是怎样&quot; id=&quot;markdown-toc-你在别人的眼里是怎样&quot;&gt;你在别人的眼里是怎样&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样发现仗势欺人者&quot; id=&quot;markdown-toc-怎样发现仗势欺人者&quot;&gt;怎样发现仗势欺人者&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样促成你想要的交易&quot; id=&quot;markdown-toc-怎样促成你想要的交易&quot;&gt;怎样促成你想要的交易&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样谈成一笔生意&quot; id=&quot;markdown-toc-怎样谈成一笔生意&quot;&gt;怎样谈成一笔生意&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样接近群体&quot; id=&quot;markdown-toc-怎样接近群体&quot;&gt;怎样接近群体&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样激发别人的积极性&quot; id=&quot;markdown-toc-怎样激发别人的积极性&quot;&gt;怎样激发别人的积极性&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样让团队接受你的方案&quot; id=&quot;markdown-toc-怎样让团队接受你的方案&quot;&gt;怎样让团队接受你的方案&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#怎样表现你的友好&quot; id=&quot;markdown-toc-怎样表现你的友好&quot;&gt;怎样表现你的友好&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第三节-讲个小故事打破冷场&quot; id=&quot;markdown-toc-第三节-讲个小故事打破冷场&quot;&gt;第三节 讲个小故事打破冷场&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#小故事能让你们产生共鸣&quot; id=&quot;markdown-toc-小故事能让你们产生共鸣&quot;&gt;小故事能让你们产生共鸣&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#用第一人称来讲故事&quot; id=&quot;markdown-toc-用第一人称来讲故事&quot;&gt;用第一人称来讲故事&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#引人入胜的开场白&quot; id=&quot;markdown-toc-引人入胜的开场白&quot;&gt;引人入胜的开场白&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#勇于自嘲&quot; id=&quot;markdown-toc-勇于自嘲&quot;&gt;勇于自嘲&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#用生动形象的语言描述&quot; id=&quot;markdown-toc-用生动形象的语言描述&quot;&gt;用生动形象的语言描述&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#巧用对话&quot; id=&quot;markdown-toc-巧用对话&quot;&gt;巧用对话&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#提供对故事的解读&quot; id=&quot;markdown-toc-提供对故事的解读&quot;&gt;提供对故事的解读&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#调整故事的篇幅&quot; id=&quot;markdown-toc-调整故事的篇幅&quot;&gt;调整故事的篇幅&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#练习讲故事和复述故事&quot; id=&quot;markdown-toc-练习讲故事和复述故事&quot;&gt;练习讲故事和复述故事&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#顺应听众的喜好&quot; id=&quot;markdown-toc-顺应听众的喜好&quot;&gt;顺应听众的喜好&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#一语倾城&quot; id=&quot;markdown-toc-一语倾城&quot;&gt;一语倾城&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#各种各样的信息&quot; id=&quot;markdown-toc-各种各样的信息&quot;&gt;各种各样的信息&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#隐藏的谈话思路&quot; id=&quot;markdown-toc-隐藏的谈话思路&quot;&gt;隐藏的谈话思路&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第四节-男人女人都要懂的交流方式&quot; id=&quot;markdown-toc-第四节-男人女人都要懂的交流方式&quot;&gt;第四节 男人女人都要懂的交流方式&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#交流&quot; id=&quot;markdown-toc-交流&quot;&gt;交流&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第五节-扭转乾坤的心理法则&quot; id=&quot;markdown-toc-第五节-扭转乾坤的心理法则&quot;&gt;第五节 扭转乾坤的心理法则&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#情感银行里的储备&quot; id=&quot;markdown-toc-情感银行里的储备&quot;&gt;情感银行里的储备&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#树立身份地位&quot; id=&quot;markdown-toc-树立身份地位&quot;&gt;树立身份地位&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#从光环效应里沾光&quot; id=&quot;markdown-toc-从光环效应里沾光&quot;&gt;从光环效应里沾光&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#成为权威人士&quot; id=&quot;markdown-toc-成为权威人士&quot;&gt;成为权威人士&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#限量版&quot; id=&quot;markdown-toc-限量版&quot;&gt;限量版&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#诱饵&quot; id=&quot;markdown-toc-诱饵&quot;&gt;诱饵&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#提高期望值&quot; id=&quot;markdown-toc-提高期望值&quot;&gt;提高期望值&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#先推出高价品&quot; id=&quot;markdown-toc-先推出高价品&quot;&gt;先推出高价品&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#把两个极端作比较&quot; id=&quot;markdown-toc-把两个极端作比较&quot;&gt;把两个极端作比较&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#把你的主张用疑问的语气说出来&quot; id=&quot;markdown-toc-把你的主张用疑问的语气说出来&quot;&gt;把你的主张用疑问的语气说出来&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#让别人觉得这是他的主张&quot; id=&quot;markdown-toc-让别人觉得这是他的主张&quot;&gt;让别人觉得这是他的主张&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#避免消费者后悔&quot; id=&quot;markdown-toc-避免消费者后悔&quot;&gt;避免消费者后悔&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#让人们接触物品&quot; id=&quot;markdown-toc-让人们接触物品&quot;&gt;让人们接触物品&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#内疚感是巨大的激发因素&quot; id=&quot;markdown-toc-内疚感是巨大的激发因素&quot;&gt;内疚感是巨大的激发因素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#勇于转身离开&quot; id=&quot;markdown-toc-勇于转身离开&quot;&gt;勇于转身离开&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#第六节-让人折服于你的个人魅力&quot; id=&quot;markdown-toc-第六节-让人折服于你的个人魅力&quot;&gt;第六节 让人折服于你的个人魅力&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#不满情绪x变革远景x初步实践变革阻力&quot; id=&quot;markdown-toc-不满情绪x变革远景x初步实践变革阻力&quot;&gt;不满情绪x变革远景x初步实践&amp;gt;变革阻力&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#行动之前请先确定目标&quot; id=&quot;markdown-toc-行动之前请先确定目标&quot;&gt;行动之前请先确定目标&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#评估三步骤&quot; id=&quot;markdown-toc-评估三步骤&quot;&gt;评估三步骤&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#学会聆听&quot; id=&quot;markdown-toc-学会聆听&quot;&gt;学会聆听&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#湿度的自控力&quot; id=&quot;markdown-toc-湿度的自控力&quot;&gt;湿度的自控力&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#争取主动&quot; id=&quot;markdown-toc-争取主动&quot;&gt;争取主动&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#附录&quot; id=&quot;markdown-toc-附录&quot;&gt;附录&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;《从读心到攻心》读书笔记&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;序言01秒获得肯定的第一步&quot;&gt;序言：0.1秒获得肯定的第一步&lt;/h1&gt;

&lt;p&gt;实现目标意味着关注那些能带来肯定回应的因素，即向周围的人展示自己最好的一面&lt;/p&gt;

&lt;p&gt;获得别人肯定的回应还关系到如何每次都能在第一时间向初次见面的人在一瞬间展现出自我风采&lt;/p&gt;

&lt;p&gt;一旦用魅力征服了别人，想要改变看法就不容易&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;句式&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;是的，而且…&lt;/li&gt;
  &lt;li&gt;没有，不过…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;“是的，而且”能增加肯定的意味，“没有，不过”能减少负面感觉且不失为诚实的回答&lt;/p&gt;

&lt;h1 id=&quot;第一章-你知道的和你不知道的语言&quot;&gt;第一章 你知道的和你不知道的语言&lt;/h1&gt;

&lt;h2 id=&quot;第一节-那些泄露天机的肢体语言信号&quot;&gt;第一节 那些泄露天机的肢体语言信号&lt;/h2&gt;

&lt;p&gt;无论怎样，每个人都有感觉拘束的时候，这种拘束感往往源于特定情境下&lt;em&gt;你对自己的定位&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;细节会告诉你ta的特性&quot;&gt;细节会告诉你TA的特性&lt;/h3&gt;

&lt;p&gt;识别谎言的方法&lt;br /&gt;
先简单的问几个让别人回忆和思考一些事情的问题，观察她眼睛活动的规律，然后再问你想问的问题，如果对方眼睛的活动规律不同则有可能说谎&lt;/p&gt;

&lt;p&gt;改变自己的姿势来换发自己的自信风采&lt;br /&gt;
抬头挺胸，肩膀向后打开，面带微笑，摊开手脚，然后尽力伸展&lt;/p&gt;

&lt;p&gt;呼吸能识别一个人的紧张&lt;br /&gt;
短促的呼吸，时而的深呼吸能表明一个人的紧张&lt;/p&gt;

&lt;p&gt;腿部姿势能分辨谈话的兴趣&lt;br /&gt;
脚尖正朝你的话表示对谈话感兴趣，朝着门口则表示不感兴趣&lt;/p&gt;

&lt;h3 id=&quot;怎样延续你的好形象&quot;&gt;怎样延续你的好形象&lt;/h3&gt;

&lt;p&gt;只要不做一些劣迹事情就能把好形象延续下去&lt;/p&gt;

&lt;h3 id=&quot;最初4分钟ta会给你定性&quot;&gt;最初4分钟，TA会给你定性&lt;/h3&gt;

&lt;p&gt;精神抖擞的走路，微笑热情的主动握手&lt;br /&gt;
握手后注意一下对方需要的谈话距离，如果对方侧身以便听得更清楚则保持距离，如果站的太近就稍微调整距离&lt;br /&gt;
保持良好的姿势，双手自然下垂，不要双手交叉，脚尖朝向正在交谈的人&lt;/p&gt;

&lt;h2 id=&quot;第二节-各种情绪究竟源自哪里&quot;&gt;第二节 各种情绪究竟源自哪里&lt;/h2&gt;

&lt;h2 id=&quot;第三节-绝对不会被拒绝的问话策略&quot;&gt;第三节 绝对不会被拒绝的问话策略&lt;/h2&gt;

&lt;p&gt;先静下心来倾听，收获更多&lt;/p&gt;

&lt;h3 id=&quot;为何催眠师的柠檬更酸&quot;&gt;为何催眠师的柠檬更酸&lt;/h3&gt;

&lt;h3 id=&quot;你的独特卖点就是你的品牌&quot;&gt;你的独特卖点就是你的品牌&lt;/h3&gt;

&lt;p&gt;想要打动别人，一定要先对自己有充分的认识，对自己的优点有充分的认识&lt;br /&gt;
在营造融洽的关系和说服他人之前，首先应该有良好的自我感觉&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;打造自己的卖点&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;第二章-用金口玉言打动人心&quot;&gt;第二章 用金口玉言打动人心&lt;/h1&gt;

&lt;h2 id=&quot;第一节-语言是情绪的种子&quot;&gt;第一节 语言是情绪的种子&lt;/h2&gt;

&lt;p&gt;改变思维的架构，便能改变事情的意义和价值&lt;/p&gt;

&lt;p&gt;改变思维架构有两种方式：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;改变架构情景：提高某一行为或事情的价值&lt;/li&gt;
  &lt;li&gt;改变架构内容：探求同意事情的其他意义&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;让你的语言更有说服力&quot;&gt;让你的语言更有说服力&lt;/h3&gt;

&lt;p&gt;对别人运用改变思维架构的词语来说服别人&lt;/p&gt;

&lt;h3 id=&quot;永远奏效的皮格马利翁效应&quot;&gt;永远奏效的皮格马利翁效应&lt;/h3&gt;

&lt;p&gt;指抱有低期望值的人们往往表现差强人意，而抱有高期望值的人能表现的更好&lt;/p&gt;

&lt;h3 id=&quot;政治家的花招&quot;&gt;政治家的花招&lt;/h3&gt;

&lt;p&gt;通过修改词汇来改变观点的思想架构，更容易的说服别人&lt;/p&gt;

&lt;h2 id=&quot;第二节-走进ta的潜意识&quot;&gt;第二节 走进TA的潜意识&lt;/h2&gt;

&lt;h3 id=&quot;对方的沟通方式是什么&quot;&gt;对方的沟通方式是什么&lt;/h3&gt;

&lt;h3 id=&quot;你的沟通方式是什么&quot;&gt;你的沟通方式是什么&lt;/h3&gt;

&lt;h3 id=&quot;视觉传达者我看见&quot;&gt;视觉传达者：我看见&lt;/h3&gt;

&lt;h3 id=&quot;听觉传达者我听见&quot;&gt;听觉传达者：我听见&lt;/h3&gt;

&lt;h3 id=&quot;感觉传达者我感到&quot;&gt;感觉传达者：我感到&lt;/h3&gt;

&lt;h3 id=&quot;嗅觉传达者和味觉传达者&quot;&gt;嗅觉传达者和味觉传达者&lt;/h3&gt;

&lt;h3 id=&quot;给你们的交流加点佐料&quot;&gt;给你们的交流加点佐料&lt;/h3&gt;

&lt;p&gt;人不只属于一种传达者&lt;/p&gt;

&lt;h3 id=&quot;引导ta顺着你的思路谈话&quot;&gt;引导TA顺着你的思路谈话&lt;/h3&gt;

&lt;p&gt;肯定式对话框架&lt;br /&gt;
可以建立起一种潜意识下的同意模式，让其他人顺着你的思路进行&lt;/p&gt;

&lt;p&gt;常理：语言伪装&lt;br /&gt;
肯定式对话框架形成以后，接下来可以说一些常理，事实来夯实肯定式对话框架，然后夹杂一些相似的观点陈述&lt;/p&gt;

&lt;p&gt;预设：把需要认可的回答隐在已知部分中&lt;/p&gt;

&lt;p&gt;抽象化词语：摆脱临界因素干扰&lt;br /&gt;
运用带有积极意味的抽象化词语可以让谈话对象深入思考，然后可以悄悄的输出一条指令&lt;/p&gt;

&lt;p&gt;反义疑问句：
这种句式更容易获得别人同意，在肯定的陈述后可以带上否定的反问句加强肯定&lt;/p&gt;

&lt;h2 id=&quot;第三节-埋下积极的语言种子&quot;&gt;第三节 埋下积极的语言种子&lt;/h2&gt;

&lt;h3 id=&quot;能改变人的态度的次启动效应&quot;&gt;能改变人的态度的“次启动效应”&lt;/h3&gt;

&lt;p&gt;词启动效应是激活某种特定观念联系的过程&lt;/p&gt;

&lt;h3 id=&quot;为自己做个交际启动准备&quot;&gt;为自己做个交际启动准备&lt;/h3&gt;

&lt;p&gt;让自己的同伴帮你向素不相识的人做个词启动，作为回报，你也一样给同伴做词启动&lt;/p&gt;

&lt;h3 id=&quot;情景启动效应&quot;&gt;情景启动效应&lt;/h3&gt;

&lt;p&gt;环境也能作为一种启动，要预先了解当其他人置身某种环境时会产生什么联想，情绪&lt;/p&gt;

&lt;h3 id=&quot;虚拟记忆&quot;&gt;虚拟记忆&lt;/h3&gt;

&lt;h3 id=&quot;做标记&quot;&gt;做标记&lt;/h3&gt;

&lt;p&gt;做标记可以帮助别人发挥自己的能力，并挖掘出其才能&lt;/p&gt;

&lt;h3 id=&quot;美感的启动效应&quot;&gt;美感的启动效应&lt;/h3&gt;

&lt;h3 id=&quot;针对未来医生的启动效应&quot;&gt;针对未来医生的启动效应&lt;/h3&gt;

&lt;h2 id=&quot;第四节-神奇的镜像效应&quot;&gt;第四节 神奇的“镜像效应”&lt;/h2&gt;

&lt;h3 id=&quot;为什么我们会做一样的动作&quot;&gt;为什么我们会做一样的动作&lt;/h3&gt;

&lt;p&gt;用镜像法重复他人的动作，就像是在告诉别人：我和你是一样的&lt;/p&gt;

&lt;p&gt;首先用相同的沟通方式交流，肯定式交流中加入一些动作模仿&lt;/p&gt;

&lt;h3 id=&quot;默契的身体语言&quot;&gt;默契的身体语言&lt;/h3&gt;

&lt;p&gt;第一步：肢体动作&lt;br /&gt;
观察对方的一些肢体动作，用一些类似的动作予以回应&lt;/p&gt;

&lt;p&gt;第二步：面部表情&lt;br /&gt;
尝试保持表情跟他人的同步&lt;/p&gt;

&lt;p&gt;第三步：呼吸&lt;br /&gt;
尝试保持跟别人呼吸同步&lt;/p&gt;

&lt;p&gt;第四步：声音
熟悉别人的说话节律然后模仿&lt;/p&gt;

&lt;p&gt;第五步：眨眼
观察别人的眨眼频率，然后尽量模仿&lt;/p&gt;

&lt;h3 id=&quot;有些话能让你们更亲密&quot;&gt;有些话能让你们更亲密&lt;/h3&gt;

&lt;h3 id=&quot;应对不同的说话风格&quot;&gt;应对不同的说话风格&lt;/h3&gt;

&lt;h2 id=&quot;第五节-拉起ta记忆之海的船锚&quot;&gt;第五节 拉起TA记忆之海的船锚&lt;/h2&gt;

&lt;h3 id=&quot;怎样唤起他们的美好记忆&quot;&gt;怎样唤起他们的美好记忆&lt;/h3&gt;

&lt;h3 id=&quot;别再散发负面情绪&quot;&gt;别再散发负面情绪&lt;/h3&gt;

&lt;p&gt;小心沉锚效应传递自己的负面情绪&lt;/p&gt;

&lt;h3 id=&quot;给自己也来个沉锚效应&quot;&gt;给自己也来个“沉锚效应”&lt;/h3&gt;

&lt;p&gt;先回想一个记忆，唤起自己的感受，然后通过一个动作把这个记忆的感受和这个动作相关联&lt;/p&gt;

&lt;h3 id=&quot;生意场上必备的分层沉锚&quot;&gt;生意场上必备的“分层沉锚”&lt;/h3&gt;

&lt;p&gt;通过视觉，听觉，感觉来增强沉锚效应&lt;/p&gt;

&lt;h3 id=&quot;展现你的激情而不是弱点&quot;&gt;展现你的激情而不是弱点&lt;/h3&gt;

&lt;h1 id=&quot;第三章-在举手投足间征服人心&quot;&gt;第三章 在举手投足间征服人心&lt;/h1&gt;

&lt;h2 id=&quot;第一节-身体语言的密码&quot;&gt;第一节 身体语言的密码&lt;/h2&gt;

&lt;h2 id=&quot;第二节-不安分的手和脚&quot;&gt;第二节 不安分的手和脚&lt;/h2&gt;

&lt;h3 id=&quot;第一次握手让我们有所联系&quot;&gt;第一次握手：让我们有所联系&lt;/h3&gt;

&lt;h3 id=&quot;竖起大拇指好样的&quot;&gt;竖起大拇指：好样的&lt;/h3&gt;

&lt;h3 id=&quot;自己紧握双手就这样做吧&quot;&gt;自己紧握双手：就这样做吧&lt;/h3&gt;

&lt;h3 id=&quot;掌心朝上我没有什么好遮掩的&quot;&gt;掌心朝上：我没有什么好遮掩的&lt;/h3&gt;

&lt;h3 id=&quot;男人间的拥抱嘿哥们&quot;&gt;男人间的拥抱：嘿，哥们&lt;/h3&gt;

&lt;h3 id=&quot;拳头互撞与你同在&quot;&gt;拳头互撞：与你同在&lt;/h3&gt;

&lt;h3 id=&quot;击掌相庆我们太牛了&quot;&gt;击掌相庆：我们太牛了&lt;/h3&gt;

&lt;h3 id=&quot;双臂交抱离我远点&quot;&gt;双臂交抱：离我远点&lt;/h3&gt;

&lt;h3 id=&quot;指指点点打住看那边&quot;&gt;指指点点：打住，看那边&lt;/h3&gt;

&lt;h3 id=&quot;定向反应下意识靠近&quot;&gt;定向反应：下意识靠近&lt;/h3&gt;

&lt;h3 id=&quot;耸肩我不知道&quot;&gt;耸肩：我不知道&lt;/h3&gt;

&lt;h3 id=&quot;砍劈手势这就是我的方式&quot;&gt;砍劈手势：这就是我的方式&lt;/h3&gt;

&lt;h3 id=&quot;屈指计算同意我的观点吧&quot;&gt;屈指计算：同意我的观点吧&lt;/h3&gt;

&lt;h3 id=&quot;两手互搓我要提出想法了&quot;&gt;两手互搓：我要提出想法了&lt;/h3&gt;

&lt;h3 id=&quot;掌心朝下这件事应该这样做&quot;&gt;掌心朝下：这件事应该这样做&lt;/h3&gt;

&lt;h3 id=&quot;两手叉腰别来惹我&quot;&gt;两手叉腰：别来惹我&lt;/h3&gt;

&lt;h3 id=&quot;十指相抵这儿我说了算&quot;&gt;十指相抵：这儿我说了算&lt;/h3&gt;

&lt;h3 id=&quot;双手放在背后你威胁不到我&quot;&gt;双手放在背后：你威胁不到我&lt;/h3&gt;

&lt;h3 id=&quot;咬手指我没有安全感&quot;&gt;咬手指：我没有安全感&lt;/h3&gt;

&lt;h3 id=&quot;卷起脚趾千万别注意到我&quot;&gt;卷起脚趾：千万别注意到我&lt;/h3&gt;

&lt;h3 id=&quot;扭着手我需要安慰&quot;&gt;扭着手：我需要安慰&lt;/h3&gt;

&lt;h3 id=&quot;抓耳挠腮啊我也不知道&quot;&gt;抓耳挠腮：啊？我也不知道&lt;/h3&gt;

&lt;h3 id=&quot;抚摸脖子压力真大啊&quot;&gt;抚摸脖子：压力真大啊&lt;/h3&gt;

&lt;h3 id=&quot;双手插袋我不是一个开朗的人&quot;&gt;双手插袋：我不是一个开朗的人&lt;/h3&gt;

&lt;h3 id=&quot;拇指朝外我浑身是劲&quot;&gt;拇指朝外：我浑身是劲&lt;/h3&gt;

&lt;h3 id=&quot;脚打拍子我很兴奋&quot;&gt;脚打拍子：我很兴奋&lt;/h3&gt;

&lt;h3 id=&quot;焦躁不安的双脚我控制不了我的情绪&quot;&gt;焦躁不安的双脚：我控制不了我的情绪&lt;/h3&gt;

&lt;h3 id=&quot;双脚交叉我不赞同&quot;&gt;双脚交叉：我不赞同&lt;/h3&gt;

&lt;h3 id=&quot;僵硬的动作我可不想露馅&quot;&gt;僵硬的动作：我可不想露馅&lt;/h3&gt;

&lt;h3 id=&quot;遮羞动作我很脆弱&quot;&gt;遮羞动作：我很脆弱&lt;/h3&gt;

&lt;h3 id=&quot;测量动作尺寸有这么大&quot;&gt;测量动作：尺寸有这么大&lt;/h3&gt;

&lt;h3 id=&quot;侧身动作谈话到此结束&quot;&gt;侧身动作，谈话到此结束&lt;/h3&gt;

&lt;h3 id=&quot;自我激励或抚慰一切都会好起来&quot;&gt;自我激励或抚慰：一切都会好起来&lt;/h3&gt;

&lt;h3 id=&quot;克制着不去做任何手势我正在撒谎&quot;&gt;克制着不去做任何手势：我正在撒谎&lt;/h3&gt;

&lt;h3 id=&quot;用运动员起跑姿势坐着我想离开&quot;&gt;用运动员起跑姿势坐着：我想离开&lt;/h3&gt;

&lt;h2 id=&quot;第三节-脸部微表情泄漏的秘密&quot;&gt;第三节 脸部微表情泄漏的秘密&lt;/h2&gt;

&lt;h3 id=&quot;点头我同意&quot;&gt;点头：我同意&lt;/h3&gt;

&lt;h3 id=&quot;见面或告别时的亲吻我喜欢你&quot;&gt;见面或告别时的亲吻：我喜欢你&lt;/h3&gt;

&lt;h3 id=&quot;摇头动作不不不&quot;&gt;摇头动作：不、不、不&lt;/h3&gt;

&lt;h3 id=&quot;摸摸鼻子这场谈话让我不舒服&quot;&gt;摸摸鼻子：这场谈话让我不舒服&lt;/h3&gt;

&lt;h3 id=&quot;转动眼球&quot;&gt;转动眼球&lt;/h3&gt;

&lt;h3 id=&quot;低头俯首我被打败了&quot;&gt;低头俯首：我被打败了&lt;/h3&gt;

&lt;h3 id=&quot;目光朝下我不敢直视你&quot;&gt;目光朝下：我不敢直视你&lt;/h3&gt;

&lt;h3 id=&quot;噘嘴&quot;&gt;噘嘴&lt;/h3&gt;

&lt;h3 id=&quot;眨眼hi亲爱的&quot;&gt;眨眼：Hi，亲爱的&lt;/h3&gt;

&lt;h3 id=&quot;收缩下巴怒了&quot;&gt;收缩下巴：怒了&lt;/h3&gt;

&lt;h3 id=&quot;扬起下巴我赢了&quot;&gt;扬起下巴：我赢了&lt;/h3&gt;

&lt;h3 id=&quot;从眼睛上方看人您拿我寻开心啊&quot;&gt;从眼睛上方看人：您拿我寻开心啊&lt;/h3&gt;

&lt;h3 id=&quot;禁闭嘴唇我正在努力不让自己说出来&quot;&gt;禁闭嘴唇：我正在努力不让自己说出来&lt;/h3&gt;

&lt;h3 id=&quot;嘴巴向内抿我收回我的话&quot;&gt;嘴巴向内抿：我收回我的话&lt;/h3&gt;

&lt;h3 id=&quot;匆匆一瞥你吸引了我&quot;&gt;匆匆一瞥：你吸引了我&lt;/h3&gt;

&lt;h3 id=&quot;延长眨眼闭眼时长我不想听这些&quot;&gt;延长眨眼闭眼时长：我不想听这些&lt;/h3&gt;

&lt;h3 id=&quot;斜眼看别让我看这些&quot;&gt;斜眼看：别让我看这些&lt;/h3&gt;

&lt;h3 id=&quot;嘟着嘴你竟然指望我相信那些&quot;&gt;嘟着嘴：你竟然指望我相信那些&lt;/h3&gt;

&lt;h3 id=&quot;歪着头我听到&quot;&gt;歪着头：我听到&lt;/h3&gt;

&lt;h3 id=&quot;咬嘴唇我可应付不了&quot;&gt;咬嘴唇：我可应付不了&lt;/h3&gt;

&lt;h3 id=&quot;用舌头舔牙齿或嘴唇压力太大&quot;&gt;用舌头舔牙齿或嘴唇：压力太大&lt;/h3&gt;

&lt;h3 id=&quot;触摸嘴唇我正在思考&quot;&gt;触摸嘴唇：我正在思考&lt;/h3&gt;

&lt;h3 id=&quot;突出下巴我看到你了只是放不下姿态跟你说话&quot;&gt;突出下巴：我看到你了，只是放不下姿态跟你说话&lt;/h3&gt;

&lt;h3 id=&quot;瞳孔放大这个我感兴趣&quot;&gt;瞳孔放大，这个我感兴趣&lt;/h3&gt;

&lt;h3 id=&quot;摸下巴决策决策&quot;&gt;摸下巴：决策，决策&lt;/h3&gt;

&lt;h3 id=&quot;女性突然探出手腕你可以靠近我&quot;&gt;女性突然探出手腕：你可以靠近我&lt;/h3&gt;

&lt;h3 id=&quot;男士卷起袖子我很有魅力&quot;&gt;男士卷起袖子，我很有魅力&lt;/h3&gt;

&lt;h3 id=&quot;呼出一口气我感到很挫折&quot;&gt;呼出一口气：我感到很挫折&lt;/h3&gt;

&lt;h3 id=&quot;用手托腮我感到很无聊&quot;&gt;用手托腮：我感到很无聊&lt;/h3&gt;

&lt;h2 id=&quot;第四节-别靠的太近但也别离得太远&quot;&gt;第四节 别靠的太近，但也别离得太远&lt;/h2&gt;

&lt;h2 id=&quot;第五节-影响人们感受的座次安排&quot;&gt;第五节 影响人们感受的座次安排&lt;/h2&gt;

&lt;h3 id=&quot;具有权威的座位&quot;&gt;具有权威的座位&lt;/h3&gt;

&lt;p&gt;长桌的两端&lt;/p&gt;

&lt;h3 id=&quot;具有影响力的座位&quot;&gt;具有影响力的座位&lt;/h3&gt;

&lt;p&gt;老板身边的两个座位&lt;/p&gt;

&lt;h3 id=&quot;中立座位&quot;&gt;中立座位&lt;/h3&gt;

&lt;h3 id=&quot;具有次影响力的座位&quot;&gt;具有次影响力的座位&lt;/h3&gt;

&lt;h3 id=&quot;看不见的座位&quot;&gt;看不见的座位&lt;/h3&gt;

&lt;h2 id=&quot;第六节-声音会泄漏你的秘密&quot;&gt;第六节 声音会泄漏你的秘密&lt;/h2&gt;

&lt;h3 id=&quot;声音的化学反应&quot;&gt;声音的化学反应&lt;/h3&gt;

&lt;p&gt;语调：让自己的声音变得抑扬顿挫，就可以马上改变别人对你的印象&lt;/p&gt;

&lt;p&gt;千万不要害怕停顿，在沉默时坦然自若，反而能够帮助你吸引观众的注意力&lt;/p&gt;

&lt;h2 id=&quot;第七节-自然体香vs昂贵香水&quot;&gt;第七节 自然体香VS昂贵香水&lt;/h2&gt;

&lt;h1 id=&quot;第四章-读心攻心&quot;&gt;第四章 读心攻心&lt;/h1&gt;

&lt;h2 id=&quot;第一节-共同的目标和敌人会让我们心连心&quot;&gt;第一节 共同的目标和敌人会让我们心连心&lt;/h2&gt;

&lt;h3 id=&quot;共同的目标让我们高歌一曲&quot;&gt;共同的目标：让我们高歌一曲&lt;/h3&gt;

&lt;h3 id=&quot;共同的敌人让我们一起讨厌他&quot;&gt;共同的敌人：让我们一起讨厌他&lt;/h3&gt;

&lt;h3 id=&quot;提升信赖感的魔法&quot;&gt;提升信赖感的魔法&lt;/h3&gt;

&lt;h3 id=&quot;可以哭但别在那都哭&quot;&gt;可以哭，但别在那都哭&lt;/h3&gt;

&lt;h3 id=&quot;失格台词我也许不感兴趣&quot;&gt;失格台词：我也许不感兴趣&lt;/h3&gt;

&lt;h3 id=&quot;情景分析这个场合是否合适&quot;&gt;情景分析：这个场合是否合适&lt;/h3&gt;

&lt;h3 id=&quot;声音在说谎唏唏嘘嘘的谎言&quot;&gt;声音在说谎：唏唏嘘嘘的谎言&lt;/h3&gt;

&lt;h3 id=&quot;线性谎言&quot;&gt;线性谎言&lt;/h3&gt;

&lt;h3 id=&quot;谎言的面目&quot;&gt;谎言的面目&lt;/h3&gt;

&lt;h3 id=&quot;瞳孔散大眼神交流行为改变&quot;&gt;瞳孔散大，眼神交流行为改变&lt;/h3&gt;

&lt;h3 id=&quot;不断吞咽口水&quot;&gt;不断吞咽口水&lt;/h3&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;h2 id=&quot;第二节-向外界展示你的最优个人形象&quot;&gt;第二节 向外界展示你的最优个人形象&lt;/h2&gt;

&lt;h3 id=&quot;矮个子要怎么表现自己的强势&quot;&gt;矮个子要怎么表现自己的强势&lt;/h3&gt;

&lt;p&gt;站在高处，伸直脖子，双肩打开，挺起胸膛，体重均匀分散在双脚&lt;/p&gt;

&lt;h3 id=&quot;你在别人的眼里是怎样&quot;&gt;你在别人的眼里是怎样&lt;/h3&gt;

&lt;h3 id=&quot;怎样发现仗势欺人者&quot;&gt;怎样发现仗势欺人者&lt;/h3&gt;

&lt;h3 id=&quot;怎样促成你想要的交易&quot;&gt;怎样促成你想要的交易&lt;/h3&gt;

&lt;h3 id=&quot;怎样谈成一笔生意&quot;&gt;怎样谈成一笔生意&lt;/h3&gt;

&lt;h3 id=&quot;怎样接近群体&quot;&gt;怎样接近群体&lt;/h3&gt;

&lt;h3 id=&quot;怎样激发别人的积极性&quot;&gt;怎样激发别人的积极性&lt;/h3&gt;

&lt;h3 id=&quot;怎样让团队接受你的方案&quot;&gt;怎样让团队接受你的方案&lt;/h3&gt;

&lt;h3 id=&quot;怎样表现你的友好&quot;&gt;怎样表现你的友好&lt;/h3&gt;

&lt;p&gt;倾听&lt;/p&gt;

&lt;h2 id=&quot;第三节-讲个小故事打破冷场&quot;&gt;第三节 讲个小故事打破冷场&lt;/h2&gt;

&lt;p&gt;精心准备的故事&lt;/p&gt;

&lt;p&gt;小故事虽有效，但不能透露太多，特别是那些只能与最亲密朋友分享的个人秘密&lt;/p&gt;

&lt;h3 id=&quot;小故事能让你们产生共鸣&quot;&gt;小故事能让你们产生共鸣&lt;/h3&gt;

&lt;h3 id=&quot;用第一人称来讲故事&quot;&gt;用第一人称来讲故事&lt;/h3&gt;

&lt;h3 id=&quot;引人入胜的开场白&quot;&gt;引人入胜的开场白&lt;/h3&gt;

&lt;p&gt;第一句话可以定基调，激起别人的兴趣&lt;/p&gt;

&lt;h3 id=&quot;勇于自嘲&quot;&gt;勇于自嘲&lt;/h3&gt;

&lt;p&gt;不要影响到自尊，然后谈谈自己怎么处理的&lt;/p&gt;

&lt;h3 id=&quot;用生动形象的语言描述&quot;&gt;用生动形象的语言描述&lt;/h3&gt;

&lt;h3 id=&quot;巧用对话&quot;&gt;巧用对话&lt;/h3&gt;

&lt;h3 id=&quot;提供对故事的解读&quot;&gt;提供对故事的解读&lt;/h3&gt;

&lt;h3 id=&quot;调整故事的篇幅&quot;&gt;调整故事的篇幅&lt;/h3&gt;

&lt;h3 id=&quot;练习讲故事和复述故事&quot;&gt;练习讲故事和复述故事&lt;/h3&gt;

&lt;h3 id=&quot;顺应听众的喜好&quot;&gt;顺应听众的喜好&lt;/h3&gt;

&lt;h3 id=&quot;一语倾城&quot;&gt;一语倾城&lt;/h3&gt;

&lt;h3 id=&quot;各种各样的信息&quot;&gt;各种各样的信息&lt;/h3&gt;

&lt;h3 id=&quot;隐藏的谈话思路&quot;&gt;隐藏的谈话思路&lt;/h3&gt;

&lt;h2 id=&quot;第四节-男人女人都要懂的交流方式&quot;&gt;第四节 男人女人都要懂的交流方式&lt;/h2&gt;

&lt;h3 id=&quot;交流&quot;&gt;交流&lt;/h3&gt;

&lt;p&gt;男性一般是问题的解决者，而女性只是希望有人倾听&lt;/p&gt;

&lt;h2 id=&quot;第五节-扭转乾坤的心理法则&quot;&gt;第五节 扭转乾坤的心理法则&lt;/h2&gt;

&lt;h3 id=&quot;情感银行里的储备&quot;&gt;情感银行里的储备&lt;/h3&gt;

&lt;p&gt;乐于助人能为将来的自己换取回报&lt;/p&gt;

&lt;h3 id=&quot;树立身份地位&quot;&gt;树立身份地位&lt;/h3&gt;

&lt;h3 id=&quot;从光环效应里沾光&quot;&gt;从光环效应里沾光&lt;/h3&gt;

&lt;h3 id=&quot;成为权威人士&quot;&gt;成为权威人士&lt;/h3&gt;

&lt;h3 id=&quot;限量版&quot;&gt;限量版&lt;/h3&gt;

&lt;h3 id=&quot;诱饵&quot;&gt;诱饵&lt;/h3&gt;

&lt;h3 id=&quot;提高期望值&quot;&gt;提高期望值&lt;/h3&gt;

&lt;h3 id=&quot;先推出高价品&quot;&gt;先推出高价品&lt;/h3&gt;

&lt;h3 id=&quot;把两个极端作比较&quot;&gt;把两个极端作比较&lt;/h3&gt;

&lt;h3 id=&quot;把你的主张用疑问的语气说出来&quot;&gt;把你的主张用疑问的语气说出来&lt;/h3&gt;

&lt;h3 id=&quot;让别人觉得这是他的主张&quot;&gt;让别人觉得这是他的主张&lt;/h3&gt;

&lt;h3 id=&quot;避免消费者后悔&quot;&gt;避免消费者后悔&lt;/h3&gt;

&lt;h3 id=&quot;让人们接触物品&quot;&gt;让人们接触物品&lt;/h3&gt;

&lt;h3 id=&quot;内疚感是巨大的激发因素&quot;&gt;内疚感是巨大的激发因素&lt;/h3&gt;

&lt;h3 id=&quot;勇于转身离开&quot;&gt;勇于转身离开&lt;/h3&gt;

&lt;h2 id=&quot;第六节-让人折服于你的个人魅力&quot;&gt;第六节 让人折服于你的个人魅力&lt;/h2&gt;

&lt;h3 id=&quot;不满情绪x变革远景x初步实践变革阻力&quot;&gt;不满情绪x变革远景x初步实践&amp;gt;变革阻力&lt;/h3&gt;

&lt;h3 id=&quot;行动之前请先确定目标&quot;&gt;行动之前请先确定目标&lt;/h3&gt;

&lt;h3 id=&quot;评估三步骤&quot;&gt;评估三步骤&lt;/h3&gt;

&lt;h3 id=&quot;学会聆听&quot;&gt;学会聆听&lt;/h3&gt;

&lt;h3 id=&quot;湿度的自控力&quot;&gt;湿度的自控力&lt;/h3&gt;

&lt;h3 id=&quot;争取主动&quot;&gt;争取主动&lt;/h3&gt;

&lt;h1 id=&quot;附录&quot;&gt;附录&lt;/h1&gt;

</description>
        <pubDate>Mon, 06 Feb 2017 10:00:00 +0800</pubDate>
        <link>/2017/02/06/%E4%BB%8E%E8%AF%BB%E5%BF%83%E5%88%B0%E6%94%BB%E5%BF%83/</link>
        <guid isPermaLink="true">/2017/02/06/%E4%BB%8E%E8%AF%BB%E5%BF%83%E5%88%B0%E6%94%BB%E5%BF%83/</guid>
        
        <category>沟通</category>
        
        
        <category>读书笔记</category>
        
      </item>
    
      <item>
        <title>Java项目性能优化简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#性能问题的现状&quot; id=&quot;markdown-toc-性能问题的现状&quot;&gt;性能问题的现状&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#性能分析的两种方法&quot; id=&quot;markdown-toc-性能分析的两种方法&quot;&gt;性能分析的两种方法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#改善性能的3种活动&quot; id=&quot;markdown-toc-改善性能的3种活动&quot;&gt;改善性能的3种活动&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对Java项目性能优化的基本知识的汇总和个人理解&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;性能问题的现状&quot;&gt;性能问题的现状&lt;/h2&gt;

&lt;p&gt;传统的项目开发过程：分析-&amp;gt;设计-&amp;gt;编码-&amp;gt;测试，缺少对性能问题的考虑，导致开发出来的系统很可能不符合性能的需求&lt;/p&gt;

&lt;p&gt;应该在分析的阶段就提炼出性能的需求，以用例的形式表达处理，在设计阶段加以考虑潜在的新能问题，并在测试阶段之前增加性能测试用例和分析来弥补，所以最终的开发流程是：&lt;br /&gt;
分析-&amp;gt;设计-&amp;gt;编码-&amp;gt;性能测试-&amp;gt;测试&lt;/p&gt;

&lt;h2 id=&quot;性能分析的两种方法&quot;&gt;性能分析的两种方法&lt;/h2&gt;

&lt;p&gt;通过从不同的方向来寻找可优化的空间&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自顶向下：从应用层-&amp;gt;容器-&amp;gt;虚拟机-&amp;gt;… 来寻找可优化的空间，通过监控应用，容器，操作系统的性能数据找出问题所在，执行某些措施来优化性能&lt;/li&gt;
  &lt;li&gt;自底向上：从CPU-&amp;gt;操作系统-&amp;gt;.. 通过监控底层的信息来发现不同架构中应用的性能差异，对环境根据性能分析数据来调优；例如一定负载下CPU的指令数，高速缓存未命中率等，通过某些措施(如使用JIT编译器优化机器码)来改善硬件和操作系统的性能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;很多时候，CPU的架构会对应用的性能起到关键的影响，所以需要恰当的选择,例如多核和每核多硬件线程比多CPU更适合需要大量线程的应用，因为当CPU就绪，而某个硬件线程所需的资源未就绪时，可以在下一个时钟周期内切换到同CPU中的另一个硬件线程，而单硬件线程的CPU切换线程需要耗费数百个时钟周期；&lt;br /&gt;
另一方面，多硬件线程的CPU的时钟频率比较慢，所以当应用所需的线程不多时，单硬件线程的CPU的性能要比多硬件线程的CPU要好&lt;/p&gt;

&lt;h2 id=&quot;改善性能的3种活动&quot;&gt;改善性能的3种活动&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;性能监控：以非浸入式的方式收集和查看应用的性能数据&lt;/li&gt;
  &lt;li&gt;性能分析：以浸入式的方式收集运行性能数据，会对应用的延迟和吞吐率产生影响，集中于被报告的性能问题&lt;/li&gt;
  &lt;li&gt;性能调优：通过更改运行配置参数，代码等多种方式来改善应用的性能，一般在性能监控和性能分析后进行&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;《Java性能优化权威指南》&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 10:00:00 +0800</pubDate>
        <link>/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_%E7%AD%96%E7%95%A5-%E6%96%B9%E6%B3%95%E5%92%8C%E6%96%B9%E6%B3%95%E8%AE%BA/</link>
        <guid isPermaLink="true">/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_%E7%AD%96%E7%95%A5-%E6%96%B9%E6%B3%95%E5%92%8C%E6%96%B9%E6%B3%95%E8%AE%BA/</guid>
        
        <category>性能优化</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>操作系统系能监控简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#操作系统性能数据的监控&quot; id=&quot;markdown-toc-操作系统性能数据的监控&quot;&gt;操作系统性能数据的监控&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#cpu使用率&quot; id=&quot;markdown-toc-cpu使用率&quot;&gt;CPU使用率&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cpu调度程序运行队列&quot; id=&quot;markdown-toc-cpu调度程序运行队列&quot;&gt;CPU调度程序运行队列&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#内存使用率&quot; id=&quot;markdown-toc-内存使用率&quot;&gt;内存使用率&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#监控锁竞争&quot; id=&quot;markdown-toc-监控锁竞争&quot;&gt;监控锁竞争&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#监控抢占式上下文切换&quot; id=&quot;markdown-toc-监控抢占式上下文切换&quot;&gt;监控抢占式上下文切换&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#监控网路io使用率&quot; id=&quot;markdown-toc-监控网路io使用率&quot;&gt;监控网路I/O使用率&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#磁盘io使用率&quot; id=&quot;markdown-toc-磁盘io使用率&quot;&gt;磁盘I/O使用率&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对操作系统系能监控的基本知识的汇总和个人理解&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;性能监控的关键在于知道该监控什么数据&lt;/p&gt;

&lt;h2 id=&quot;操作系统性能数据的监控&quot;&gt;操作系统性能数据的监控&lt;/h2&gt;

&lt;p&gt;操作系统自带一些长期收集系统性能数据的日志工具如：sar，kstat，cpustat等&lt;/p&gt;

&lt;h3 id=&quot;cpu使用率&quot;&gt;CPU使用率&lt;/h3&gt;

&lt;p&gt;CPU使用率分为两种，一种是用户态，一种是系统态&lt;br /&gt;
用户态使用率是指应用使用CPU所占的比率，而系统态是进行系统调用时消耗CPU的比率&lt;br /&gt;
系统态CPU使用意味着共享资源的竞争，I/O设备之间的交互，所以要想提高性能应该尽量降低系统态CPU的使用&lt;br /&gt;
另外，对于计算密集型的应用还需要监控每时钟指令数，查看是否存在浪费CPU时钟周期的因素(如高速缓存未命中)等，但这需要特别的监控工具&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Task Manager，Performance Monitor，Windows typeperf &lt;br /&gt;
Linux：System Monitor，vmstat，mpstat，top，jstack&lt;br /&gt;
Solaris：System Monitor，cpubar，vmstat，mpstat，prstat，jstack&lt;/p&gt;

&lt;h3 id=&quot;cpu调度程序运行队列&quot;&gt;CPU调度程序运行队列&lt;/h3&gt;

&lt;p&gt;运行队列中是就绪的任务，它们在等待CPU的调度，如果准备运行的轻量级进程数超过系统能处理(硬件线程数)的上限，运行队列就会很长&lt;br /&gt;
改善的方法是：一、增加CPU数，二、改善算法和数据结构来减少线程对CPU使用&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Performance Monitor，typeperf &lt;br /&gt;
Solaris：cpubar，vmstat &lt;br /&gt;
Linux：vmstat&lt;/p&gt;

&lt;h3 id=&quot;内存使用率&quot;&gt;内存使用率&lt;/h3&gt;

&lt;p&gt;需要监控系统内存的相关属性：页面调度、页面交换、加锁、线程上下文切换等&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Performance Monitor，typeperf&lt;br /&gt;
Solaris：vmstat&lt;br /&gt;
Linux：vmstat&lt;/p&gt;

&lt;h3 id=&quot;监控锁竞争&quot;&gt;监控锁竞争&lt;/h3&gt;

&lt;p&gt;锁竞争导致线程的让步式上下文切换，耗费大量的时钟&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：借助外部工具Performance Analyzer&lt;br /&gt;
Solaris：mpstat&lt;br /&gt;
Linux：pidstat&lt;/p&gt;

&lt;h3 id=&quot;监控抢占式上下文切换&quot;&gt;监控抢占式上下文切换&lt;/h3&gt;

&lt;p&gt;抢占式上下文切换表明线程数大于硬件线程数&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Task Manager等&lt;br /&gt;
Solaris：mpstat，prstat&lt;br /&gt;
Linux：pidstat&lt;/p&gt;

&lt;h3 id=&quot;监控网路io使用率&quot;&gt;监控网路I/O使用率&lt;/h3&gt;

&lt;p&gt;当应用不能高效使用网路I/O就会导致数据进入操作系统的缓冲，导致延迟&lt;/p&gt;

&lt;p&gt;可用用NIO库提高Java应用的网路I/O性能&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Task Manager等&lt;br /&gt;
Solaris：nicstat&lt;br /&gt;
Linux：nicstat&lt;/p&gt;

&lt;h3 id=&quot;磁盘io使用率&quot;&gt;磁盘I/O使用率&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Windows：Performance Monitor&lt;br /&gt;
Solaris：iostat&lt;br /&gt;
Linux：iostat&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;《Java性能优化权威指南》&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 10:00:00 +0800</pubDate>
        <link>/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</link>
        <guid isPermaLink="true">/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</guid>
        
        <category>性能监控</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>Java应用性能分析简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#方法分析&quot; id=&quot;markdown-toc-方法分析&quot;&gt;方法分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#内存分析&quot; id=&quot;markdown-toc-内存分析&quot;&gt;内存分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#性能优化机会&quot; id=&quot;markdown-toc-性能优化机会&quot;&gt;性能优化机会&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对Java应用性能分析的基本知识的汇总和个人理解&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Java应用的性能分析主要包括 方法分析，锁竞争分析 和 内存分析&lt;/p&gt;

&lt;p&gt;主要的分析工具包括：Performance Analyzer, VisualVM&lt;/p&gt;

&lt;h2 id=&quot;方法分析&quot;&gt;方法分析&lt;/h2&gt;

&lt;p&gt;方法分析工具抓取到的信息中，一般查看的数据包括：&lt;br /&gt;
方法占用的用户态CPU时间，独占用户态CPU时间&lt;br /&gt;
方法间的调用关系&lt;/p&gt;

&lt;p&gt;通过分析方法的占用时间来定位导致系统瓶颈的嫌疑方法&lt;br /&gt;
例如，某些方法使用了运行与系统态的I/O，消耗了大量时间，可以考虑用缓冲或更高效I/O库来进行优化&lt;br /&gt;
例如，某些方法因为锁竞争浪费大量CPU时间，考虑考虑用更高效的并发数据结构，或消除竞争等方法来优化&lt;/p&gt;

&lt;h2 id=&quot;内存分析&quot;&gt;内存分析&lt;/h2&gt;

&lt;p&gt;通过分析工具可以抓取到，内存中各种对象的内存占用量，可以通过分析某些占用内存较多对象存活的代数来定位是否存在内存泄漏，并能定位创建这些对象的方法来定位内存泄漏的代码&lt;/p&gt;

&lt;p&gt;JVM在发生OOM时会生成一个堆转存，这是一个内存的快照，可以通过上述工具来对当时的内存进行分析，找出内存泄漏的地方&lt;/p&gt;

&lt;p&gt;通过内存分析能还可以发现是否存在因不合理的初始设置大量创建没用的小对象的集合数据结构，通过优化初始设置来优化这些集合数据结构的使用&lt;/p&gt;

&lt;h2 id=&quot;性能优化机会&quot;&gt;性能优化机会&lt;/h2&gt;

&lt;p&gt;对Java应用性能优化的机会主要有3种&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;使用更高效的算法&lt;/li&gt;
  &lt;li&gt;减少锁竞争&lt;/li&gt;
  &lt;li&gt;为算法生成更有效率的代码&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;当通过性能分析找到影响应用性能的根源时，主要通过这3种方法来优化&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;《Java性能优化权威指南》&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 10:00:00 +0800</pubDate>
        <link>/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_Java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
        <guid isPermaLink="true">/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_Java%E5%BA%94%E7%94%A8%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
        
        <category>性能分析</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>JVM性能调优入门</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#应用的系统需求&quot; id=&quot;markdown-toc-应用的系统需求&quot;&gt;应用的系统需求&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jvm调优的步骤&quot; id=&quot;markdown-toc-jvm调优的步骤&quot;&gt;JVM调优的步骤&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#jvm-gc调优&quot; id=&quot;markdown-toc-jvm-gc调优&quot;&gt;JVM GC调优&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gc的自适应调优&quot; id=&quot;markdown-toc-gc的自适应调优&quot;&gt;GC的自适应调优&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#并行gc调优建议&quot; id=&quot;markdown-toc-并行gc调优建议&quot;&gt;并行GC调优建议&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#g1调优建议&quot; id=&quot;markdown-toc-g1调优建议&quot;&gt;G1调优建议&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#复杂的gc调优&quot; id=&quot;markdown-toc-复杂的gc调优&quot;&gt;复杂的GC调优&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#调优gc并确定jvm内存使用量&quot; id=&quot;markdown-toc-调优gc并确定jvm内存使用量&quot;&gt;调优GC并确定JVM内存使用量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#调优gc延迟&quot; id=&quot;markdown-toc-调优gc延迟&quot;&gt;调优GC延迟&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#对并行gc的调优&quot; id=&quot;markdown-toc-对并行gc的调优&quot;&gt;对并行GC的调优&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#对cms的调优&quot; id=&quot;markdown-toc-对cms的调优&quot;&gt;对CMS的调优&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#调优gc的吞吐量&quot; id=&quot;markdown-toc-调优gc的吞吐量&quot;&gt;调优GC的吞吐量&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gc调优用到的命令行参数&quot; id=&quot;markdown-toc-gc调优用到的命令行参数&quot;&gt;GC调优用到的命令行参数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对JVM性能调优的基本知识的汇总和个人理解&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;为什么需要JVM调优？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JVM上运行的应用多种多样，JVM为了满足应用不同的行为特征和性能需求，提供了很多配置，应用可以按照其特点来配置JVM获得更好的性能&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是JVM调优？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据应用的行为特征来配置JVM的启动参数，让应用获得其需要的性能&lt;br /&gt;
性能数据一般包括：应用启动时间，内存使用量，吞吐率，延迟&lt;/p&gt;

&lt;h2 id=&quot;应用的系统需求&quot;&gt;应用的系统需求&lt;/h2&gt;

&lt;p&gt;在进行JVM调优之前，首先要确定应用的系统需求，这个需求应该在设计阶段已经定义好了，系统需求包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;吞吐量：单位时间内应用处理的工作量&lt;/li&gt;
  &lt;li&gt;响应时间：是指不考虑吞吐量的影响，应用接收到指令后开始工作直到完成的时长，&lt;/li&gt;
  &lt;li&gt;内存消耗：同等的吞吐量，响应时间，可用性和可管理性的条件下的内存消耗&lt;/li&gt;
  &lt;li&gt;启动时间：应用初始化所需要的时间&lt;/li&gt;
  &lt;li&gt;可用性：可以理解成健壮性，当系统的某些部分不能工作以后不会影响到系统的其他部分&lt;/li&gt;
  &lt;li&gt;可管理性：对维护，运行，部署系统所产生的开销，可用性的提高很可能会牺牲掉可管理型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;jvm调优的步骤&quot;&gt;JVM调优的步骤&lt;/h2&gt;

&lt;p&gt;根据定好的系统需求按照流程来对JVM进行调优，调优时应针对系统运行进入稳定阶段的运行情况来调优，以下是JVM调优的步骤(图源自《Java性能优化权威指南》)：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../styles/images/JVM调优工作流程.png&quot; alt=&quot;JVM调优的步骤&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;JVM调优涉及到多种系统需求，每个需求其实是一个取舍，为了满足某个需求必定为牺牲另外一个需求，所以在调优之前应该清除不同系统需求之间的优先级&lt;/li&gt;
  &lt;li&gt;接着是根据 可用性，可管理性和内存使用量 来确定JVM部署模式，在单个JVM上部署应用能增加应用的可管理性，但不利于应用的可用性和单个JVM的内存使用量&lt;/li&gt;
  &lt;li&gt;接着是根据 吞吐量、响应时间、启动时间，内存使用量 来选择JVM运行时，例如Server JVM能更好的满足吞吐量和响应时间，但牺牲了启动时间来进行优化，32位的JVM能提供更快启动时间和更少内存使用量&lt;/li&gt;
  &lt;li&gt;然后按步骤根据内存使用量、应用的停顿和应用的吞吐量 来对JVM的GC进行调优&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于调优的某个过程会影响到先前的系统需求、或者为了达到某个需求需要调整以前步骤的调优，所以调优的过程是一个重复多次步骤的过程&lt;/p&gt;

&lt;h2 id=&quot;jvm-gc调优&quot;&gt;JVM GC调优&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;优化GC是什么？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GC是个自动的内存管理工具，它根据一些参数来调整自己的行为，比如触发垃圾收集的阈值等&lt;/p&gt;

&lt;p&gt;CG优化就是通过改变某些参数来使得GC的行为让应用程序的性能指标(吞吐率和延迟)达到用户预期&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;为什么需要优化GC？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一般情况下，JVM会根据机器的性能选用某种合适的GC，并根据应用运行情况动态地对GC进行一定的优化，但当应用有特别的需求时，开发人员应该根据应用的特殊情况来选择合适的GC并进行人工优化&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;怎么样优化GC？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JVM根据不同的应用和应用的不同行为来调整其功能，尽量使应用的吞吐率和延迟达到一个平衡&lt;/p&gt;

&lt;p&gt;GC调优按照应用的需求程度能有不同的调优方法，这些方法从简单到复杂，对应用的性能需求越严格需要进行调整的参数越多&lt;/p&gt;

&lt;p&gt;JVM GC调优主要是面向3个性能需求属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;吞吐量: 不考虑停顿时长和内存占用，垃圾收集器能支撑的应用程序的任务量&lt;/li&gt;
  &lt;li&gt;延迟：垃圾收集器导致的应用停顿时长&lt;/li&gt;
  &lt;li&gt;内存占用：垃圾收集器顺畅运行所用的内存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这些属性都是不可兼得的，只能取舍&lt;/p&gt;

&lt;h3 id=&quot;gc的自适应调优&quot;&gt;GC的自适应调优&lt;/h3&gt;

&lt;p&gt;GC的自适应调优对人来说是最简单的，需要的工作量最少，这种调优方法叫人类工程学(Ergonomics 有道翻译)，简单地说就是JVM根据 &lt;em&gt;应用类型&lt;/em&gt; 、应用的运行情况和 &lt;em&gt;性能指标&lt;/em&gt; 来对JVM和GC进行配置和调整&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;JVM按照应用类型配置默认功能&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;应用类型&lt;/em&gt;&lt;br /&gt;
按照运行应用的机器性能来把应用分成两类：client型和server型；运行在 &amp;gt;1 CPU，&amp;gt;1GB 内存 的机器上的应用就属于server型&lt;/p&gt;

&lt;p&gt;JVM为不同类型的应用提供了不同的默认JVM功能配置，这些默认JVM功能包括：GC的种类，Java堆大小，运行时编译器  &lt;br /&gt;
server型的默认配置是 并行GC，[1/64总内存大小, 1/4总内存大小]的Java堆，server型运行时编译器&lt;br /&gt;
不同的硬件平台具体的默认配置请参考&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html#ergonomics&quot;&gt;HotSpot优化指南&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;并行gc调优建议&quot;&gt;并行GC调优建议&lt;/h4&gt;

&lt;p&gt;并行GC还会根据应用程序的运行情况和性能需求在初始大小和最大值中自动调整Java堆的大小&lt;/p&gt;

&lt;p&gt;性能需求包括3方面：吞吐率，最大停顿时间 和 内存占用量&lt;br /&gt;
可以通过-XX:MaxGCPauseMillis=&lt;nnn&gt;来配置应用的最大停顿时间，通过-XX:GCTimeRatio=&lt;nnn&gt;来配置应用的吞吐率，-XX:Xmx设置最大内存占用，GC会根据以上参数来调整堆大小，使其满足最大停顿延迟，尽量满足吞吐率，并尽量减少内存占用&lt;/nnn&gt;&lt;/nnn&gt;&lt;/p&gt;

&lt;p&gt;注意，只有并行GC支持以上最大停顿时间和吞吐率的配置参数，其他GC不支持；另外，上述性能需求时互相牵制的不可能同时满足，需要进行一定的取舍

&lt;strong&gt;GC自适应调优建议&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;除非知道应用所需的堆比默认最大堆大，否则不要指定堆的最大值&lt;/li&gt;
  &lt;li&gt;当GC达到最大堆还不能满足吞吐率时则需要调整最大堆的默认值了&lt;/li&gt;
  &lt;li&gt;当不能忍受GC的停顿时长时需要设置最大停顿时长，但这导致现有的吞吐量的下降&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;g1调优建议&quot;&gt;G1调优建议&lt;/h4&gt;

&lt;p&gt;G1跟并行GC一样是一种自适应GC，所以最简单的方法就是通过设置其XX:G1NewSizePercent来满足最大停顿时长的需求，设置XX:InitiatingHeapOccupancyPercent、XX:G1MixedGCLiveThresholdPercent、XX:G1MixedGCCountTarget、XX:G1HeapWastePercent、XX:G1OldCSetRegionThresholdPercent来满足吞吐率的需求，设置XX:Xmx来满足内存占用的需求&lt;/p&gt;

&lt;p&gt;当出现Survivor或to-space溢出时，说明Major GC不够早，或者不够快，这时可以&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置XX:G1ReservePercent来增大预留空间&lt;/li&gt;
  &lt;li&gt;降低XX:InitiatingHeapOccupancyPercent来提早Major GC&lt;/li&gt;
  &lt;li&gt;增加XX:ConcGCThreads来使Major GC收集更快&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当出现大量巨无霸对象时，可以考虑设置XX:G1HeapRegionSize来增大块来减少分配巨无霸对象&lt;/p&gt;

&lt;p&gt;G1调优时避免固定新生代的大小，这样会覆盖最大停顿时间配置&lt;/p&gt;

&lt;h3 id=&quot;复杂的gc调优&quot;&gt;复杂的GC调优&lt;/h3&gt;

&lt;p&gt;当GC的自适应调优不能满足应用的性能需求时就有必要进行更细致的调优&lt;br /&gt;
调优手段包括利用JVM的监控命令参数来打印GC的各种信息，根据性能需求调整GC的堆大小和各个代的大小，根据应用的性能需求和行为选择GC的种类&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;根据性能需求选择GC的种类的建议&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当应用数据集少于100M时使用序列化GC&lt;br /&gt;
当应用是部署到一个核心的机器上并且没有停顿时间的需求时使用序列化GC&lt;br /&gt;
当应用追求高吞吐率而不特别关心停顿时间时选用并行GC
当应用停顿时间比吞吐率重要是选用CMS或G1&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;堆大小和代大小的调优&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在根据性能需求和应用的行为特点选择了一种GC以后，可以通过调整堆和代的大小来调整应用的停顿和吞吐率，由于不同的的GC有各自的特点，所以其调优的方法和重点不一样&lt;/p&gt;

&lt;h3 id=&quot;调优gc并确定jvm内存使用量&quot;&gt;调优GC并确定JVM内存使用量&lt;/h3&gt;

&lt;p&gt;首先要确定GC所需要的内存使用量，然后作为参考来确定JVM的内存使用量是否合适 &lt;br /&gt;
通过获取活跃数据的大小能确定GC所需的内存使用量&lt;br /&gt;
Java堆大小并不代表Java应用程序大小，堆大小只是一部分，还包括调用栈大小，线程开销，io缓存，第三方库分配内存等，若JVM内存使用量超过机器所能分配的内存大小，则需要重新执行以前的步骤来调整需求&lt;/p&gt;

&lt;p&gt;活跃数据的大小是应用程序稳定运行时长期存活的对象占用的java堆大小，包括稳定阶段Major GC后的老年代和永久代占用的空间；&lt;/p&gt;

&lt;p&gt;首先通过给应用足够的负载来让Java堆进入稳定状态，若出现OOME，则说明最大堆大小设置太小了，增大堆大小来让GC正常运行&lt;br /&gt;
当GC经过多次Major GC后，用工具或命令行来算出多次Major GC后老年代中的占用量和永久代的占用量，这就是老年代和永久代的活跃数据的大小&lt;br /&gt;
获得活跃数据的大小后，一般可以按照3~4倍老年代活跃数据设置老年代，1.2~1.5倍永久代数据设置永久代，1~1.5倍老年代活跃数据设置新生代&lt;/p&gt;

&lt;p&gt;经过调整Java堆大小，对JVM内存大小的影响则取决于应用的因素了&lt;/p&gt;

&lt;h3 id=&quot;调优gc延迟&quot;&gt;调优GC延迟&lt;/h3&gt;

&lt;p&gt;对应用的延迟制定的系统需求主要包括4点：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;应用可接受的平均停滞时间&lt;/li&gt;
  &lt;li&gt;可接受的Minor GC频率&lt;/li&gt;
  &lt;li&gt;可接受的应用最大停顿&lt;/li&gt;
  &lt;li&gt;可接受的最大停顿频率&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;与系统需求相对应的GC延迟包括&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Minor GC的持续时间：对应应用可接受的平均停滞时间&lt;/li&gt;
  &lt;li&gt;Minor GC的频率：对应可接受的Minor GC频率&lt;/li&gt;
  &lt;li&gt;Major GC的持续时间：对应可接受的应用最大停顿&lt;/li&gt;
  &lt;li&gt;Major GC的频率：对应可接受的最大停顿频率&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;新生代越大Minor GC的平均时长越长而频率越低，老年代越大Full GC的平均时长越长而频率越低；所以通过调整新生代，老年代的大小来调整延迟或频率；&lt;/p&gt;

&lt;p&gt;通过调整GC的参数来使上述GC延迟满足系统的延迟需求&lt;br /&gt;
根据Minor GC的持续时间和频率调整新生代的大小，根据Full GC的持续时间和频率调整老年代的大小和决定是否需要切换到新的垃圾收集器&lt;/p&gt;

&lt;h4 id=&quot;对并行gc的调优&quot;&gt;对并行GC的调优&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;第一步，调整新生代大小&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据log里的Minor GC的持续时间、Minor GC的频率来调整新生代(更细粒度的说是Eden)的大小来满足应用可接受的平均停滞时间和可接受的Minor GC频率&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二步，调整老年代大小&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;根据log里的Major GC的持续时间、Major GC的频率来调整老年代的大小来满足可接受的应用最大停顿和可接受的最大停顿频率&lt;/p&gt;

&lt;p&gt;在调优老年代大小时，可以根据Full GC的时间戳和持续时间来确定延迟和频率；若log中没有Full GC，则可以通过15次Minor GC以后的Minor GC的记录来推算Full GC中对象的提升率，从而推断出Full GC的频率&lt;/p&gt;

&lt;p&gt;调整堆大小时需要符合几个准则：老年代大小至少是活跃数据的1.5倍，新生代至少为堆大小的10%，JVM大小不能超过可用物理内存；&lt;/p&gt;

&lt;h4 id=&quot;对cms的调优&quot;&gt;对CMS的调优&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;第一步，调整Survivor&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;对于CMS，为了减少CMS出现压缩式的Full GC，需要通过更精细的调整Survivor来减少不必要的对象提升到老年代，为此需要通过日志观察新生代中的对象年龄分布，找到合适的Survivor大小来保证年轻的对象都会在Minor GC中被收集&lt;/p&gt;

&lt;p&gt;注意，调整Survivor时应尽量保证Eden和老年代的大小不会减少&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二步，调整老年代&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;为了使老年代尽量少发生压缩式Full GC，主要是通过调整触发Major GC的老年代空间占用率 -XX:CMSInitiatingOccupancyFraction来控制进行Major GC的频率，对于占用率的调整主要依据两个因素&lt;br /&gt;
活跃数据的大小：占用率的设置不应小于活跃数据的大小，否则会不停触发Major GC&lt;br /&gt;
老年代对象的提升速率：并发Major GC清理对象的速率不要跟提升速率相差太大，过早的Major GC效率低，过晚的Major GC会引发CMF&lt;/p&gt;

&lt;p&gt;通过调整并行remark的线程数来调整最大停顿延迟&lt;/p&gt;

&lt;p&gt;可以考虑对永久代开启并发收集来减少产生Full GC的频率&lt;/p&gt;

&lt;p&gt;若经过调优后，GC所引起的延迟不能达到预期，能通过两种方法来减少堆内对象的分配率，从而降低延迟&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对应用进行性能分析，分析其堆占用，减少对象的分配和保持&lt;/li&gt;
  &lt;li&gt;改变JVM的部署模式，减少单个JVM的负荷&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;调优gc的吞吐量&quot;&gt;调优GC的吞吐量&lt;/h3&gt;

&lt;p&gt;调优吞吐量其实就是尽量降低Minor GC和Full GC的频率，例如可以是增大Eden空间降低Minor GC频率，例如增大Survivor空间来让提升发生之前都被Minor GC收集了，例如增大老年代来降低Full GC频率等&lt;/p&gt;

&lt;p&gt;另外还需要调整并发GC使用的CPU数量来控制GC对应用吞吐率的影响&lt;/p&gt;

&lt;h3 id=&quot;gc调优用到的命令行参数&quot;&gt;GC调优用到的命令行参数&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;优化GC时一般用到的监控命令行参数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-verbose:gc 输出垃圾收集信息&lt;br /&gt;
-XX:+PrintGCDetails 输出GC详细信息&lt;br /&gt;
-XX:+PrintGCTimeStamps 输出时间戳&lt;br /&gt;
-XX:+PrintGCDateStamps 输出日期&lt;br /&gt;
-Xloggc:&lt;filename&gt; 输出到文件  
-XX:+PrintTenuringDistribution 输出Survivor中对象的年龄分布  
-XX:+PrintGCApplicationConcurrentTIme 报告application在安全点之间的运行时间  
+XX:+PrintGCApplicationStoppedTime 报告application线程被阻塞的时间  
-XX:+PrintFlagsFinal 打印JVM使用的启动参数&lt;/filename&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;优化GC时一般用到的调优命令行参数&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;-Xms 初始堆大小&lt;br /&gt;
-Xmx 堆最大的大小&lt;br /&gt;
-XX:MinHeapFreeRatio 堆最小空比例，当堆的剩余空间少于这个比例则增大堆空间(不适用于并行GC)&lt;br /&gt;
-XX:MaxHeapFreeRatio 堆最大空比例，当堆的剩余空间大于这个比例则减少堆空间(不适用于并行GC)&lt;br /&gt;
-XX:NewRatio 老年代空间比新生代空间&lt;br /&gt;
-XX:NewSize 新生代初始空间大小&lt;br /&gt;
-XX:MaxNewSize 新生代最大空间大小&lt;br /&gt;
-XX:SurvivorRatio Eden空间比一个Survivor空间&lt;br /&gt;
-XX:+UseSerialGC 使用序列化GC&lt;br /&gt;
-XX:+UseParallelGC 使用并行GC&lt;br /&gt;
-XX:+UseConcMarkSweepGC 使用CMS&lt;br /&gt;
-XX:+UseG1GC 使用G1&lt;/p&gt;

&lt;p&gt;-XX:GCTimeRatio  设置并行GC收集时长和应用运行时长的比例&lt;br /&gt;
-XX:ParallelGCThreads 设置并行GC，G1垃圾收集的线程数N，当机器的核数大于等于8时，垃圾收集使用的线程数为5/8 * N，小于8则用N&lt;/p&gt;

&lt;p&gt;-XX:CMSInitiatingOccupancyFraction 触发CMS主要收集的内存占用率&lt;br /&gt;
-XX:UseGCOverheadLimit  屏蔽CMS产生OOME&lt;/p&gt;

&lt;p&gt;-XX:MaxGCPauseMillis 设置并行GC，G1的最大停顿时长&lt;br /&gt;
-XX:InitiatingHeapOccupancyPercent 触发G1主要收集的内存占用率&lt;br /&gt;
-XX:G1HeapRegionSize G1的区块大小&lt;br /&gt;
-XX:G1NewSizePercent G1最小新生代大小&lt;br /&gt;
-XX:G1MaxNewSizePercent G1最大新生代大小  &lt;br /&gt;
-XX:ConcGCThreads  设置G1的并行标记线程数&lt;br /&gt;
-XX:G1MixedGCLiveThresholdPercent 设置G1一个老年代区块被加入混合回收所需要的满载率&lt;br /&gt;
-XX:G1HeapWastePercent 设置触发G1进行混合收集的浪费率，当垃圾对象在堆里占比不足浪费率不会触发混合收集&lt;br /&gt;
-XX:G1MixedGCCountTarget G1进行混合收集时进行混合收集的次数&lt;br /&gt;
-XX:G1OldCSetRegionThresholdPercent G1一次混合收集中老年代区块数占收集区块的数上限&lt;br /&gt;
-XX:G1ReservePercent G1预留给拷贝阶段使用的空间&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/&quot;&gt;Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;《Java性能优化权威指南》&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 10:00:00 +0800</pubDate>
        <link>/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%85%A5%E9%97%A8/</link>
        <guid isPermaLink="true">/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_JVM%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E5%85%A5%E9%97%A8/</guid>
        
        <category>JVM</category>
        
        
        <category>技术</category>
        
      </item>
    
      <item>
        <title>JVM性能监控简介</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#监控jvm垃圾回收&quot; id=&quot;markdown-toc-监控jvm垃圾回收&quot;&gt;监控JVM垃圾回收&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#监控jit编译&quot; id=&quot;markdown-toc-监控jit编译&quot;&gt;监控JIT编译&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#监控类加载&quot; id=&quot;markdown-toc-监控类加载&quot;&gt;监控类加载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#监控java应用&quot; id=&quot;markdown-toc-监控java应用&quot;&gt;监控Java应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;本文是对JVM性能监控的基本知识的汇总和个人理解&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;JVM的性能监控主要包括3种监控：垃圾回收、JIT编译 和 类加载&lt;/p&gt;

&lt;h2 id=&quot;监控jvm垃圾回收&quot;&gt;监控JVM垃圾回收&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;命令行工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;通过用命令行参数来打印出垃圾回收的一些信息，通过这些信息来监控垃圾回收&lt;/p&gt;

&lt;p&gt;获取垃圾收集信息的相关命令：&lt;br /&gt;
-verbose:gc 输出垃圾收集信息&lt;br /&gt;
-XX:+PrintGCDetails 输出GC详细信息&lt;br /&gt;
-XX:+PrintGCTimeStamps 输出时间戳&lt;br /&gt;
-XX:+PrintGCDateStamps 输出日期&lt;br /&gt;
-Xloggc:&lt;filename&gt; 输出到文件  
-XX:+PrintGCApplicationConcurrentTIme 报告application在安全点之间的运行时间  
+XX:+PrintGCApplicationStoppedTime 报告application线程被阻塞的时间&lt;/filename&gt;&lt;/p&gt;

&lt;p&gt;从垃圾收集输出的日志里需要获得信息包括：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;所使用的垃圾收集器&lt;/li&gt;
  &lt;li&gt;Java堆大小&lt;/li&gt;
  &lt;li&gt;新生代和老年代大小&lt;/li&gt;
  &lt;li&gt;永久代大小&lt;/li&gt;
  &lt;li&gt;Minor GC持续时间&lt;/li&gt;
  &lt;li&gt;Minor GC的频率&lt;/li&gt;
  &lt;li&gt;Minor GC的空间回收量&lt;/li&gt;
  &lt;li&gt;Major GC的持续时间&lt;/li&gt;
  &lt;li&gt;Major GC的频率&lt;/li&gt;
  &lt;li&gt;每个并发回收周期内的空间回收量&lt;/li&gt;
  &lt;li&gt;垃圾回收前后Java堆的占用量&lt;/li&gt;
  &lt;li&gt;垃圾回收前后新生代和老年代的占用量&lt;/li&gt;
  &lt;li&gt;垃圾回收前后永久代的占用量&lt;/li&gt;
  &lt;li&gt;是否老年代或永久代的占用触发Major GC&lt;/li&gt;
  &lt;li&gt;应用是否显式触发垃圾回收&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;对收集到的垃圾收集信息可以用GCHisto来进行离线分析&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图形化工具&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;JConsole，VisualGC和VisualVM&lt;/p&gt;

&lt;h2 id=&quot;监控jit编译&quot;&gt;监控JIT编译&lt;/h2&gt;

&lt;p&gt;JIT编译器会对运行次数足够多的代码进行优化，对于优化不当的代码会进行逆优化甚至重新优化&lt;/p&gt;

&lt;p&gt;当需要监控优化，逆优化和重新优化的信息时可用命令行参数&lt;br /&gt;
-XX:+PrintCompilation&lt;/p&gt;

&lt;h2 id=&quot;监控类加载&quot;&gt;监控类加载&lt;/h2&gt;

&lt;p&gt;当类加载到足够多的时候会触发垃圾回收，通过监控类加载信息能为优化提供信息&lt;/p&gt;

&lt;p&gt;可以使用图形化工具来查看类的加载量：JConsole，VisualGC和VisualVM&lt;/p&gt;

&lt;p&gt;可通过垃圾回收的日志信息来查看类的卸载&lt;/p&gt;

&lt;h2 id=&quot;监控java应用&quot;&gt;监控Java应用&lt;/h2&gt;

&lt;p&gt;监控应用的常用方法是查看应用的输出日志&lt;br /&gt;
当应用使用了内置的MBean时，可以使用兼容的JMX工具来监控这些MBean&lt;/p&gt;

&lt;p&gt;若要快速地定位应用的锁竞争信息，可以通过命令工具jstack来获取线程的转储信息&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;p&gt;《Java性能优化权威指南》&lt;/p&gt;
</description>
        <pubDate>Wed, 04 Jan 2017 10:00:00 +0800</pubDate>
        <link>/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_JVM%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</link>
        <guid isPermaLink="true">/2017/01/04/Java%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97_JVM%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/</guid>
        
        <category>性能监控</category>
        
        
        <category>技术</category>
        
      </item>
    
  </channel>
</rss>
